{
    "content": "from opentrons import protocol_api\nimport re\n\nmetadata = {\n    'protocolName': '66e60f: Normalization protocol from CSV',\n    'author': 'Eskil Andersen <eskil.andersen@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n\n    [input_csv,\n     source_type,\n     dest_type,\n     tuberack_type,\n     p300_type,\n     air_gap_vol] = get_values(  # noqa: F821\n     \"input_csv\",\n     \"source_type\",\n     \"dest_type\",\n     \"tuberack_type\",\n     \"p300_type\",\n     \"air_gap_vol\")\n\n    # define all custom variables above here with descriptions:\n    left_pipette_loadname = 'p20_single_gen2'\n    right_pipette_loadname = p300_type\n\n    final_plate_loader_A = (dest_type, '6',\n                            'Final plate A')\n    final_plate_loader_B = (dest_type, '4',\n                            'Final plate B')\n    DNA_sample_plate_loader_A = (source_type, '9',\n                                 'DNA plate A')\n    DNA_sample_plate_loader_B = (source_type, '7',\n                                 'DNA plate B')\n    tuberack_loader = (tuberack_type, '5',\n                       'tuberack')\n    tiprack_300uL_loader = ('opentrons_96_filtertiprack_200ul', '10')\n    tiprack_20uL_A_loader = ('opentrons_96_filtertiprack_20ul', '3')\n    tiprack_20uL_B_loader = ('opentrons_96_filtertiprack_20ul', '1')\n\n    reservoir_loader = ('nest_12_reservoir_15ml', '11', 'water reservoir')\n\n    # Initial 40 uL water for each well of the target\n    initial_water_volume = 40\n\n    # Read CSV and format the inputs\n    # csv format: Plate | Well | Sample ID | Concentration | Transfer volume\n    #              [0]     [1]       [2]          [3]              [4]\n    data = [\n        [val.strip().upper() for val in line.split(',')\n            if val != '']\n        for line in input_csv.splitlines()[1:]\n        if line and line.split(',')[0]]\n\n    # Convert any well designation in column 1 from [A-H]0[1-9] to [A-H][1-9]\n    # e.g. A01 -> A1 etc.\n    pattern = re.compile('[A-H]0[1-9]')\n    for row in data:\n        if pattern.match(row[0]):\n            row[0] = row[0].replace('0', '')\n\n    # load modules\n\n    '''\n\n    Add your modules here with:\n\n    module_name = ctx.load_module('{module_loadname}', '{slot number}')\n\n    Note: if you are loading a thermocycler, you do not need to specify\n    a slot number - thermocyclers will always occupy slots 7, 8, 10, and 11.\n\n    For all other modules, you can load them on slots 1, 3, 4, 6, 7, 9, 10.\n\n    '''\n\n    # load labware\n    '''\n\n    Add your labware here with:\n\n    labware_name = ctx.load_labware('{loadname}', '{slot number}')\n\n    If loading labware on a module, you can load with:\n\n    labware_name = module_name.load_labware('{loadname}')\n    where module_name is defined above.\n\n    '''\n    reservoir = ctx.load_labware(reservoir_loader[0], reservoir_loader[1],\n                                 reservoir_loader[2])\n    dna_sample_plate_A = ctx.load_labware(DNA_sample_plate_loader_A[0],\n                                          DNA_sample_plate_loader_A[1],\n                                          DNA_sample_plate_loader_A[2])\n    dna_sample_plate_B = ctx.load_labware(DNA_sample_plate_loader_B[0],\n                                          DNA_sample_plate_loader_B[1],\n                                          DNA_sample_plate_loader_B[2])\n\n    final_plate_A = ctx.load_labware(final_plate_loader_A[0],\n                                     final_plate_loader_A[1],\n                                     final_plate_loader_A[2])\n    final_plate_B = ctx.load_labware(final_plate_loader_B[0],\n                                     final_plate_loader_B[1],\n                                     final_plate_loader_B[2])\n    tuberack = ctx.load_labware(tuberack_loader[0],\n                                tuberack_loader[1],\n                                tuberack_loader[2])\n\n    # load tipracks\n\n    '''\n\n    Add your tipracks here as a list:\n\n    For a single tip rack:\n\n    tiprack_name = [ctx.load_labware('{loadname}', '{slot number}')]\n\n    For multiple tip racks of the same type:\n\n    tiprack_name = [ctx.load_labware('{loadname}', 'slot')\n                     for slot in ['1', '2', '3']]\n\n    If two different tipracks are on the deck, use convention:\n    tiprack[number of microliters]\n    e.g. tiprack10, tiprack20, tiprack200, tiprack300, tiprack1000\n\n    '''\n    # tipracks_20_filter = [ctx.load_labware(tiprack_20uL_loader[0], slot)\n    #                      for slot in tiprack_20uL_loader[1]]\n    tiprack_20_A = [ctx.load_labware(\n        tiprack_20uL_A_loader[0], tiprack_20uL_A_loader[1])]\n    tiprack_20_B = [ctx.load_labware(\n        tiprack_20uL_B_loader[0], tiprack_20uL_B_loader[1])]\n    tiprack_300 = [ctx.load_labware(tiprack_300uL_loader[0],\n                                    tiprack_300uL_loader[1])]\n\n    # load instrument\n\n    '''\n    Nomenclature for pipette:\n\n    use 'p'  for single-channel, 'm' for multi-channel,\n    followed by number of microliters.\n\n    p20, p300, p1000 (single channel pipettes)\n    m20, m300 (multi-channel pipettes)\n\n    If loading pipette, load with:\n\n    ctx.load_instrument(\n                        '{pipette api load name}',\n                        pipette_mount (\"left\", or \"right\"),\n                        tip_racks=tiprack\n                        )\n    '''\n    # Load m20 and p20, m20 switches out for p300 in step 2\n    p20 = ctx.load_instrument(\n                        left_pipette_loadname,\n                        \"left\",\n                        tip_racks=None\n                        )\n    p300 = ctx.load_instrument(\n                        right_pipette_loadname,\n                        \"right\",\n                        tip_racks=tiprack_300\n                        )\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n\n    '''\n\n    Define all pipette functions, and class extensions here.\n    These may include but are not limited to:\n\n    - Custom pickup functions\n    - Custom drop tip functions\n    - Custom Tip tracking functions\n    - Custom Trash tracking functions\n    - Slow tip withdrawal\n\n    For any functions in your protocol, describe the function as well as\n    describe the parameters which are to be passed in as a docstring below\n    the function (see below).\n\n    def pick_up(pipette):\n        \"\"\"`pick_up()` will pause the protocol when all tip boxes are out of\n        tips, prompting the user to replace all tip racks. Once tipracks are\n        reset, the protocol will start picking up tips from the first tip\n        box as defined in the slot order when assigning the labware definition\n        for that tip box. `pick_up()` will track tips for both pipettes if\n        applicable.\n\n        :param pipette: The pipette desired to pick up tip\n        as definited earlier in the protocol (e.g. p300, m20).\n        \"\"\"\n        try:\n            pipette.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace empty tip racks\")\n            pipette.reset_tipracks()\n            pipette.pick_up_tip()\n\n    '''\n    # helper functions\n    '''\n    Define any custom helper functions outside of the pipette scope here, using\n    the convention seen above.\n\n    e.g.\n\n    def remove_supernatant(vol, index):\n        \"\"\"\n        function description\n\n        :param vol:\n\n        :param index:\n        \"\"\"\n\n\n    '''\n    class VolTracker:\n        def __init__(self, labware, well_vol,\n                     start=1, end=8,\n                     mode='reagent',\n                     pip_type='single',\n                     msg='Reset labware volumes'):\n            \"\"\"\n            Voltracker tracks the volume(s) used in a piece of labware\n\n            :param labware: The labware to track\n            :param well_vol: The volume of the liquid in the wells\n            :param pip_type: The pipette type used 'single' or 'multi'\n            :param mode: 'reagent' or 'waste'\n            :param start: The starting well\n            :param end: The ending well\n            :param msg: Message to send to the user when all wells are empty\n            (or full when in waste mode)\n\n            \"\"\"\n            self.labware_wells = dict.fromkeys(\n                labware.wells()[start-1:end], 0)\n            self.labware_wells_backup = self.labware_wells.copy()\n            self.well_vol = well_vol\n            self.pip_type = pip_type\n            self.mode = mode\n            self.start = start\n            self.end = end\n            self.msg = msg\n\n            # Parameter error checking\n            if not (pip_type == 'single' or pip_type == 'multi'):\n                raise Exception('Pipette type must be single or multi')\n\n            if not (mode == 'reagent' or mode == 'waste'):\n                raise Exception('mode must be reagent or waste')\n\n        def track(self, vol):\n            '''track() will track how much liquid\n            was used up per well. If the volume of\n            a given well is greater than self.well_vol\n            it will remove it from the dictionary and iterate\n            to the next well which will act as the reservoir.'''\n            well = next(iter(self.labware_wells))\n            vol = vol * 8 if self.pip_type == 'multi' else vol\n            if self.labware_wells[well] + vol >= self.well_vol:\n                del self.labware_wells[well]\n                if len(self.labware_wells) < 1:\n                    ctx.pause(self.msg)\n                    self.labware_wells = self.labware_wells_backup.copy()\n                well = next(iter(self.labware_wells))\n            self.labware_wells[well] += vol\n\n            if self.mode == 'waste':\n                ctx.comment('{}: {} ul of total waste'\n                            .format(well, int(self.labware_wells[well])))\n            else:\n                ctx.comment('{} uL of liquid used from {}'\n                            .format(int(self.labware_wells[well]), well))\n            return well\n\n    # reagents\n\n    '''\n    Define where all reagents are on the deck using the labware defined above.\n\n    e.g.\n\n    water = reservoir12.wells()[-1]\n    waste = reservoir.wells()[0]\n    samples = plate.rows()[0][0]\n    dnase = tuberack.wells_by_name()['A4']\n\n    '''\n    water_well = reservoir.wells_by_name()['A1']\n    liquid_waste = reservoir.wells_by_name()['A2'].top(-2)\n\n    water_waste_tube_tracker = VolTracker(\n        tuberack, 1500, 1, 2, 'waste',\n        'single', \"\\n\\nWater waste tube full, please replace\\n\")\n    dna_waste_tube_tracker = VolTracker(\n        tuberack, 1500, 3, 4, 'waste',\n        'single',\n        \"\\n\\nDNA waste tubes may be full, please replace even if not full\\n\")\n    dna_pool_tube = tuberack.wells_by_name()['A2']\n\n    # plate, tube rack maps\n\n    '''\n    Define any plate or tube maps here.\n\n    e.g.\n\n    plate_wells_by_row = [well for row in plate.rows() for well in row]\n\n    '''\n\n    # protocol\n\n    '''\n\n    Include header sections as follows for each \"section\" of your protocol.\n\n    Section can be defined as a step in a bench protocol.\n\n    e.g.\n\n    ctx.comment('\\n\\nMOVING MASTERMIX TO SAMPLES IN COLUMNS 1-6\\n')\n\n    for .... in ...:\n        ...\n        ...\n\n    ctx.comment('\\n\\nRUNNING THERMOCYCLER PROFILE\\n')\n\n    ...\n    ...\n    ...\n\n\n    '''\n    # Find all wells and columns in the csv so that water dispension can\n    # be limited to  those columns or wells\n\n    # Lists of well names\n    well_list_A = []\n    well_list_B = []\n    # Lists of well locations on the final plates for initial water transfer\n    wells_A = []\n    wells_B = []\n    i = 2\n    for plate, well, _, _, _ in data:\n        if plate == 'A':\n            well_list_A.append(well)\n        elif plate == 'B':\n            well_list_B.append(well)\n        else:\n            raise Exception((\"The plate name on line {} in the csv \" +\n                             \"seems malformed: {}\").\n                            format(i, plate))\n        i += 1\n\n    # If the set and the list are not the same length there must be duplicates\n    if len(well_list_A) != len(list(set(well_list_A))):\n        raise Exception('Duplicate wells found for plate A, check your csv')\n    if len(well_list_B) != len(list(set(well_list_B))):\n        raise Exception('Duplicate wells found for plate B, check your csv')\n\n    if 'single' in p300_type:\n        wells_A = [final_plate_A.wells_by_name()[well] for well in well_list_A]\n        wells_B = [final_plate_B.wells_by_name()[well] for well in well_list_B]\n\n    col_set_A = []\n    col_set_B = []\n    if 'multi' in p300_type:\n        col_list_A = [well[1:] for well in well_list_A]\n        col_list_B = [well[1:] for well in well_list_B]\n        # Create a a list of the set of all unique column values\n        # and sort from lowest to highest column\n        col_set_A = list(set(col_list_A))\n        col_set_B = list(set(col_list_B))\n        # Chaining sort() doesn't work\n        col_set_A.sort()\n        col_set_B.sort()\n        wells_A = [final_plate_A.columns()[int(col)-1][0] for col in col_set_A]\n        wells_B = [final_plate_B.columns()[int(col)-1][0] for col in col_set_B]\n\n    p300.pick_up_tip()\n    for wells, plate_name in zip([wells_A, wells_B], ['A', 'B']):\n        if len(wells) > 0:\n            ctx.comment(\"\\nTransferring water to final plate {}\\n\".\n                        format(plate_name))\n            for well in wells:\n                if p300.current_volume < initial_water_volume:\n                    p300.aspirate(200-p300.current_volume, water_well)\n                p300.dispense(initial_water_volume, well)\n            p300.blow_out(liquid_waste)\n    p300.drop_tip()\n\n    # Make sure the lines in data are ordered by plate so that we can\n    # distribute as efficiently as possible\n    sorted_data = sorted(data, key=lambda line: line[0])\n\n    # Transfering DNA samples to target\n    ctx.comment(\"\\nTransferring DNA sample to target plate\\n\")\n    for plate, well, sampleID, conc, vol in sorted_data:\n        vol = float(vol)\n        dna_source = dna_sample_plate_A[well] \\\n            if plate == 'A' else dna_sample_plate_B[well]\n        dna_dest = final_plate_A[well] if plate == 'A' else final_plate_B[well]\n\n        ctx.comment((\"Normalizing sample \\\"{}\\\" on plate {} with \" +\n                    \"concentration {}\").format(sampleID, plate, conc))\n        pip = p20\n\n        if plate == 'A':\n            pip.pick_up_tip(tiprack_20_A[0].next_tip())\n        elif plate == 'B':\n            pip.pick_up_tip(tiprack_20_B[0].next_tip())\n        else:\n            raise Exception(\"Invalid plate specified: {}\".format(plate))\n        # Remove water from the final plates and dispense into waste tubes\n        pip.aspirate(vol, dna_dest)\n        pip.dispense(vol, water_waste_tube_tracker.track(vol))\n        pip.blow_out()\n        pip.touch_tip()\n        # Aspirate DNA sample\n        pip.aspirate(vol, dna_source)\n        remaining_vol = pip.max_volume - vol\n        air_gap_vol = air_gap_vol \\\n            if air_gap_vol < remaining_vol else remaining_vol\n        pip.air_gap(air_gap_vol)\n        # Dispense into final well\n        pip.dispense(vol + air_gap_vol, dna_dest)\n        # Touch tip in the destination well\n        pip.touch_tip()\n        # Blow out DNA waste\n        pip.blow_out(dna_waste_tube_tracker.track(5))\n        pip.return_tip()\n\n    pip = p20\n    # Reset the tipracks so we can reuse the tips\n    for rack in [tiprack_20_A[0], tiprack_20_B[0]]:\n        rack.reset()\n\n    ctx.pause(\n        \"[Off deck] Seal the plates, vortex the plates, brief spin, \" +\n        \"remove seal, replace the plates back to the deck\\n\")\n    ctx.comment(\"Transferring 5 uL diluted DNA samples to DNA pool tube\\n\\n\")\n    for plate, well, _, _, _ in sorted_data:\n        well = final_plate_A.wells_by_name()[well] if plate == 'A' \\\n            else final_plate_B.wells_by_name()[well]\n        if plate == 'A':\n            pip.pick_up_tip(tiprack_20_A[0].next_tip())\n        elif plate == 'B':\n            pip.pick_up_tip(tiprack_20_B[0].next_tip())\n        else:\n            raise Exception(\"Invalid plate specified: {}\".format(plate))\n        pip.aspirate(5, well)\n        air_gap_vol = air_gap_vol \\\n            if air_gap_vol < remaining_vol else remaining_vol\n        pip.air_gap(air_gap_vol)\n        pip.dispense(vol, dna_pool_tube)\n        pip.blow_out()\n        pip.touch_tip()\n        pip.drop_tip()\n    ctx.comment(\"\\n\\n~~~~ Protocol Finished! ~~~~\\n\")\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Plate,Well,SampleID,Concentration,VolumeToDispense\\nB,A3,SAMPLE113,10.5,13.2\\nA,A1,SAMPLE1,10.5,13.2\\nA,A2,SAMPLE9,10.5,13.2\\nA,H12,SAMPLE96,16.7,7.5\\nB,A1,SAMPLE97,18.2,5.6\\nB,H12,SAMPLE192,16.0,8.1",
            "label": ".csv input file",
            "name": "input_csv",
            "type": "textFile"
        },
        {
            "label": "Source plate type",
            "name": "source_type",
            "options": [
                {
                    "label": "Bio-Rad 96 Well Plate 200 \u00b5L PCR",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "Corning 96 Well Plate 360 \u00b5L Flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "NEST 96 Well Plate 200 \u00b5L Flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "NEST 96 Deepwell Plate 2mL",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "USA Scientific 96 Deep Well Plate 2.4 mL",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Destination plate type",
            "name": "dest_type",
            "options": [
                {
                    "label": "Bio-Rad 96 Well Plate 200 \u00b5L PCR",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "Corning 96 Well Plate 360 \u00b5L Flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "NEST 96 Well Plate 200 \u00b5L Flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "NEST 96 Deepwell Plate 2mL",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "USA Scientific 96 Deep Well Plate 2.4 mL",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tuberack/tubes",
            "name": "tuberack_type",
            "options": [
                {
                    "label": "Opentrons 24 Tube Rack with NEST 1.5 mL Snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with NEST 0.5 mL Screwcap",
                    "value": "opentrons_24_tuberack_nest_0.5ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with NEST 1.5 mL Screwcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with NEST 2 mL Screwcap",
                    "value": "opentrons_24_tuberack_nest_2ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with Eppendorf 2 mL Safe-Lock Snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "Opentrons 24 Tube Rack with Generic 2 mL Screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 type",
            "name": "p300_type",
            "options": [
                {
                    "label": "P300 8-Channel (GEN2)",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "P300 Single-Channel (GEN2)",
                    "value": "p300_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 10,
            "label": "Air gap volume",
            "name": "air_gap_vol",
            "type": "float"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Final plate B on 4",
            "share": false,
            "slot": "4",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "tuberack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "Final plate A on 6",
            "share": false,
            "slot": "6",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "DNA plate B on 7",
            "share": false,
            "slot": "7",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "DNA plate A on 9",
            "share": false,
            "slot": "9",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "water reservoir on 11",
            "share": false,
            "slot": "11",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Eskil Andersen <eskil.andersen@opentrons.com>",
        "protocolName": "66e60f: Normalization protocol from CSV",
        "source": "Custom Protocol Request"
    },
    "modules": []
}