{
    "content": "from opentrons import protocol_api\nimport re\n\nmetadata = {\n    'protocolName': 'Normalization protocol',\n    'author': 'Eskil Andersen <eskil.andersen@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n\n    [input_csv, source_type, dest_type, p300_type] = get_values(  # noqa: F821\n        'input_csv', 'source_type', 'dest_type', 'p300_type')\n\n    # define all custom variables above here with descriptions:\n    left_pipette_loadname = 'p20_single_gen2'\n    right_pipette_loadname = p300_type\n\n    target_plate_loader = (dest_type, '1',\n                           'target plate')\n    DNA_sample_plate_loader = (dest_type, '7',\n                               'DNA sample plate')\n    tiprack_300uL_loader = ('opentrons_96_filtertiprack_200ul', '2')\n    tiprack_20uL_loader = ('opentrons_96_filtertiprack_20ul', '5')\n\n    reservoir_loader = ('nest_12_reservoir_15ml', '4', 'water reservoir')\n\n    # Initial 40 uL water for each well of the target\n    initial_water_volume = 40\n\n    # Read CSV and format the inputs\n    # csv format: Well | Description | Concentration | volume to transfer\n    #              [0]       [1]           [2]                [3]\n    data = [\n        [val.strip().upper() for val in line.split(',')\n            if val != '']\n        for line in input_csv.splitlines()[1:]\n        if line and line.split(',')[0]]\n\n    # Convert any well designation in column 1 from [A-H]0[1-9] to [A-H][1-9]\n    # e.g. A01 -> A1 etc.\n    pattern = re.compile('[A-H]0[1-9]')\n    for row in data:\n        if pattern.match(row[0]):\n            row[0] = row[0].replace('0', '')\n\n    # load modules\n\n    '''\n\n    Add your modules here with:\n\n    module_name = ctx.load_module('{module_loadname}', '{slot number}')\n\n    Note: if you are loading a thermocycler, you do not need to specify\n    a slot number - thermocyclers will always occupy slots 7, 8, 10, and 11.\n\n    For all other modules, you can load them on slots 1, 3, 4, 6, 7, 9, 10.\n\n    '''\n\n    # load labware\n    '''\n\n    Add your labware here with:\n\n    labware_name = ctx.load_labware('{loadname}', '{slot number}')\n\n    If loading labware on a module, you can load with:\n\n    labware_name = module_name.load_labware('{loadname}')\n    where module_name is defined above.\n\n    '''\n    reservoir = ctx.load_labware(reservoir_loader[0], reservoir_loader[1],\n                                 reservoir_loader[2])\n    dna_sample_plate = ctx.load_labware(DNA_sample_plate_loader[0],\n                                        DNA_sample_plate_loader[1],\n                                        DNA_sample_plate_loader[2])\n    target_plate = ctx.load_labware(target_plate_loader[0],\n                                    target_plate_loader[1],\n                                    target_plate_loader[2])\n\n    # load tipracks\n\n    '''\n\n    Add your tipracks here as a list:\n\n    For a single tip rack:\n\n    tiprack_name = [ctx.load_labware('{loadname}', '{slot number}')]\n\n    For multiple tip racks of the same type:\n\n    tiprack_name = [ctx.load_labware('{loadname}', 'slot')\n                     for slot in ['1', '2', '3']]\n\n    If two different tipracks are on the deck, use convention:\n    tiprack[number of microliters]\n    e.g. tiprack10, tiprack20, tiprack200, tiprack300, tiprack1000\n\n    '''\n    tiprack_20_filter = [ctx.load_labware(tiprack_20uL_loader[0],\n                                          tiprack_20uL_loader[1])]\n    tiprack_300_filter = [ctx.load_labware(tiprack_300uL_loader[0],\n                                           tiprack_300uL_loader[1])]\n\n    # load instrument\n\n    '''\n    Nomenclature for pipette:\n\n    use 'p'  for single-channel, 'm' for multi-channel,\n    followed by number of microliters.\n\n    p20, p300, p1000 (single channel pipettes)\n    m20, m300 (multi-channel pipettes)\n\n    If loading pipette, load with:\n\n    ctx.load_instrument(\n                        '{pipette api load name}',\n                        pipette_mount (\"left\", or \"right\"),\n                        tip_racks=tiprack\n                        )\n    '''\n    # Load m20 and p20, m20 switches out for p300 in step 2\n    p20 = ctx.load_instrument(\n                        left_pipette_loadname,\n                        \"left\",\n                        tip_racks=tiprack_20_filter\n                        )\n    p300 = ctx.load_instrument(\n                        right_pipette_loadname,\n                        \"right\",\n                        tip_racks=tiprack_300_filter\n                        )\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n\n    '''\n\n    Define all pipette functions, and class extensions here.\n    These may include but are not limited to:\n\n    - Custom pickup functions\n    - Custom drop tip functions\n    - Custom Tip tracking functions\n    - Custom Trash tracking functions\n    - Slow tip withdrawal\n\n    For any functions in your protocol, describe the function as well as\n    describe the parameters which are to be passed in as a docstring below\n    the function (see below).\n\n    def pick_up(pipette):\n        \"\"\"`pick_up()` will pause the protocol when all tip boxes are out of\n        tips, prompting the user to replace all tip racks. Once tipracks are\n        reset, the protocol will start picking up tips from the first tip\n        box as defined in the slot order when assigning the labware definition\n        for that tip box. `pick_up()` will track tips for both pipettes if\n        applicable.\n\n        :param pipette: The pipette desired to pick up tip\n        as definited earlier in the protocol (e.g. p300, m20).\n        \"\"\"\n        try:\n            pipette.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace empty tip racks\")\n            pipette.reset_tipracks()\n            pipette.pick_up_tip()\n\n    '''\n\n    # helper functions\n    '''\n    Define any custom helper functions outside of the pipette scope here, using\n    the convention seen above.\n\n    e.g.\n\n    def remove_supernatant(vol, index):\n        \"\"\"\n        function description\n\n        :param vol:\n\n        :param index:\n        \"\"\"\n\n\n    '''\n\n    # reagents\n\n    '''\n    Define where all reagents are on the deck using the labware defined above.\n\n    e.g.\n\n    water = reservoir12.wells()[-1]\n    waste = reservoir.wells()[0]\n    samples = plate.rows()[0][0]\n    dnase = tuberack.wells_by_name()['A4']\n\n    '''\n    water_well = reservoir.wells_by_name()['A1']\n    liquid_waste = reservoir.wells_by_name()['A2'].top(-2)\n\n    # plate, tube rack maps\n\n    '''\n    Define any plate or tube maps here.\n\n    e.g.\n\n    plate_wells_by_row = [well for row in plate.rows() for well in row]\n\n    '''\n\n    # protocol\n\n    '''\n\n    Include header sections as follows for each \"section\" of your protocol.\n\n    Section can be defined as a step in a bench protocol.\n\n    e.g.\n\n    ctx.comment('\\n\\nMOVING MASTERMIX TO SAMPLES IN COLUMNS 1-6\\n')\n\n    for .... in ...:\n        ...\n        ...\n\n    ctx.comment('\\n\\nRUNNING THERMOCYCLER PROFILE\\n')\n\n    ...\n    ...\n    ...\n\n\n    '''\n\n    ctx.comment(\"\\nTransferring water to target plate\\n\")\n    p300.pick_up_tip()\n    wells = target_plate.rows()[0] if 'multi' in p300_type else \\\n        target_plate.wells()\n    for well in wells:\n        if p300.current_volume < initial_water_volume:\n            p300.aspirate(200-p300.current_volume, water_well)\n        p300.dispense(initial_water_volume, well)\n    p300.blow_out(water_well)\n    p300.return_tip()\n    p300.reset_tipracks()\n\n    # Transfering DNA samples to target\n    ctx.comment(\"\\nTransferring DNA sample to target plate\\n\")\n    for line in data:\n        well = line[0]\n        description = line[1]\n        concentration = line[2]\n        volume = float(line[3])\n\n        ctx.comment(\"Normalizing sample {} with concentration {}\"\n                    .format(description, concentration))\n        pip = p20 if volume <= 20 or 'multi' in p300_type else p300\n        pip.pick_up_tip()\n        pip.transfer(volume,\n                     target_plate.wells_by_name()[well],\n                     liquid_waste, new_tip=\"never\")\n        pip.transfer(volume,\n                     dna_sample_plate.wells_by_name()[well],\n                     target_plate.wells_by_name()[well], new_tip=\"never\")\n        pip.mix(3, 20)\n        pip.blow_out(liquid_waste)\n        pip.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Well,Description,Concentration,Volume_to_transfer,,,,,,,\\nA01,13377_16S_Bac,3.28,12.52,,,,,,,",
            "label": ".csv input file",
            "name": "input_csv",
            "type": "textFile"
        },
        {
            "label": "source plate type",
            "name": "source_type",
            "options": [
                {
                    "label": "Bio-Rad 96 Well Plate 200 \u00b5L PCR",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "Corning 96 Well Plate 360 \u00b5L Flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "NEST 96 Well Plate 200 \u00b5L Flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "NEST 96 Deepwell Plate 2mL",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "USA Scientific 96 Deep Well Plate 2.4 mL",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "destination plate type",
            "name": "dest_type",
            "options": [
                {
                    "label": "Bio-Rad 96 Well Plate 200 \u00b5L PCR",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "Corning 96 Well Plate 360 \u00b5L Flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "NEST 96 Well Plate 200 \u00b5L Flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "NEST 96 Deepwell Plate 2mL",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "USA Scientific 96 Deep Well Plate 2.4 mL",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 type",
            "name": "p300_type",
            "options": [
                {
                    "label": "P300 8-Channel (GEN2)",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "P300 Single-Channel (GEN2)",
                    "value": "p300_single_gen2"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "target plate on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "water reservoir on 4",
            "share": false,
            "slot": "4",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "DNA sample plate on 7",
            "share": false,
            "slot": "7",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Eskil Andersen <eskil.andersen@opentrons.com>",
        "protocolName": "Normalization protocol",
        "source": "Custom Protocol Request"
    },
    "modules": []
}