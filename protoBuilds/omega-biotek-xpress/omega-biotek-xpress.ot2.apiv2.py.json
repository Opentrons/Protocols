{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\n\nmetadata = {\n    'protocolName': 'Omega Biotek Mag-Bind Viral RNA XPress Kit',\n    'author': 'Nick <ndiehl@opentrons.com',\n    'apiLevel': '2.11'\n}\n\n\n# Start protocol\ndef run(ctx):\n\n    [NUM_SAMPLES, ELUTION_VOL,\n        PARK, m300_mount] = get_values(  # noqa: F821\n        \"NUM_SAMPLES\", \"ELUTION_VOL\", \"PARK\", \"m300_mount\")\n\n    TIP_TRACK = False\n    STARTING_VOL = 440\n\n    # load labware and pipettes\n    num_cols = math.ceil(NUM_SAMPLES/8)\n    tips300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['3', '6', '8', '9', '10']]\n    if PARK:\n        parkingrack = ctx.load_labware(\n            'opentrons_96_filtertiprack_200ul', '7',\n            '200\u00b5l filtertiprack for parking')\n        parking_spots = parkingrack.rows()[0][:num_cols]\n    else:\n        tips300.insert(0, ctx.load_labware(\n                                    'opentrons_96_filtertiprack_200ul', '7',\n                                    '200\u00b5l filtertiprack'))\n        parking_spots = [None for none in range(12)]\n\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magdeck.disengage()\n    magheight = 6\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep')\n    tempdeck = ctx.load_module('Temperature Module Gen2', '1')\n    flatplate = tempdeck.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul',)\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '11',\n                             'Liquid Waste').wells()[0].top()\n    etoh = ctx.load_labware(\n        'nest_1_reservoir_195ml', '2', 'EtOH reservoir').wells()[0:]\n    res1 = ctx.load_labware(\n        'nest_12_reservoir_15ml', '5', 'reagent reservoir 1')\n    binding_buffer = res1.wells()[:3]\n    wash1 = res1.wells()[3:6]\n    elution_solution = res1.wells()[-1]\n    lysis_buffer = res1.wells()[7:10]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = flatplate.rows()[0][:num_cols]\n\n    magdeck.disengage()  # just in case\n    tempdeck.set_temperature(4)\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    tip_log = {'count': {}}\n    if TIP_TRACK and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                if 'tips300' in data:\n                    tip_log['count'][m300] = data['tips300']\n                else:\n                    tip_log['count'][m300] = 0\n        else:\n            tip_log['count'][m300] = 0\n    else:\n        tip_log['count'] = {m300: 0}\n\n    tip_log['tips'] = {\n        m300: [tip for rack in tips300 for tip in rack.rows()[0]]}\n    tip_log['max'] = {m300: len(tip_log['tips'][m300])}\n\n    def pick_up(pip, loc=None):\n        nonlocal tip_log\n        if tip_log['count'][pip] == tip_log['max'][pip] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log['count'][pip] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log['tips'][pip][tip_log['count'][pip]])\n            tip_log['count'][pip] += 1\n\n    switch = True\n    drop_count = 0\n    drop_threshold = 240\n\n    def drop(pip):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        drop_count += 8\n        if drop_count == drop_threshold:\n            m300.home()\n            ctx.pause('Please empty tips from waste before resuming.')\n            ctx.home()\n            drop_count = 0\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, park=False):\n        def waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                m300.home()\n                ctx.pause('Please empty waste (slot 11) before resuming.')\n                ctx.home()\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                pick_up(m300, spot)\n            else:\n                pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            for _ in range(num_trans):\n                waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, m.top())  # void air gap\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=20)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def bind(vol, park=True):\n        # add bead binding buffer and mix samples\n        for i, (well, spot, source) in enumerate(zip(mag_samples_m,\n                                                     parking_spots,\n                                                     binding_buffer*12)):\n            if park:\n                pick_up(m300, spot)\n            else:\n                pick_up(m300)\n            for _ in range(10):\n                m300.aspirate(200, source.bottom(1), rate=1.5)\n                m300.dispense(200, source.bottom(5), rate=2)\n            num_trans = math.ceil(vol/210)\n            vol_per_trans = vol/num_trans\n            for t in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, source.top())\n                m300.transfer(vol_per_trans, source, well.top(), air_gap=20,\n                              new_tip='never')\n                if t == 0:\n                    m300.air_gap(20)\n            m300.mix(10, 200, well)\n            m300.blow_out(well.top(-2))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                drop(m300)\n        ctx.comment('\\n\\n\\n')\n\n        magdeck.engage(height=magheight)\n        ctx.delay(minutes=2, msg='Incubating on MagDeck for 2 minutes.')\n\n        # remove initial supernatant\n        remove_supernatant(vol+STARTING_VOL, park=park)\n\n    def wash(wash_vol, source, mix_reps=15, park=True):\n        magdeck.disengage()\n\n        num_trans = math.ceil(wash_vol/200)\n        vol_per_trans = wash_vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            m300.mix(mix_reps, 150, loc)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                drop(m300)\n\n        magdeck.engage(height=magheight)\n        ctx.delay(minutes=5, msg='Incubating on MagDeck for 5 minutes.')\n\n        remove_supernatant(wash_vol, park=park)\n\n    def elute(vol, park=True):\n        # resuspend beads in elution\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.aspirate(vol, elution_solution)\n            m300.move_to(m.center())\n            m300.dispense(vol, loc)\n            m300.mix(10, 0.8*vol, loc)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                drop(m300)\n\n        ctx.delay(minutes=2, msg='Incubating off magnet at room temperature \\\nfor 2 minutes')\n        magdeck.engage(height=magheight)\n        ctx.delay(minutes=2, msg='Incubating on magnet at room temperature \\\nfor 2 minutes')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            if park:\n                pick_up(m300, spot)\n            else:\n                pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.transfer(40, loc, e.bottom(5), air_gap=20, new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(20)\n            m300.drop_tip()\n\n    # add lysis buffer to plate\n    for col, spot, buffer_well in zip(mag_samples_m,\n                                      parking_spots,\n                                      lysis_buffer*12):\n        if PARK:\n            pick_up(m300, spot)\n        else:\n            pick_up(m300)\n        m300.transfer(240, buffer_well, col, new_tip='never')\n        m300.mix(15, 200, col)\n        if PARK:\n            m300.drop_tip(spot)\n        else:\n            drop(m300)\n    ctx.comment('\\n\\n\\n')\n\n    magdeck.engage(height=magheight)\n    ctx.delay(minutes=2, msg='Incubating on MagDeck for 2 minutes.')\n\n    bind(285, park=PARK)\n    wash(350, wash1, park=PARK)\n    wash(350, etoh, park=PARK)\n    wash(350, etoh, park=PARK)\n\n    ctx.delay(minutes=5, msg='Airdrying beads at room temperature for 5 \\\nminutes.')\n    magdeck.disengage()\n\n    elute(ELUTION_VOL, park=PARK)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Number of Samples",
            "name": "NUM_SAMPLES",
            "options": [
                {
                    "label": "96",
                    "value": 96
                },
                {
                    "label": "88",
                    "value": 88
                },
                {
                    "label": "80",
                    "value": 80
                },
                {
                    "label": "72",
                    "value": 72
                },
                {
                    "label": "64",
                    "value": 64
                },
                {
                    "label": "56",
                    "value": 56
                },
                {
                    "label": "48",
                    "value": 48
                },
                {
                    "label": "40",
                    "value": 40
                },
                {
                    "label": "32",
                    "value": 32
                },
                {
                    "label": "24",
                    "value": 24
                },
                {
                    "label": "16",
                    "value": 16
                },
                {
                    "label": "8",
                    "value": 8
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 100,
            "label": "Elution Volume (ul)",
            "name": "ELUTION_VOL",
            "type": "int"
        },
        {
            "label": "Park tips?",
            "name": "PARK",
            "options": [
                {
                    "label": "Yes, park tips.",
                    "value": true
                },
                {
                    "label": "No, do not park tips.",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi-Channel Mount",
            "name": "m300_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "EtOH reservoir on 2",
            "share": false,
            "slot": "2",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "reagent reservoir 1 on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack for parking on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Liquid Waste on 11",
            "share": false,
            "slot": "11",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Nick <ndiehl@opentrons.com",
        "protocolName": "Omega Biotek Mag-Bind Viral RNA XPress Kit"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 4 lw NEST 96 Deepwell Plate 2mL on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        },
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 1 lw Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "tempdeck"
        }
    ]
}