{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Nextera DNA Flex NGS Library Prep: Tagment DNA',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.0'\n}\n\n\ndef run(ctx):\n\n    [number_of_samples_to_process, p50_single_mount, using_p50_multi,\n        p50_multi_mount_if_applicable] = get_values(  # noqa: F821\n        'number_of_samples_to_process', 'p50_single_mount', 'using_p50_multi',\n        'p50_multi_mount_if_applicable')\n\n    # check:\n    if (\n        using_p50_multi == 'yes'\n        and p50_single_mount == p50_multi_mount_if_applicable\n    ):\n        raise Exception('Input different mounts for P50 and P300 multi-channel \\\npipettes')\n    if number_of_samples_to_process > 96 or number_of_samples_to_process < 1:\n        raise Exception('Invalid number of samples to process (must be between \\\n1 and 96).')\n\n    # load labware and modules\n    rxn_plate = ctx.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '1', 'tagmentation reaction plate')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap',\n        '2',\n        'reagent tuberack'\n    )\n\n    # reagents\n    mm = tuberack.columns()[0][:2]\n    blt = [well.top(-19) for well in tuberack.columns()[1]]\n    tb1 = [well.top(-19) for well in tuberack.columns()[2]]\n\n    samples = rxn_plate.wells()[:number_of_samples_to_process]\n\n    # pipettes\n    slots = ['4', '5'] if number_of_samples_to_process > 94 else ['4']\n    tips50s = [\n        ctx.load_labware('opentrons_96_tiprack_300ul', slot) for slot in slots]\n    p50 = ctx.load_instrument(\n        'p50_single', mount=p50_single_mount, tip_racks=tips50s)\n\n    # create mastermix\n    num_transfers_each = math.ceil(11*number_of_samples_to_process/50)\n    max_transfers = math.ceil(11*96/50)\n    vol_per_transfer = 11*number_of_samples_to_process/num_transfers_each\n\n    max_mm_ind = 0\n    p50.pick_up_tip()\n    for reagent in [blt, tb1]:\n        r_ind_prev = 0\n        for i in range(num_transfers_each):\n            r_ind = i*len(reagent)//max_transfers\n            mm_ind = i*len(mm)//max_transfers\n            if r_ind != r_ind_prev:\n                p50.transfer(\n                    10, reagent[r_ind], mm[mm_ind].bottom(5), new_tip='never')\n                r_ind_prev = r_ind\n            if mm_ind > max_mm_ind:\n                max_mm_ind = mm_ind\n            p50.transfer(\n                vol_per_transfer,\n                reagent[r_ind],\n                mm[mm_ind].bottom(5),\n                new_tip='never'\n            )\n            if reagent == tb1:\n                p50.blow_out()\n            p50.move_to(mm[mm_ind].top(10))\n\n    # mix used mastermix tubes\n    p50.flow_rate.aspirate = 40\n    for tube in mm[:max_mm_ind+1]:\n        for i in range(10):\n            p50.aspirate(50, tube)\n            p50.dispense(50, tube.bottom(15))\n        p50.blow_out(tube.top())\n\n    # distribute mastermix\n    p50.flow_rate.aspirate = 25\n    if using_p50_multi == 'no':\n        for i, s in enumerate(samples):\n            if not p50.hw_pipette['has_tip']:\n                p50.pick_up_tip()\n            mm_ind = i//48\n            p50.transfer(20, mm[mm_ind], s, new_tip='never')\n            p50.mix(10, 15, s)\n            p50.blow_out()\n            p50.drop_tip()\n\n    else:\n        mm_plate = ctx.load_labware(\n            'biorad_96_wellplate_200ul_pcr',\n            '3',\n            'mastermix plate (for multi-channel transfer)'\n        )\n        tips50m = ctx.load_labware('opentrons_96_tiprack_300ul', '6')\n        m50 = ctx.load_instrument(\n            'p50_multi',\n            mount=p50_multi_mount_if_applicable,\n            tip_racks=[tips50m]\n        )\n        num_cols = math.ceil(number_of_samples_to_process/8)\n        samples_multi = rxn_plate.rows()[0][:num_cols]\n\n        # transfer mm to plate columns\n        for i in range(num_cols):\n            for j, well in enumerate(mm_plate.columns()[i//6]):\n                well_ind = i*8+j\n                mm_ind = well_ind//48\n                if not p50.hw_pipette['has_tip']:\n                    p50.pick_up_tip()\n                p50.transfer(21, mm[mm_ind], well, new_tip='never')\n                p50.blow_out()\n        p50.drop_tip()\n\n        # distribute mm to sample columns\n        for dest in samples_multi:\n            source = mm_plate.rows()[0][i//6]\n            m50.pick_up_tip()\n            m50.transfer(20, source, dest, new_tip='never')\n            m50.mix(10, 20, dest)\n            m50.blow_out(dest.top())\n            m50.drop_tip()\n\n    ctx.comment('Seal the plate and thermocycle running the TAG program.')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples to prcoess",
            "name": "number_of_samples_to_process",
            "type": "int"
        },
        {
            "label": "P50 single-channel mount",
            "name": "p50_single_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "using P50 multi-channel pipette",
            "name": "using_p50_multi",
            "options": [
                {
                    "label": "no",
                    "value": "no"
                },
                {
                    "label": "yes",
                    "value": "yes"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P50 multi-channel mount (if applicable)",
            "name": "p50_multi_mount_if_applicable",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p50_single"
        }
    ],
    "labware": [
        {
            "name": "tagmentation reaction plate on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "reagent tuberack on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.0",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Nextera DNA Flex NGS Library Prep: Tagment DNA",
        "source": "Custom Protocol Request"
    },
    "modules": []
}