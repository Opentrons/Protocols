{
    "content": "\"\"\"User Protocol.\"\"\"\nfrom opentrons import protocol_api\n\nmetadata = {'protocolName': 'Automated RoboZooMS Protocol',\n            'author': 'Daniel Marfiewicz-Dickinson',\n            'apiLevel': '2.10'}\n\n\n# string of asterisks show a pause step that is hidden for testing purposes.\n\ndef run(protocol: protocol_api.ProtocolContext):\n    \"\"\"User Protocol.\"\"\"\n    [sample_size,\n     acid_volume,\n     na_oh_volume,\n     am_bic_volume,\n     transfer_volume,\n     trypsin_volume,\n     quench_volume,\n     acid_demin_yn,\n     na_oh_wash_yn,\n     one_rack_yn] = get_values(  # noqa: F821\n                               'sample_size',\n                               'acid_volume',\n                               'na_oh_volume',\n                               'am_bic_volume',\n                               'transfer_volume',\n                               'trypsin_volume',\n                               'quench_volume',\n                               'acid_demin_yn',\n                               'na_oh_wash_yn',\n                               'one_rack_yn')\n\n    # initialize script logic\n    (one_rack,\n     acid_demin,\n     na_oh_wash_logic) = parse_logic(acid_demin_yn,\n                                     na_oh_wash_yn,\n                                     one_rack_yn)\n\n    # initialize deck positions of different labware\n    ziptip_rack_location = 1\n    wellplate_location = 2\n    tiprack_2_location = 3\n    ext_eppendorf_location = 5\n    tiprack_1_location = 6\n    se_eppendorf_location = 8\n    falcon_tubes_location = 9\n    waste_reservoir_location = 11\n\n    # initialize labware used in protocol\n    (falcon_tubes,\n     tiprack_1,\n     tiprack_2,\n     ziptip_rack,\n     ziptip_wellplate,\n     tube_rack,\n     ext_tube_rack,\n     waste_reservoir) = load_deck(protocol,\n                                  se_eppendorf_location,\n                                  ext_eppendorf_location,\n                                  falcon_tubes_location,\n                                  tiprack_1_location,\n                                  tiprack_2_location,\n                                  ziptip_rack_location,\n                                  waste_reservoir_location,\n                                  wellplate_location)\n\n    # initialize reagent placement in falcon tubes\n    HCl = falcon_tubes.wells()[0]\n    conditioning_solution = falcon_tubes.wells()[1]\n    NaOH = falcon_tubes.wells()[2]\n    washing_solution = falcon_tubes.wells()[3]\n    AmBic = falcon_tubes.wells()[4]\n    trypsin = falcon_tubes.wells()[5]\n\n    # initialize pipettes used in protocol\n    p300, p1000 = load_pipettes(protocol, tiprack_1, tiprack_2, ziptip_rack)\n    p300.flow_rate.aspirate, p300.flow_rate.dispense = 10, 10\n\n    # initialise a list of wells that are being used\n    (wells_in_use,\n     ext_wells_in_use,\n     conditioning_wells,\n     washing_wells,\n     eluting_wells) = initialize_wells(ziptip_wellplate, sample_size,\n                                       tube_rack, ext_tube_rack, one_rack)\n\n    # ~~~~~~~~~~~~~~~~~~~Acid Demineralisation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    if acid_demin:  # if acid_demin true do:\n        # Add acid for demineralization step\n        acid_step(p1000,\n                  acid_volume,\n                  HCl,\n                  wells_in_use)\n\n        protocol.pause(\"Manually centrifuge before next step.\")\n        # Technician would manually centrifuge and press \"continue\"\n\n    # ~~~~~~~~~~~~~~~~~~~NaOH Wash~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    if na_oh_wash_logic:\n        # Remove acid, add NaOH, remove NaOH to remove humic acids\n        na_oh_wash(protocol,\n                   p1000,\n                   acid_volume,\n                   wells_in_use,\n                   waste_reservoir,\n                   na_oh_volume,\n                   NaOH)\n\n    # ~~~~~~~~~~~~~~~~~~~Gelatinisation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    # distribute AmBic into eppendorfs\n    # incubate and transfer to second eppendorf rack for digestion\n    gelatinize(protocol,\n               p1000,\n               am_bic_volume,\n               AmBic,\n               wells_in_use,\n               transfer_volume,\n               sample_size,\n               ext_wells_in_use)\n\n    # ~~~~~~~~~~~~~~~~~~~Trypsin digestion~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    # distribute diluted trypsin into samples\n    # incubate and then quench the digestion\n    digestion(protocol,\n              p1000,\n              trypsin_volume,\n              trypsin,\n              ext_wells_in_use,\n              quench_volume,\n              washing_solution)\n\n    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Zip-tipping~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    # isolate the peptide using filter-tip pipettes and elute\n    # ready for MALDI plate spotting\n    zip_tip(p1000,\n            conditioning_solution,\n            conditioning_wells,\n            sample_size,\n            washing_solution,\n            washing_wells,\n            p300,\n            waste_reservoir,\n            ext_wells_in_use,\n            eluting_wells)\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Protocol End~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Initalisation Functions~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\ndef load_pipettes(protocol, tiprack_1, tiprack_2, ziptip_rack):\n    \"\"\"User Protocol.\"\"\"\n    p1000 = protocol.load_instrument('p1000_single',\n                                     'right',\n                                     tip_racks=[tiprack_1, tiprack_2])\n    p300 = protocol.load_instrument('p300_single',\n                                    'left',\n                                    tip_racks=[ziptip_rack])\n    return p300, p1000\n\n\ndef load_deck(protocol,\n              se_eppendorf_location,\n              ext_eppendorf_location,\n              falcon_tubes_location,\n              tiprack_1_location,\n              tiprack_2_location,\n              ziptip_rack_location,\n              waste_reservoir_location,\n              wellplate_location):\n    \"\"\"User Protocol.\"\"\"\n    # list of string references to imported labware for easy changing\n    eppendorf_rack_name = 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap'  # noqa: E501\n    falcon_tuberack_name = 'opentrons_6_tuberack_falcon_50ml_conical'\n    tiprack_1000uL_name = 'opentrons_96_tiprack_1000ul'\n    tiprack_300ul_name = 'opentrons_96_tiprack_300ul'\n    waste_reservoir_name = 'nest_12_reservoir_15ml'\n    wellplate_name = 'corning_96_wellplate_360ul_flat'\n\n    tube_rack = protocol.load_labware(\n                                      eppendorf_rack_name,\n                                      se_eppendorf_location\n                                     )\n\n    ext_tube_rack = protocol.load_labware(\n                                          eppendorf_rack_name,\n                                          ext_eppendorf_location\n                                         )\n\n    # defaults: 0=HCl, 1=conditioning, 2=NaOH, 3=washing 4=AmBic, 5=trypsin.\n    falcon_tubes = protocol.load_labware(\n                                         falcon_tuberack_name,\n                                         falcon_tubes_location\n                                        )\n\n    tiprack_1 = protocol.load_labware(\n                                      tiprack_1000uL_name,\n                                      tiprack_1_location\n                                     )\n    tiprack_2 = protocol.load_labware(\n                                      tiprack_1000uL_name,\n                                      tiprack_2_location\n                                     )\n\n    ziptip_rack = protocol.load_labware(\n                                        tiprack_300ul_name,\n                                        ziptip_rack_location\n                                       )\n\n    waste_reservoir = protocol.load_labware(\n                                            waste_reservoir_name,\n                                            waste_reservoir_location\n                                           )\n\n    ziptip_wellplate = protocol.load_labware(\n                                             wellplate_name,\n                                             wellplate_location\n                                            )\n    return (falcon_tubes,\n            tiprack_1,\n            tiprack_2,\n            ziptip_rack,\n            ziptip_wellplate,\n            tube_rack,\n            ext_tube_rack,\n            waste_reservoir)\n\n\ndef parse_logic(acid_demin_yn, na_oh_wash_yn, one_rack_yn):\n    \"\"\"User Protocol.\"\"\"\n    if acid_demin_yn == 'yes':\n        acid_demin = True\n    else:\n        acid_demin = False\n\n    if na_oh_wash_yn == 'yes':\n        na_oh_wash_logic = True\n    else:\n        na_oh_wash_logic = False\n\n    if one_rack_yn == 'yes':\n        one_rack = True\n    else:\n        one_rack = False\n    return one_rack, acid_demin, na_oh_wash_logic\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Protocol Methods~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\ndef initialize_wells(ziptip_wellplate,\n                     sample_size,\n                     tube_rack,\n                     ext_tube_rack,\n                     one_rack):\n    \"\"\"User Protocol.\"\"\"\n    wells_in_use = []\n    ext_wells_in_use = []\n\n    # initialise a list of wells that are being used in rows left to right,\n    #  assuming that there is only one rack available for testing\n    if one_rack:\n        # create a list of well locations from rows A and B for SE eppendorfs\n        print(\"Only using one rack\")\n        se_wells = [\n                    well for well in (\n                                      tube_rack.rows_by_name()['A']\n                                      +\n                                      tube_rack.rows_by_name()['B']\n                                      )\n                    ]\n        # from the above available list, create a list of only used wells\n        wells_in_use = se_wells[:sample_size]\n\n        ext_wells = [\n                     well for well in (\n                                       tube_rack.rows_by_name()['C']\n                                       +\n                                       tube_rack.rows_by_name()['D']\n                                       )\n                    ]\n        ext_wells_in_use = ext_wells[:sample_size]\n\n    if not one_rack:\n        print(\"Using two racks\")\n        # generate a list of wells that are being used based\n        # on the amount of samples if two racks are available\n        # now going by row, left to right (more intuitive)\n        # this allows the use of the \"distribute\" function below\n        # to speed up the transfer!\n        se_wells = [\n                    wells for wells in (\n                                        tube_rack.rows_by_name()['A']\n                                        +\n                                        tube_rack.rows_by_name()['B']\n                                        +\n                                        tube_rack.rows_by_name()['C']\n                                        +\n                                        tube_rack.rows_by_name()['D']\n                                        )\n                    ]\n        wells_in_use = se_wells[:sample_size]\n\n        ext_wells = [\n                     wells for wells in (\n                                         ext_tube_rack.rows_by_name()['A']\n                                         +\n                                         ext_tube_rack.rows_by_name()['B']\n                                         +\n                                         ext_tube_rack.rows_by_name()['C']\n                                         +\n                                         ext_tube_rack.rows_by_name()['D']\n                                         )\n                    ]\n        ext_wells_in_use = ext_wells[:sample_size]\n\n    # c_wells = conditioning wells\n    c_wells_A = [well for well in (ziptip_wellplate.rows_by_name()['A'])]\n    c_wells_F = [well for well in (ziptip_wellplate.rows_by_name()['F'])]\n\n    conditioning_wells = c_wells_A + c_wells_F\n\n    # w_wells = washing wells\n    w_wells_B = [wells for wells in (ziptip_wellplate.rows_by_name()['B'])]\n    w_wells_G = [wells for wells in (ziptip_wellplate.rows_by_name()['G'])]\n    washing_wells = w_wells_B + w_wells_G\n\n    # e_wells = eluting wells\n    e_wells_C = [wells for wells in (ziptip_wellplate.rows_by_name()['C'])]\n    e_wells_H = [wells for wells in (ziptip_wellplate.rows_by_name()['H'])]\n    eluting_wells = e_wells_C + e_wells_H\n\n    return (wells_in_use,\n            ext_wells_in_use,\n            conditioning_wells,\n            washing_wells,\n            eluting_wells)\n\n\ndef reset_pipette_parameters(pipette):\n    \"\"\"User Protocol.\"\"\"\n    # custom method to make sure no settings carry over accidentally\n    # can be called at the end of every preparative step\n    pipette.well_bottom_clearance.dispense = 1\n    pipette.well_bottom_clearance.aspirate = 1\n    pipette.flow_rate.aspirate = 150\n    pipette.flow_rate.dispense = 300\n\n\ndef acid_step(pipette, acid_volume, HCl, wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    # ~~~~~~~~~~~~~~~~~~~~~~~acidification step~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    # due to dispensing clearance don't need tip changing,\n    # due to not being a quantitative step exact vol of acid is\n    # irrelevant so don't need to waste chemicals (disposal vol = 0)!\n\n    # parameters for the dispensing step, can stay as hidden parameters.\n    # set lots of clearance to avoid pipette touching the sample,\n    # less waste and contamination.\n    pipette.well_bottom_clearance.dispense = 20\n\n    # just drawing up some acid so can afford to be quicker with it.\n    pipette.flow_rate.aspirate = 1000\n\n    pipette.pick_up_tip()\n    # Add acid for demineralization step\n    pipette.distribute(acid_volume,\n                       HCl,\n                       wells_in_use,\n                       new_tip='never',\n                       disposal_volume=0)\n    pipette.drop_tip()\n\n    reset_pipette_parameters(pipette)\n\n\ndef na_oh_wash(protocol,\n               pipette,\n               acid_volume,\n               wells_in_use,\n               waste_reservoir,\n               na_oh_volume,\n               NaOH):\n    \"\"\"User Protocol.\"\"\"\n    # remove acid from the samples to prepare for NaOH wash\n    remove_acid(pipette, acid_volume, wells_in_use, waste_reservoir)\n\n    # add NaOH to the empty eppendorf tubes, vortex 1 min then centrifuge 1 min\n    dispense_naoh(pipette, na_oh_volume, NaOH, wells_in_use)\n    protocol.pause(\"Manually vortex (1 min) and centrifuge (1 min) before next step.\")  # noqa E501\n\n    # remove NaOH wash into AqWaste\n    remove_naoh(pipette, na_oh_volume, wells_in_use, waste_reservoir)\n\n    reset_pipette_parameters(pipette)\n\n\ndef remove_naoh(pipette, na_oh_volume, wells_in_use, waste_reservoir):\n    \"\"\"User Protocol.\"\"\"\n    # remove NaOH wash into AqWast\n    pipette.transfer(na_oh_volume,\n                     wells_in_use,\n                     waste_reservoir.wells()[0],\n                     new_tip='always')\n\n\ndef dispense_naoh(pipette, na_oh_volume, NaOH, wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    # dispense basic wash to samples\n    pipette.pick_up_tip()\n    pipette.well_bottom_clearance.dispense = 20\n    pipette.distribute(na_oh_volume,\n                       NaOH,\n                       wells_in_use,\n                       new_tip='never')\n    pipette.drop_tip()\n\n    reset_pipette_parameters(pipette)\n\n\ndef remove_acid(pipette, acid_volume, wells_in_use, waste_reservoir):\n    \"\"\"User Protocol.\"\"\"\n    # to make sure you don't hit the samples, in mm\n    pipette.well_bottom_clearance.aspirate = 3\n\n    # remove NaOH wash into AqWaste\n    pipette.transfer(acid_volume,\n                     wells_in_use,\n                     waste_reservoir.wells()[0],\n                     new_tip='always')\n\n    # to make sure you don't hit the samples, in mm\n    pipette.well_bottom_clearance.dispense = 20\n\n\ndef gelatinize(protocol,\n               pipette,\n               am_bic_volume,\n               AmBic,\n               wells_in_use,\n               transfer_volume,\n               sample_size,\n               ext_wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    distribute_am_bic(pipette, am_bic_volume, AmBic, wells_in_use)\n\n    protocol.pause(\"1 hr incubation period @ 65degrees C, followed by centrifuge for 1 min.\")  # noqa E501\n\n    transfer_am_bic(pipette,\n                    sample_size,\n                    transfer_volume,\n                    wells_in_use,\n                    ext_wells_in_use)\n\n\ndef transfer_am_bic(pipette,\n                    sample_size,\n                    transfer_volume,\n                    wells_in_use,\n                    ext_wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    # transfer ambic extract\n    # into a seperate eppendorf tube for trypsin digestion\n\n    # some clearance to avoid collisions\n    pipette.well_bottom_clearance.aspirate = 3\n    for i in range(sample_size):\n        pipette.transfer(transfer_volume,\n                         wells_in_use[i],\n                         ext_wells_in_use[i],\n                         new_tip='always')\n\n    reset_pipette_parameters(pipette)\n\n\ndef distribute_am_bic(pipette, am_bic_volume, AmBic, wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    # distribute Ammonium Bicarbonate to the samples\n    pipette.well_bottom_clearance.dispense = 20\n    pipette.flow_rate.aspirate = 1000\n\n    pipette.distribute(am_bic_volume,\n                       AmBic,\n                       wells_in_use,\n                       disposal_volume=0)\n\n    reset_pipette_parameters(pipette)\n\n\ndef digestion(protocol,\n              pipette,\n              trypsin_volume,\n              trypsin,\n              ext_wells_in_use,\n              quench_volume,\n              washing_solution):\n    \"\"\"User Protocol.\"\"\"\n    # adding trypsin to the EXT samples\n    distribute_trypsin(pipette, trypsin_volume, trypsin, ext_wells_in_use)\n    protocol.pause(\"Incubate overnight @37deg C\")\n\n    # quench trypsin digestion with a greater amount of diluted TFA\n    # probably a good thing to test in lab\n    quench_trypsin(pipette, quench_volume, washing_solution, ext_wells_in_use)\n\n\ndef quench_trypsin(pipette, quench_volume, washing_solution, ext_wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    pipette.transfer(quench_volume,\n                     washing_solution,\n                     ext_wells_in_use,\n                     mix_after=(5, 200),  # instead of vortex, mix quickly\n                     disposal_volume=0,\n                     new_tip='always')\n\n\ndef distribute_trypsin(pipette, trypsin_volume, trypsin, ext_wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    pipette.transfer(trypsin_volume,\n                     trypsin,\n                     ext_wells_in_use,\n                     new_tip='always',  # avoid contamination\n                     mix_after=(5, 200))  # mix the added trypsin\n\n    reset_pipette_parameters(pipette)\n\n\ndef zip_tip(p1000,\n            conditioning_solution,\n            conditioning_wells,\n            sample_size,\n            washing_solution,\n            washing_wells,\n            p300,\n            waste_reservoir,\n            ext_wells_in_use,\n            eluting_wells):\n    \"\"\"User Protocol.\"\"\"\n    # prepare the wellplate with all of the appropriate wells\n    prepare_wellplates(p1000,\n                       conditioning_solution,\n                       conditioning_wells,\n                       sample_size,\n                       washing_solution,\n                       washing_wells,\n                       p300)\n\n    # do all of these steps per sample being analysed, with the same pipette\n    for i in range(sample_size):\n\n        isolate_peptides(p300,\n                         conditioning_wells,\n                         i,\n                         washing_wells,\n                         waste_reservoir,\n                         ext_wells_in_use)\n\n        # due to flat bottom well need low clearance\n        # so that air is not drawn accidentally\n        p300.well_bottom_clearance.dispense = 1\n\n        # elute sample from filter into well (draw up conditioning solution\n        # dispense into eluting well and mix 10 times)\n        p300.transfer(100,\n                      conditioning_wells[i],\n                      eluting_wells[i],\n                      new_tip='never',\n                      mix_after=(10, 50))\n\n        p300.drop_tip()\n\n\ndef isolate_peptides(p300,\n                     conditioning_wells,\n                     i,\n                     washing_wells,\n                     waste_reservoir,\n                     ext_wells_in_use):\n    \"\"\"User Protocol.\"\"\"\n    p300.pick_up_tip()\n\n    # Condition the zip tip with 100 ul conditioning solution twice\n    p300.mix(2, 100, conditioning_wells[i])\n\n    # make sure that pipette tip doesn't dip into waste!\n    p300.well_bottom_clearance.dispense = 20\n\n    # wash the zip tip with 50 ul of washing solution twice\n    for x in range(2):\n        p300.transfer(50,\n                      washing_wells[i],\n                      waste_reservoir.wells()[0],\n                      new_tip='never')\n\n    # draw up sample 10 times with 100 ul to isolate peptide in the filter tip\n    p300.mix(10, 100, ext_wells_in_use[i])\n\n    # wash the zip tip with 100 ul of washing solution twice again\n    for x in range(2):\n        p300.transfer(50,\n                      washing_wells[i],\n                      waste_reservoir.wells()[0],\n                      new_tip='never')\n\n\ndef prepare_wellplates(p1000,\n                       conditioning_solution,\n                       conditioning_wells,\n                       sample_size,\n                       washing_solution,\n                       washing_wells,\n                       p300):\n    \"\"\"User Protocol.\"\"\"\n    # Conditioning solution added to well plate\n    p1000.distribute(250,\n                     conditioning_solution,\n                     conditioning_wells[:sample_size],\n                     disposal_volume=0)\n    # washing solution added to well plate\n    p1000.distribute(350,\n                     washing_solution,\n                     washing_wells[:sample_size],\n                     disposal_volume=0)\n    # make sure that pipette tip doesn't dip into waste!\n    p300.well_bottom_clearance.dispense = 20\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 2,
            "label": "Sample size",
            "name": "sample_size",
            "type": "int"
        },
        {
            "default": 250,
            "label": "Acid volume",
            "name": "acid_volume",
            "type": "int"
        },
        {
            "default": 250,
            "label": "NaOH volume",
            "name": "na_oh_volume",
            "type": "int"
        },
        {
            "default": 100,
            "label": "AmBic volume",
            "name": "am_bic_volume",
            "type": "int"
        },
        {
            "default": 50,
            "label": "Transfer volume",
            "name": "transfer_volume",
            "type": "int"
        },
        {
            "default": 1,
            "label": "Trypsin volume",
            "name": "trypsin_volume",
            "type": "int"
        },
        {
            "default": 50,
            "label": "Quench volume",
            "name": "quench_volume",
            "type": "int"
        },
        {
            "label": "Acid demineralisation",
            "name": "acid_demin_yn",
            "options": [
                {
                    "label": "Yes",
                    "value": "yes"
                },
                {
                    "label": "No",
                    "value": "no"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Sodium hydroxide wash",
            "name": "na_oh_wash_yn",
            "options": [
                {
                    "label": "Yes",
                    "value": "yes"
                },
                {
                    "label": "No",
                    "value": "no"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "One Eppendorf rack",
            "name": "one_rack_yn",
            "options": [
                {
                    "label": "Yes",
                    "value": "yes"
                },
                {
                    "label": "No",
                    "value": "no"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single"
        },
        {
            "mount": "right",
            "name": "p1000_single"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Corning 96 Well Plate 360 \u00b5L Flat on 2",
            "share": false,
            "slot": "2",
            "type": "corning_96_wellplate_360ul_flat"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 6 Tube Rack with Falcon 50 mL Conical on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_6_tuberack_falcon_50ml_conical"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 11",
            "share": false,
            "slot": "11",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Daniel Marfiewicz-Dickinson",
        "protocolName": "Automated RoboZooMS Protocol"
    },
    "modules": []
}