{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'ELISA: Dilution',\n    'author': 'Alise <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.14'\n}\n\n\ndef run(ctx):\n    [starting_buffer_volume, number_of_standards,\n     concentration_csv] = get_values(  # noqa: F821\n     'starting_buffer_volume', 'number_of_standards',\n     'concentration_csv')\n\n    # labware setup\n    tuberack_1 = ctx.load_labware(\n        'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical', '1')\n    tuberack_4 = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap', '4')\n    deep_plates = [ctx.load_labware('nest_96_wellplate_2ml_deep', slot)\n                   for slot in ['5', '6']]\n\n    tiprack_1000 = ctx.load_labware('opentrons_96_tiprack_1000ul', '2')\n    tipracks_300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot)\n                    for slot in ['3', '7']]\n\n    # instrument setup\n    p1000 = ctx.load_instrument(\n        'p1000_single',\n        mount='left',\n        tip_racks=[tiprack_1000])\n    p300 = ctx.load_instrument(\n        'p300_single',\n        mount='right',\n        tip_racks=tipracks_300)\n\n    # reagent setup\n    tubes = [well for row in tuberack_4.rows() for well in row]\n    samples = tubes[2 + number_of_standards:]\n    dilution_buffer = tuberack_1.wells_by_name()['A3']\n\n    dil_dests = [row for deep_plate in deep_plates\n                 for row in deep_plate.rows()]\n\n    conc_lists = [[int(cell) for cell in line.split(',') if cell]\n                  for line in concentration_csv.splitlines() if line]\n\n    concs = [5, 10, 25, 50, 100, 500, 1000, 5000, 10000, 25000, 50000, 100000]\n\n    diluent_vols = [320, 450, 180, 320, 450, 320, 450, 320, 450, 180, 320, 450]\n\n    sample_vols = [80, 50, 120, 80, 50, 80, 50, 80, 50, 120, 80, 50]\n\n    concs_init = [1, 1, 10, 10, 10, 100, 100, 1000, 1000, 1000, 10000, 10000]\n    dil_formulae = {\n        conc: {'diluent_vol': diluent_vol,\n               'sample_vol': sample_vol,\n               'conc_init': conc_init,\n               'col_index': index}\n        for conc, diluent_vol, sample_vol, conc_init, index in zip(\n            concs, diluent_vols, sample_vols, concs_init, range(12))\n        }\n\n    buffer_height = 20 + \\\n        (50 - starting_buffer_volume) * 1000 / (math.pi * (13.5 ** 2))\n\n    dilution_concs = []\n    for sample_index, concentrations in enumerate(conc_lists):\n        new_concs = []\n        factors = [10, 100, 1000, 10000, 100000]\n        conc_inspect = max(concentrations)\n\n        for factor_index, factor in enumerate(factors):\n            if (conc_inspect // factor) > 0 and (conc_inspect // factor) < 10:\n                [new_concs.append(factors[:factor_index+1])]\n                [concentrations.pop(concentrations.index(num))\n                 for num in factors[:factor_index+1] if num in concentrations]\n                [new_concs.append([conc_inspect])\n                 if conc_inspect not in new_concs[0] else '']\n                [concentrations.pop(concentrations.index(conc_inspect))\n                 if conc_inspect in concentrations else '']\n        [new_concs.append([conc]) for conc in concentrations if concentrations]\n        dilution_concs.append(new_concs)\n\n    # transfer dilution buffer\n\n    for sample_index, (row, concs) in enumerate(\n            zip(dil_dests, dilution_concs)):\n        volumes = [dil_formulae[conc]['diluent_vol']\n                   for c_list in concs for conc in c_list]\n        dests = [row[dil_formulae[conc]['col_index']]\n                 for c_list in concs for conc in c_list]\n        for volume, dest in zip(volumes, dests):\n            p1000.pick_up_tip()\n            buffer_height += volume / (math.pi * (13.5 ** 2))\n            if buffer_height > 75:\n                source = dilution_buffer.bottom(3)\n            else:\n                source = dilution_buffer.top(-buffer_height)\n            p1000.transfer(\n                volume,\n                source,\n                dest.top(-20),\n                new_tip='never')\n            p1000.blow_out(dest.top())\n            p1000.drop_tip()\n\n    # transfer samples\n    for sample_index, (row, concs) in enumerate(\n            zip(dil_dests, dilution_concs)):\n        for c_list in concs:\n            volumes = [dil_formulae[conc]['sample_vol'] for conc in c_list]\n            sources = []\n            for conc in c_list:\n                if dil_formulae[conc]['conc_init'] == 1:\n                    sources.append(samples[sample_index])\n                else:\n                    source_conc = dil_formulae[conc]['conc_init']\n                    sources.append(\n                        row[dil_formulae[source_conc]['col_index']])\n            dests = [row[dil_formulae[conc]['col_index']]\n                     for conc in c_list]\n            p300.pick_up_tip()\n            for volume, source, dest in zip(volumes, sources, dests):\n                p300.transfer(volume, source, dest.bottom(2), new_tip='never')\n                p300.mix(3, 200, dest.bottom(2))\n            p300.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 50.0,
            "label": "starting buffer volume, in ul",
            "name": "starting_buffer_volume",
            "type": "float"
        },
        {
            "default": 6,
            "label": "number of standards",
            "name": "number_of_standards",
            "type": "int"
        },
        {
            "default": "50,500,5000\n10,10000,100000\n100,,\n5,,",
            "label": "concentration .csv file",
            "name": "concentration_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p1000_single"
        },
        {
            "mount": "right",
            "name": "p300_single"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 10 Tube Rack with Falcon 4x50 mL, 6x15 mL Conical on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 2 mL Safe-Lock Snapcap on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.14",
        "author": "Alise <protocols@opentrons.com>",
        "protocolName": "ELISA: Dilution",
        "source": "Custom Protocol Request"
    },
    "modules": []
}