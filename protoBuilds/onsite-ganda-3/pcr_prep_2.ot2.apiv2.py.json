{
    "content": "\"\"\"OPENTRONS.\"\"\"\nimport math\nimport threading\nfrom time import sleep\n\nmetadata = {\n    'protocolName': 'rhAmpSeq Library Prep Part 3 - PCR Prep 3',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\nclass CancellationToken:\n    \"\"\"flash_setup.\"\"\"\n\n    def __init__(self):\n        \"\"\"init.\"\"\"\n        self.is_continued = False\n\n    def set_true(self):\n        \"\"\"set_true.\"\"\"\n        self.is_continued = True\n\n    def set_false(self):\n        \"\"\"set_false.\"\"\"\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    \"\"\"Turn on blinking.\"\"\"\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    \"\"\"Create thread.\"\"\"\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\ndef run(ctx):\n    \"\"\"PROTOCOL.\"\"\"\n    [\n     num_samples, m20_mount, flash\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n        \"num_samples\", \"m20_mount\", \"flash\")\n\n    # define all custom variables above here with descriptions:\n    cancellationToken = CancellationToken()\n    num_cols = math.ceil(num_samples/8)\n    m20_speed_mod = 4\n    # airgap_library = 5\n    # load modules\n    mag_module = ctx.load_module('magnetic module gen2', '1')\n\n    # load labware\n    sample_plate = mag_module.load_labware('nest_96_wellplate'\n                                           '_100ul_pcr_full_skirt')\n    reagent_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '2')\n    barcode_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '4')\n    # load tipracks\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul',\n                                  str(slot))\n                 for slot in [3, 5, 6][:math.ceil(num_samples/32)]]\n\n    # load instrument\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount, tip_racks=tiprack20)\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n\n    # helper functions\n\n    # reagents\n    library_mix = reagent_plate.rows()[0][0]\n    # pcr_forward = reagent_plate.rows()[0][1]\n    # pcr_reverse = reagent_plate.rows()[0][2]\n    pcr_barcode = barcode_plate.rows()[0][:num_cols]\n    # plate, tube rack maps\n    sample_dest = sample_plate.rows()[0][:num_cols]\n    # protocol\n\n    # add library mix, 5 uL\n    for dest in sample_dest:\n        m20.flow_rate.aspirate /= m20_speed_mod\n        m20.flow_rate.dispense /= m20_speed_mod\n        m20.pick_up_tip()\n        m20.aspirate(5, library_mix)\n        m20.move_to(library_mix.top(-2))\n        ctx.delay(seconds=2)\n        # m20.touch_tip(v_offset=-2)\n        # m20.move_to(library_mix.top(-2))\n        # m20.aspirate(airgap_library, library_mix.top())\n        # m20.dispense(airgap_library, dest.top())\n        m20.dispense(5, dest)\n        m20.mix(1, 5, dest)\n        ctx.max_speeds['A'] = 100\n        ctx.max_speeds['Z'] = 100\n        m20.drop_tip()\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n        m20.flow_rate.aspirate *= m20_speed_mod\n        m20.flow_rate.dispense *= m20_speed_mod\n    # add barcode primers previously made from slot 4 plate\n    for s, d in zip(pcr_barcode, sample_dest):\n        m20.flow_rate.aspirate /= m20_speed_mod\n        m20.flow_rate.dispense /= m20_speed_mod\n        m20.pick_up_tip()\n        m20.aspirate(4, s)\n        m20.move_to(s.top(-2))\n        ctx.delay(seconds=2)\n        # m20.touch_tip(v_offset=-2)\n        # m20.move_to(reagent_source.top(-2))\n        # m20.aspirate(airgap_library, reagent_source.top())\n        # m20.dispense(airgap_library, dest.top())\n        m20.dispense(2, d)\n        m20.mix(1, 5, d)\n        ctx.max_speeds['A'] = 100\n        ctx.max_speeds['Z'] = 100\n        m20.drop_tip()\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n        m20.flow_rate.aspirate *= m20_speed_mod\n        m20.flow_rate.dispense *= m20_speed_mod\n\n    # add forward, reverse primers, 2 uL each\n    # for reagent_source in [pcr_forward, pcr_reverse]:\n        # for dest in sample_dest:\n        #     m20.flow_rate.aspirate /= m20_speed_mod\n        #     m20.flow_rate.dispense /= m20_speed_mod\n        #     m20.pick_up_tip()\n        #     m20.aspirate(2, reagent_source)\n        #     m20.move_to(reagent_source.top(-2))\n        #     ctx.delay(seconds=2)\n        #     # m20.touch_tip(v_offset=-2)\n        #     # m20.move_to(reagent_source.top(-2))\n        #     # m20.aspirate(airgap_library, reagent_source.top())\n        #     # m20.dispense(airgap_library, dest.top())\n        #     m20.dispense(2, dest)\n        #     m20.mix(1, 5, dest)\n        #     ctx.max_speeds['A'] = 100\n        #     ctx.max_speeds['Z'] = 100\n        #     m20.drop_tip()\n        #     del ctx.max_speeds['A']\n        #     del ctx.max_speeds['Z']\n        #     m20.flow_rate.aspirate *= m20_speed_mod\n        #     m20.flow_rate.dispense *= m20_speed_mod\n\n    if flash:\n        if not ctx._hw_manager.hardware.is_simulator:\n            cancellationToken.set_true()\n        thread = create_thread(ctx, cancellationToken)\n    m20.home()\n    ctx.pause('Protocol Complete.')\n    ctx.home()  # home before continuing with protocol\n    if flash:\n        cancellationToken.set_false()  # stop light flashing after home\n        thread.join()\n    ctx.pause()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of Samples (max 96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "P20 Multi GEN2 mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flash on Protocol Completion?",
            "name": "flash",
            "options": [
                {
                    "label": "Yes",
                    "value": "True"
                },
                {
                    "label": "No",
                    "value": "False"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "rhAmpSeq Library Prep Part 3 - PCR Prep 3",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 1 lw NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "magdeck"
        }
    ]
}