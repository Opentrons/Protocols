{"instruments": [{"mount": "left", "name": "p300_multi_gen2"}, {"mount": "right", "name": "p300_multi_gen2"}], "labware": [{"slot": "1", "type": "biorad_96_wellplate_200ul_pcr", "name": "DNA plate on 1", "share": false}, {"slot": "2", "type": "biorad_96_wellplate_200ul_pcr", "name": "Output plate on 2", "share": false}, {"slot": "3", "type": "usascientific_12_reservoir_22ml", "name": "reservoir on 3", "share": false}, {"slot": "5", "type": "opentrons_96_tiprack_300ul", "name": "Opentrons 96 Tip Rack 300 \u00b5L on 5", "share": false}, {"slot": "6", "type": "opentrons_96_tiprack_300ul", "name": "Opentrons 96 Tip Rack 300 \u00b5L on 6", "share": false}, {"slot": "7", "type": "opentrons_96_tiprack_300ul", "name": "Opentrons 96 Tip Rack 300 \u00b5L on 7", "share": false}, {"slot": "8", "type": "opentrons_96_tiprack_300ul", "name": "Opentrons 96 Tip Rack 300 \u00b5L on 8", "share": false}, {"slot": "12", "type": "opentrons_1_trash_1100ml_fixed", "name": "Opentrons Fixed Trash on 12", "share": false}], "fields": [{"type": "int", "label": "sample number", "name": "number_of_samples", "default": 96}, {"type": "dropDown", "label": "right pipette type", "name": "right_pipette", "options": [{"label": "GEN2 P300 Multi", "value": "p300_multi_gen2"}, {"label": "GEN2 P20 Multi", "value": "p20_multi_gen2"}, {"label": "GEN1 P1000 Multi", "value": "p1000_multi"}, {"label": "GEN1 P300 Multi", "value": "p300_multi"}, {"label": "GEN1 P50 Multi", "value": "p50_multi"}, {"label": "GEN1 P10 Multi", "value": "p10_multi"}, {"label": "none", "value": null}]}, {"type": "dropDown", "label": "left pipette type", "name": "left_pipette", "options": [{"label": "GEN2 P300 Multi", "value": "p300_multi_gen2"}, {"label": "GEN2 P20 Multi", "value": "p20_multi_gen2"}, {"label": "GEN1 P1000 Multi", "value": "p1000_multi"}, {"label": "GEN1 P300 Multi", "value": "p300_multi"}, {"label": "GEN1 P50 Multi", "value": "p50_multi"}, {"label": "GEN1 P10 Multi", "value": "p10_multi"}, {"label": "none", "value": null}]}, {"type": "float", "label": "mastermix volume (in ul)", "name": "mastermix_volume", "default": 18}, {"type": "float", "label": "DNA volume (in ul)", "name": "DNA_volume", "default": 2}], "modules": [], "metadata": {"protocolName": "PCR Prep", "author": "Opentrons <protocols@opentrons.com>", "source": "Protocol Library"}, "content": "import math\n\nmetadata = {\n    'protocolName': 'PCR Prep',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Protocol Library'\n    }\n\n\ndef run(protocol_context):\n    [number_of_samples, left_pipette, right_pipette, mastermix_volume,\n     DNA_volume] = get_values(  # noqa: F821\n        \"number_of_samples\", \"left_pipette\", 'right_pipette',\n        \"mastermix_volume\", \"DNA_volume\"\n     )\n\n    if not left_pipette and not right_pipette:\n        raise Exception('You have to select at least 1 pipette.')\n\n    pipette_l = None\n    pipette_r = None\n\n    for pip, mount, slots in zip(\n            [left_pipette, right_pipette],\n            ['left', 'right'],\n            [['5', '6'], ['7', '8']]):\n\n        if pip:\n            range = pip.split('_')[0][1:]\n            rack = 'opentrons_96_tiprack_' + range + 'ul'\n            tipracks = [\n                protocol_context.load_labware(rack, slot) for slot in slots]\n            if mount == 'left':\n                pipette_l = protocol_context.load_instrument(\n                    pip, mount, tip_racks=tipracks)\n            else:\n                pipette_r = protocol_context.load_instrument(\n                    pip, mount, tip_racks=tipracks)\n\n    # labware setup\n    dna_plate = protocol_context.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '1', 'DNA plate')\n    dest_plate = protocol_context.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '2', 'Output plate')\n    res12 = protocol_context.load_labware(\n        'usascientific_12_reservoir_22ml', '3', 'reservoir')\n\n    # determine which pipette has the smaller volume range\n    if pipette_l and pipette_r:\n        if left_pipette == right_pipette:\n            pip_s = pipette_l\n            pip_l = pipette_r\n        else:\n            if pipette_l.max_volume < pipette_r.max_volume:\n                pip_s, pip_l = pipette_l, pipette_r\n            else:\n                pip_s, pip_l = pipette_r, pipette_l\n    else:\n        pipette = pipette_l if pipette_l else pipette_r\n\n    # reagent setup\n    mastermix = res12.wells()[0]\n\n    col_num = math.ceil(number_of_samples/8)\n\n    # distribute mastermix\n    if pipette_l and pipette_r:\n        if mastermix_volume <= pip_s.max_volume:\n            pipette = pip_s\n        else:\n            pipette = pip_l\n    pipette.pick_up_tip()\n    for dest in dest_plate.rows()[0][:col_num]:\n        pipette.transfer(\n            mastermix_volume,\n            mastermix,\n            dest_plate.rows()[0][:col_num],\n            new_tip='never'\n        )\n        pipette.blow_out(mastermix.top())\n    pipette.drop_tip()\n\n    # transfer DNA\n    if pipette_l and pipette_r:\n        if DNA_volume <= pip_s.max_volume:\n            pipette = pip_s\n        else:\n            pipette = pip_l\n    for source, dest in zip(dna_plate.rows()[0][:col_num],\n                            dest_plate.rows()[0][:col_num]):\n        pipette.transfer(DNA_volume, source, dest)\n", "custom_labware_defs": []}