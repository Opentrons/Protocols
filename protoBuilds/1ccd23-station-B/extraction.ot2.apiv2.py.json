{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\nimport threading\nfrom time import sleep\n\nmetadata = {\n    'protocolName': 'COVID-19 Station B RNA Extraction',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.8'\n}\n\n\n# Definitions for deck light flashing\nclass CancellationToken:\n    def __init__(self):\n        self.is_continued = False\n\n    def set_true(self):\n        self.is_continued = True\n\n    def set_false(self):\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\n# Start protocol\ndef run(ctx):\n    # Setup for flashing lights notification to empty trash\n    cancellationToken = CancellationToken()\n\n    [num_samples, mag_height, magplate_offset, radial_offset, starting_vol,\n     binding_buffer_vol, wash1_vol, wash2_vol, wash3_vol, elution_vol,\n     mix_reps, settling_time, park_tips, tip_track,\n     flash] = get_values(  # noqa: F821\n        'num_samples', 'mag_height', 'magplate_offset', 'radial_offset',\n        'starting_vol', 'binding_buffer_vol', 'wash1_vol', 'wash2_vol',\n        'wash3_vol', 'elution_vol', 'mix_reps', 'settling_time', 'park_tips',\n        'tip_track', 'flash')\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep',\n                                    'deepwell plate')\n    tempdeck = ctx.load_module('Temperature Module Gen2', '1')\n    elutionplate = tempdeck.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul',\n                'elution plate')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '11',\n                             'Liquid Waste').wells()[0].top()\n    res2 = ctx.load_labware(\n        'nest_12_reservoir_15ml', '2', 'reagent reservoir 2')\n    res1 = ctx.load_labware(\n        'nest_12_reservoir_15ml', '5', 'reagent reservoir 1')\n    num_cols = math.ceil(num_samples/8)\n    tips300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['3', '6', '8', '9', '10']]\n    if park_tips:\n        parkingrack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '7', '200\u00b5l filtertiprack (parking)')\n        tips300.insert(0, parkingrack)\n        parking_spots = parkingrack.rows()[0][:num_cols]\n    else:\n        tips300.insert(0, ctx.load_labware('opentrons_96_tiprack_300ul', '7',\n                                           '200\u00b5l filtertiprack'))\n        parking_spots = [None for none in range(12)]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    binding_buffer = res1.wells()[2:6]\n    lysis_buffer = res1.wells()[0]\n    elution_solution = res1.wells()[-1]\n    wash1 = res2.wells()[:4]\n    wash2 = res2.wells()[4:8]\n    wash3 = res2.wells()[8:]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n    radius = mag_samples_m[0].geometry._width/2\n\n    magdeck.disengage()  # just in case\n    tempdeck.set_temperature(4)\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    tip_log = {'count': {}}\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                if 'tips300' in data:\n                    tip_log['count'][m300] = data['tips300']\n                else:\n                    tip_log['count'][m300] = 0\n        else:\n            tip_log['count'][m300] = 0\n    else:\n        tip_log['count'] = {m300: 0}\n\n    tip_log['tips'] = {\n        m300: [tip for rack in tips300 for tip in rack.rows()[0]]}\n    tip_log['max'] = {m300: len(tip_log['tips'][m300])}\n\n    def _pick_up(pip, loc=None):\n        nonlocal tip_log\n        if tip_log['count'][pip] == tip_log['max'][pip] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log['count'][pip] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log['tips'][pip][tip_log['count'][pip]])\n            tip_log['count'][pip] += 1\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n    drop_threshold = 120\n\n    def _drop(pip):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        drop_count += 8\n        if drop_count == drop_threshold:\n            # Setup for flashing lights notification to empty trash\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            m300.home()\n            ctx.pause('Please empty tips from waste before resuming.')\n\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n\n            drop_count = 0\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                if flash:\n                    if not ctx._hw_manager.hardware.is_simulator:\n                        cancellationToken.set_true()\n                    thread = create_thread(ctx, cancellationToken)\n                m300.home()\n                ctx.pause('Please empty liquid waste (slot 11) before \\\nresuming.')\n\n                ctx.home()  # home before continuing with protocol\n                if flash:\n                    # stop light flashing after home\n                    cancellationToken.set_false()\n                    thread.join()\n\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(magplate_offset).move(Point(\n                x=side*radius*radial_offset))\n            for _ in range(num_trans):\n                _waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, m.top())\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=20)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            _drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def bind(vol, park=True):\n        \"\"\"\n        `bind` will perform magnetic bead binding on each sample in the\n        deepwell plate. Each channel of binding beads will be mixed before\n        transfer, and the samples will be mixed with the binding beads after\n        the transfer. The magnetic deck activates after the addition to all\n        samples, and the supernatant is removed after bead bining.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n        latest_chan = -1\n        for i, (well, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            num_trans = math.ceil(vol/200)\n            vol_per_trans = vol/num_trans\n            asp_per_chan = 14500//(vol_per_trans*8)\n            for t in range(num_trans):\n                chan_ind = int((i*num_trans + t)//asp_per_chan)\n                source = binding_buffer[chan_ind]\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, source.top())\n                if chan_ind > latest_chan:  # mix if accessing new channel\n                    for _ in range(5):\n                        m300.aspirate(180, source.bottom(0.5))\n                        m300.dispense(180, source.bottom(5))\n                    latest_chan = chan_ind\n                m300.transfer(vol_per_trans, source, well.top(), air_gap=20,\n                              new_tip='never')\n                if t < num_trans - 1:\n                    m300.air_gap(20)\n            m300.mix(5, 200, well.bottom(magplate_offset))\n            m300.blow_out(well.top(-2))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        magdeck.engage(height=mag_height)\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        # remove initial supernatant\n        remove_supernatant(vol+starting_vol, park=park)\n\n    def wash(vol, source, mix_reps=15, park=True, resuspend=True):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(magplate_offset).move(Point(\n                x=side*radius*radial_offset))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                m300.mix(mix_reps, 150, loc)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage(height=mag_height)\n\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        remove_supernatant(vol, park=park)\n\n    def elute(vol, park=True):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(magplate_offset).move(Point(\n                x=side*radius*radial_offset))\n            m300.aspirate(vol, elution_solution)\n            m300.move_to(m.center())\n            m300.dispense(vol, loc)\n            m300.mix(mix_reps, 0.8*vol, loc)\n            m300.blow_out(m.bottom(5+magplate_offset))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        # agitate after resuspension\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(magplate_offset).move(Point(\n                x=side*radius*radial_offset))\n            m300.mix(10, 0.8*vol, loc)\n            m300.blow_out(m.bottom(5+magplate_offset))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        magdeck.engage(height=mag_height)\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(magplate_offset).move(Point(\n                x=side*radius*radial_offset))\n            m300.transfer(vol, loc, e.bottom(5), air_gap=20, new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(20)\n            m300.drop_tip()\n\n    \"\"\"\n    Here is where you can call the methods defined above to fit your specific\n    protocol. The normal sequence is:\n    \"\"\"\n    # transfer lysis buffer\n    for m in mag_samples_m:\n        _pick_up(m300)\n        m300.transfer(60, lysis_buffer, m.bottom(magplate_offset), air_gap=20,\n                      mix_after=(5, 100), new_tip='never')\n        _drop(m300)\n\n    bind(binding_buffer_vol, park=park_tips)\n    wash(wash1_vol, wash1, park=park_tips)\n    wash(wash2_vol, wash2, park=park_tips)\n    wash(wash3_vol, wash3, park=park_tips)\n    elute(elution_vol, park=park_tips)\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {'tips300': tip_log['count'][m300]}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples + controls (1-96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "default": 13.7,
            "label": "magnetic engage height (in mm)",
            "name": "mag_height",
            "type": "float"
        },
        {
            "default": 1.0,
            "label": "height offset from bottom of deepwell plate (in mm)",
            "name": "magplate_offset",
            "type": "int"
        },
        {
            "default": 0.8,
            "label": "lateral offset (as fraction of well radius)",
            "name": "radial_offset",
            "type": "int"
        },
        {
            "default": 220.0,
            "label": "intitial volume (sample + lysis buffer, in ul)",
            "name": "starting_vol",
            "type": "float"
        },
        {
            "default": 586.0,
            "label": "binding buffer volume (in ul)",
            "name": "binding_buffer_vol",
            "type": "float"
        },
        {
            "default": 490.0,
            "label": "wash 1 volume (in ul, up to 500ul)",
            "name": "wash1_vol",
            "type": "float"
        },
        {
            "default": 490.0,
            "label": "wash 2 volume (in ul, up to 500ul)",
            "name": "wash2_vol",
            "type": "float"
        },
        {
            "default": 500.0,
            "label": "wash 3 volume (in ul, up to 500ul)",
            "name": "wash3_vol",
            "type": "float"
        },
        {
            "default": 100.0,
            "label": "final elution volume (in ul)",
            "name": "elution_vol",
            "type": "float"
        },
        {
            "default": 10,
            "label": "mix repetitions for bead resuspension",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 2.0,
            "label": "bead settling time (in minutes)",
            "name": "settling_time",
            "type": "float"
        },
        {
            "label": "park tips",
            "name": "park_tips",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "flash robot on pause",
            "name": "flash",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "elution plate on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "reagent reservoir 2 on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "deepwell plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "reagent reservoir 1 on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack (parking) on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Liquid Waste on 11",
            "share": false,
            "slot": "11",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.8",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "COVID-19 Station B RNA Extraction"
    },
    "modules": []
}