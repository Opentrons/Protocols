{
    "content": "import csv\nfrom datetime import datetime\nfrom opentrons import protocol_api\n\nmetadata = {\n    'protocolName': 'Cherrypicking',\n    'author': 'Nick Diehl <ndiehl@opentrons.com>',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    now = datetime.now()  # current date and time\n    today = now.strftime('%Y%m%d')\n\n    [input_csv] = get_values(  # noqa: F821\n        'input_csv')\n\n    p20 = ctx.load_instrument('p20_single_gen2', 'left')\n\n    vol_pre_airgap = 2.0\n\n    # determine starting tip\n    if not ctx.is_simulating:\n        output_path = f'/data/{today}.csv'\n    else:\n        output_path = f'protocols/0df680/supplements/{today}.csv'\n\n    data = [\n        [val.strip() for val in line.split(',')]\n        for line in input_csv.splitlines()[1:]\n        if line.split(',')[0].strip()]\n\n    def parse_well(well_str):\n        return f'{well_str[0].upper()}{int(well_str[1:])}'\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds >= 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def pickup(pip):\n        try:\n            pip.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace the tips\")\n            pip.reset_tipracks()\n            pip.pick_up_tip()\n\n    lw_map_sources = {}\n    lw_map_dests = {}\n    output_data = []\n\n    # tipracks\n    used_slots = []\n    for line in data:\n        slots = [int(line[4]), int(line[8])]\n        for s in slots:\n            if s not in used_slots:\n                used_slots.append(s)\n\n    tipracks20 = [\n        ctx.load_labware('opentrons_96_tiprack_20ul', slot)\n        for slot in [str(s) for s in range(1, 12)]\n        if slot not in used_slots]\n\n    p20.tip_racks = tipracks20\n\n    # transfers\n    for line in data:\n        clone_id = line[1].upper()\n        source_plate_id = line[2].upper()\n        source_lw = line[3]\n        source_slot = line[4]\n        source_well = parse_well(line[5])\n        source_h = float(line[6])\n        dest_lw = line[7]\n        dest_slot = line[8]\n        dest_plate_id = line[9]\n        dest_well = parse_well(line[10])\n        vol = float(line[11])\n\n        # load labware if needed\n        if not ctx.loaded_labwares[int(source_slot)]:\n            ctx.load_labware(source_lw, source_slot)\n        if not ctx.loaded_labwares[int(dest_slot)]:\n            ctx.load_labware(dest_lw, dest_slot)\n\n        # check whether a deck refill is needed:\n        # reset map if anything doesn't match\n        if source_slot in lw_map_sources and lw_map_sources[\n                source_slot] != source_plate_id:\n            ctx.pause('Replace deck with next set of source plates before \\\nresuming.')\n            lw_map_sources = {}\n        if dest_slot in lw_map_dests and lw_map_dests[\n                dest_slot] != dest_plate_id:\n            ctx.pause('Replace deck with next set of dest plates before \\\nresuming.')\n            lw_map_dests = {}\n\n        # update map with new labware\n        lw_map_sources[source_slot] = source_plate_id\n        lw_map_dests[dest_slot] = dest_plate_id\n\n        # perform transfer\n        source = ctx.loaded_labwares[int(source_slot)].wells_by_name(\n            )[source_well]\n        dest = ctx.loaded_labwares[int(dest_slot)].wells_by_name(\n            )[dest_well]\n        pickup(p20)\n        if vol_pre_airgap > 0:\n            p20.aspirate(vol_pre_airgap, source.top())\n        p20.aspirate(vol, source.bottom(source_h))\n        slow_withdraw(p20, source)\n        p20.dispense(p20.current_volume, dest)\n        slow_withdraw(p20, dest)\n        p20.drop_tip()\n\n        # log data\n        transfer_data = {\n            'clone-id': clone_id,\n            'source-plate-id': source_plate_id,\n            'dest-plate-id': dest_plate_id\n        }\n        output_data.append(transfer_data)\n\n    # write output\n    with open(output_path, 'w') as output_file:\n        writer = csv.writer(output_file)\n        writer.writerow(['cloneID', 'source plate ID', 'destination plate ID'])\n        for t_data in output_data:\n            writer.writerow([t_data['clone-id'],\n                            t_data['source-plate-id'],\n                            t_data['dest-plate-id']])\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": ",clone ID,0ur plate ID,Source Labware,Source Slot,Source Well,Source Aspiration Height Above Bottom (in mm),Dest Labware,Dest Slot,Dest. Plate ID,Dest Well,Volume (in ul)\nn1,CL-1418591,1,biorad_96_wellplate_200ul_pcr,2,B06,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A01,15\nn2,CL-1418640,1,biorad_96_wellplate_200ul_pcr,2,D12,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A02,15\nn3,CL-1418621,1,biorad_96_wellplate_200ul_pcr,2,H09,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A03,15\nn4,CL-1418715,2,biorad_96_wellplate_200ul_pcr,3,H09,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A04,15\nn5,CL-1418738,3,biorad_96_wellplate_200ul_pcr,4,A01,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A05,15\nn6,CL-1418818,3,biorad_96_wellplate_200ul_pcr,4,A11,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A06,15\nn7,CL-1418744,3,biorad_96_wellplate_200ul_pcr,4,G01,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A07,15\nn8,CL-1418866,4,biorad_96_wellplate_200ul_pcr,5,C05,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A08,15\nn9,CL-1418976,5,biorad_96_wellplate_200ul_pcr,6,C07,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A09,15\nn10,CL-1418977,5,biorad_96_wellplate_200ul_pcr,6,F04,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A10,15\nn11,CL-1418932,5,biorad_96_wellplate_200ul_pcr,6,G01,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A11,15\nn12,CL-1418981,5,biorad_96_wellplate_200ul_pcr,6,H07,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,A12,15\nn13,CL-1418989,5,biorad_96_wellplate_200ul_pcr,6,H08,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B01,15\nn14,CL-1418990,7,biorad_96_wellplate_200ul_pcr,7,H05,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B02,15\nn15,CL-1418991,9,biorad_96_wellplate_200ul_pcr,8,D04,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B03,15\nn16,CL-1418992,9,biorad_96_wellplate_200ul_pcr,8,H07,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B04,15\nn17,CL-1418993,10,biorad_96_wellplate_200ul_pcr,9,G07,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B05,15\nn18,CL-1418994,12,biorad_96_wellplate_200ul_pcr,10,H02,1,biorad_96_wellplate_200ul_pcr,11,RAILPB03,B06,15",
            "label": "input .csv file",
            "name": "input_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Nick Diehl <ndiehl@opentrons.com>",
        "protocolName": "Cherrypicking"
    },
    "modules": []
}