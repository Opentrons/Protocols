{
    "content": "import json\nimport os\n\n# metadata\nmetadata = {\n    'protocolName': 'Logix Smart Nasopharyngeal Covid-19 Plating (Station A)',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.10'\n}\n\n\ndef run(ctx):\n\n    [num_samples, vol_sample, vol_lys_buffer, vol_elution_buffer, asp_height,\n     p300_mount, p300_type, p1000_mount, p1000_type,\n     tip_track] = get_values(  # noqa: F821\n        'num_samples', 'vol_sample', 'vol_lys_buffer', 'vol_elution_buffer',\n        'asp_height', 'p300_mount', 'p300_type', 'p1000_mount', 'p1000_type',\n        'tip_track')\n\n    # load labware\n    dest_plate = ctx.load_labware(\n        'nest_96_wellplate_2ml_deep', '1', '96-deepwell sample plate')\n    source_racks = [\n        ctx.load_labware('opentrons_24_tuberack_nest_1.5ml_snapcap', slot,\n                         'source tuberack ' + str(i+1))\n        for i, slot in enumerate(['2', '3', '5', '6'])\n    ]\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '4',\n                                 'reagent reservoir')\n    tipracks300 = [\n        ctx.load_labware('opentrons_96_tiprack_300ul', slot,\n                         '300\u00b5l tiprack')\n        for slot in ['7', '8', '10', '11']]\n    tipracks1000 = [ctx.load_labware('opentrons_96_tiprack_1000ul', slot,\n                                     '1000\u00b5l tiprack')\n                    for slot in ['9']]\n\n    # load pipette\n    p300 = ctx.load_instrument(p300_type, p300_mount, tip_racks=tipracks300)\n    p1000 = ctx.load_instrument(p1000_type, p1000_mount,\n                                tip_racks=tipracks1000)\n\n    # setup samples and reagents\n    sources = [\n        well for rack in source_racks for well in rack.wells()][:num_samples]\n    dests_single = dest_plate.wells()[2:2+num_samples]  # leave controls empty\n    lys_buffer = reservoir.wells()[:4]\n    elution_buffer = reservoir.wells()[-1]\n    tip_log = {'count': {}}\n    folder_path = '/data/A'\n    tip_file_path = folder_path + '/tip_log.json'\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                if 'tips1000' in data:\n                    tip_log['count'][p1000] = data['tips1000']\n                else:\n                    tip_log['count'][p1000] = 0\n                if 'tips300' in data:\n                    tip_log['count'][p300] = data['tips300']\n                else:\n                    tip_log['count'][p300] = 0\n    else:\n        tip_log['count'] = {p1000: 0, p300: 0}\n\n    tip_log['tips'] = {\n        p1000: [tip for rack in tipracks1000 for tip in rack.wells()],\n        p300: [tip for rack in tipracks300 for tip in rack.wells()]\n    }\n    tip_log['max'] = {\n        pip: len(tip_log['tips'][pip])\n        for pip in [p1000, p300]\n    }\n\n    def pick_up(pip):\n        nonlocal tip_log\n        if tip_log['count'][pip] == tip_log['max'][pip]:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log['count'][pip] = 0\n        pip.pick_up_tip(tip_log['tips'][pip][tip_log['count'][pip]])\n        tip_log['count'][pip] += 1\n\n    # transfer lysis/binding buffer\n    for i, d in enumerate(dests_single):\n        pick_up(p1000)\n        p1000.transfer(vol_lys_buffer, lys_buffer[i//24], d.bottom(5),\n                       air_gap=100, new_tip='never')\n        p1000.air_gap(100)\n        p1000.drop_tip()\n\n    # transfer sample\n    for s, d in zip(sources, dests_single):\n        pick_up(p300)\n        p300.transfer(vol_sample, s.bottom(asp_height), d.bottom(5),\n                      air_gap=20, new_tip='never')\n        p300.air_gap(20)\n        p300.drop_tip()\n\n    # transfer elution buffer\n    for i, d in enumerate(dests_single):\n        pick_up(p300)\n        p300.transfer(vol_lys_buffer, elution_buffer, d.bottom(5),\n                      air_gap=20, new_tip='never')\n        p300.air_gap(20)\n        p300.drop_tip()\n\n    ctx.comment('Move deepwell plate (slot 4) to Station B for RNA \\\nextraction.')\n\n    # track final used tip\n    if not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {\n            'tips1000': tip_log['count'][p1000],\n            'tips300': tip_log['count'][p300]\n        }\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 94,
            "label": "number of samples",
            "name": "num_samples",
            "type": "int"
        },
        {
            "default": 200.0,
            "label": "volume of sample (in \u00b5L)",
            "name": "vol_sample",
            "type": "float"
        },
        {
            "default": 520.0,
            "label": "volume of lysis/binding buffer (in \u00b5L)",
            "name": "vol_lys_buffer",
            "type": "float"
        },
        {
            "default": 85.0,
            "label": "volume of elution buffer (in \u00b5L)",
            "name": "vol_elution_buffer",
            "type": "float"
        },
        {
            "default": 5.0,
            "label": "aspiration height from bottom of sample tube (in mm)",
            "name": "asp_height",
            "type": "int"
        },
        {
            "label": "P300 single-channel mount",
            "name": "p300_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 single-channel generation",
            "name": "p300_type",
            "options": [
                {
                    "label": "GEN2",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "GEN1",
                    "value": "p300_single"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P1000 single-channel GEN2 mount",
            "name": "p1000_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P1000 single-channel generation",
            "name": "p1000_type",
            "options": [
                {
                    "label": "GEN2",
                    "value": "p1000_single_gen2"
                },
                {
                    "label": "GEN1",
                    "value": "p1000_single"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p1000_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "96-deepwell sample plate on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "source tuberack 1 on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "source tuberack 2 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "reagent reservoir on 4",
            "share": false,
            "slot": "4",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "source tuberack 3 on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "source tuberack 4 on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "300\u00b5l tiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "300\u00b5l tiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "1000\u00b5l tiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "300\u00b5l tiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "300\u00b5l tiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Logix Smart Nasopharyngeal Covid-19 Plating (Station A)",
        "source": "Custom Protocol Request"
    },
    "modules": []
}