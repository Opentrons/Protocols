{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Cherrypicking and Normalization',\n    'author': 'Chaz <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.5'\n}\n\n\ndef run(ctx):\n\n    [left_pipette_type, right_pipette_type, d_csv,\n     s_csv, diluent_scheme, mix] = get_values(  # noqa: F821\n        \"left_pipette_type\", \"right_pipette_type\", \"d_csv\", \"s_csv\",\n        \"diluent_scheme\", \"mix\")\n\n    tiprack_map = {\n        'p10_single': 'opentrons_96_filtertiprack_10ul',\n        'p50_single': 'opentrons_96_filtertiprack_200ul',\n        'p300_single_gen1': 'opentrons_96_filtertiprack_200ul',\n        'p1000_single_gen1': 'opentrons_96_filtertiprack_1000ul',\n        'p20_single_gen2': 'opentrons_96_filtertiprack_20ul',\n        'p300_single_gen2': 'opentrons_96_filtertiprack_200ul',\n        'p1000_single_gen2': 'opentrons_96_filtertiprack_1000ul'\n    }\n\n    # load labware\n    transfer_info_d = [[val.strip().lower() for val in line.split(',')]\n                       for line in d_csv.splitlines()\n                       if line.split(',')[0].strip()][1:]\n\n    transfer_info_s = [[val.strip().lower() for val in line.split(',')]\n                       for line in s_csv.splitlines()\n                       if line.split(',')[0].strip()][1:]\n\n    for line in transfer_info_d:\n        s_lw, s_slot, d_lw, d_slot = line[:2] + line[4:6]\n        for slot, lw in zip([s_slot, d_slot], [s_lw, d_lw]):\n            if not int(slot) in ctx.loaded_labwares:\n                ctx.load_labware(lw.lower(), slot)\n\n    for line in transfer_info_s:\n        s_lw, s_slot, d_lw, d_slot = line[:2] + line[4:6]\n        for slot, lw in zip([s_slot, d_slot], [s_lw, d_lw]):\n            if not int(slot) in ctx.loaded_labwares:\n                ctx.load_labware(lw.lower(), slot)\n\n    # load tipracks in remaining slots\n    avail_slots = [str(slot) for slot in range(1, 13)\n                   if slot not in ctx.loaded_labwares]\n    num_avail_slots = len(avail_slots)\n    num_pipettes = len([pip for pip in [left_pipette_type, right_pipette_type]\n                        if pip])\n    if num_pipettes == 0:\n        raise Exception('Must select at least 1 pipette.')\n    pipettes = {'left': None, 'right': None}\n    for i, (pip_type, side) in enumerate(\n            zip([left_pipette_type, right_pipette_type], pipettes.keys())):\n        if pip_type:\n            tiprack_type = tiprack_map[pip_type]\n            tipracks = []\n            if i == 0:\n                num_racks = math.ceil(num_avail_slots/num_pipettes)\n                slots = avail_slots[:num_racks]\n            else:\n                num_racks = math.floor(num_avail_slots/num_pipettes)\n                start = num_avail_slots - num_racks\n                slots = avail_slots[start:]\n            for slot in slots:\n                tipracks.append(ctx.load_labware(tiprack_type, str(slot)))\n        # load pipette\n        pipettes[side] = ctx.load_instrument(pip_type, side,\n                                             tip_racks=tipracks)\n\n    tip_log = {\n        pip: {'count': 0, 'max': len(pip.tip_racks*96)}\n        for pip in pipettes.values() if pip\n    }\n\n    def pick_up(pip):\n        if tip_log[pip]['count'] == tip_log[pip]['max']:\n            ctx.pause('Please refill {}\u00b5l tipracks before \\\nresuming.'.format(pip.max_volume))\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        pip.pick_up_tip()\n        tip_log[pip]['count'] += 1\n\n    def parse_well(well):\n        letter = well[0]\n        number = well[1:]\n        return letter.upper() + str(int(number))\n\n    ctx.comment('Transferring diluent to wells based on Dilutant CSV...')\n    for line in transfer_info_d:\n        [_, s_slot, s_well, asp_h, _, d_slot, d_well, disp_h, vol,\n         pip] = line[:10]\n        pipette = pipettes[pip]\n        if diluent_scheme == 'always':\n            pick_up(pipette)\n        source = ctx.loaded_labwares[\n            int(s_slot)].wells_by_name()[parse_well(s_well)]\n        dest = ctx.loaded_labwares[\n            int(d_slot)].wells_by_name()[parse_well(d_well)]\n        if not pipette.has_tip:\n            pick_up(pipette)\n        pipette.transfer(float(vol), source.bottom(float(asp_h)),\n                         dest.bottom(float(disp_h)), new_tip='never')\n        if diluent_scheme == 'always':\n            pipette.drop_tip()\n    for pip in pipettes.values():\n        if pip:\n            if pip.has_tip:\n                pip.drop_tip()\n\n    ctx.comment('Transferring DNA to wells based on Sample CSV...')\n    for line in transfer_info_s:\n        [_, s_slot, s_well, asp_h, _, d_slot, d_well, disp_h, vol,\n         pip] = line[:10]\n        source = ctx.loaded_labwares[\n            int(s_slot)].wells_by_name()[parse_well(s_well)]\n        dest = ctx.loaded_labwares[\n            int(d_slot)].wells_by_name()[parse_well(d_well)]\n        pipette = pipettes[pip]\n        pick_up(pipette)\n        pipette.transfer(float(vol), source, dest, new_tip='never')\n        if mix:\n            pipette.mix(3, float(vol), dest)\n        pipette.blow_out()\n        pipette.drop_tip()\n\n    ctx.comment('Protocol complete.')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "left pipette type",
            "name": "left_pipette_type",
            "options": [
                {
                    "label": "P10 Single (GEN 1)",
                    "value": "p10_single"
                },
                {
                    "label": "P50 Single (GEN 1)",
                    "value": "p50_single"
                },
                {
                    "label": "P300 Single (GEN 1)",
                    "value": "p300_single_gen1"
                },
                {
                    "label": "P1000 Single (GEN 1)",
                    "value": "p1000_single_gen1"
                },
                {
                    "label": "P20 Single (GEN 2)",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "P300 Single (GEN 2)",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "P1000 Single (GEN 2)",
                    "value": "p1000_single_gen2"
                },
                {
                    "label": "None",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "right pipette type",
            "name": "right_pipette_type",
            "options": [
                {
                    "label": "P10 Single (GEN 1)",
                    "value": "p10_single"
                },
                {
                    "label": "P50 Single (GEN 1)",
                    "value": "p50_single"
                },
                {
                    "label": "P300 Single (GEN 1)",
                    "value": "p300_single_gen1"
                },
                {
                    "label": "P1000 Single (GEN 1)",
                    "value": "p1000_single_gen1"
                },
                {
                    "label": "P20 Single (GEN 2)",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "P300 Single (GEN 2)",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "P1000 Single (GEN 2)",
                    "value": "p1000_single_gen2"
                },
                {
                    "label": "None",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": "Source Labware,Source Slot,Source Well,Source Aspiration Height Above Bottom (in mm),Dest Labware,Dest Slot,Dest Well,Dest Dispense Height Above Bottom (in mm),Volume (in ul),Pipette\nagilent_1_reservoir_290ml,1,A1,1,nest_96_wellplate_100ul_pcr_full_skirt,4,A11,5,1,left\nnest_12_reservoir_15ml,2,A1,1,nest_96_wellplate_2ml_deep,5,A5,5,3,left\nnest_1_reservoir_195ml,3,A1,1,nest_96_wellplate_2ml_deep,5,H12,5,7,left",
            "label": "diluent CSV",
            "name": "d_csv",
            "type": "textFile"
        },
        {
            "default": "Source Labware,Source Slot,Source Well,Source Aspiration Height Above Bottom (in mm),Dest Labware,Dest Slot,Dest Well,Dest Dispense Height Above Bottom (in mm),Volume (in ul),Pipette\nagilent_1_reservoir_290ml,1,A1,1,nest_96_wellplate_100ul_pcr_full_skirt,4,A11,1,5,right\nnest_12_reservoir_15ml,2,A1,1,nest_96_wellplate_2ml_deep,5,A5,5,3,right\nnest_1_reservoir_195ml,3,A1,1,nest_96_wellplate_2ml_deep,5,H12,5,7,right",
            "label": "sample CSV",
            "name": "s_csv",
            "type": "textFile"
        },
        {
            "label": "diluent tip scheme",
            "name": "diluent_scheme",
            "options": [
                {
                    "label": "same tip for whole process",
                    "value": "never"
                },
                {
                    "label": "new tip for each transfer",
                    "value": "always"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "mix after final transfer",
            "name": "mix",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p10_single"
        },
        {
            "mount": "right",
            "name": "p10_single"
        }
    ],
    "labware": [
        {
            "name": "Agilent 1 Well Reservoir 290 mL on 1",
            "share": false,
            "slot": "1",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "NEST 1 Well Reservoir 195 mL on 3",
            "share": false,
            "slot": "3",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 10 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_10ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.5",
        "author": "Chaz <protocols@opentrons.com>",
        "protocolName": "Cherrypicking and Normalization",
        "source": "Custom Protocol Request"
    },
    "modules": []
}