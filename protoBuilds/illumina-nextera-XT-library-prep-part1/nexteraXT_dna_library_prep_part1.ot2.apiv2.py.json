{
    "content": "metadata = {\n    'protocolName': 'Illumina Nextera XT NGS Prep 1: Tagment Genomic DNA & \\\nAmplify Libraries',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Protocol Library',\n    'apiLevel': '2.2'\n    }\n\n\ndef run(protocol_context):\n    [pipette_setup, number_of_samples] = get_values(  # noqa: F821\n        'pipette_setup', 'number_of_samples')\n\n    # labware setup\n    gDNA_plate = protocol_context.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '1', 'gDNA plate')\n    out_plate = protocol_context.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '2', 'output plate')\n    tuberack = protocol_context.load_labware(\n        'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n        '5',\n        'reagent rack'\n    )\n\n    # reagent setup\n    atm = tuberack.wells()[0]  # Amplicon Tagment Mix\n    td = tuberack.wells()[1]  # Tagment DNA Buffer\n    nt = tuberack.wells()[2]  # Neutralize Tagment Buffer\n    npm = tuberack.wells()[3]  # Nextera PCR Master Mix\n    index_7 = tuberack.wells()[4:12]  # Index 1 (i7) adapters\n    index_5 = tuberack.wells()[16:]  # Index 2 (i5) adapters\n\n    # pipette setup\n    pip_names = pipette_setup.split(',')\n    if len(pip_names) > 1:\n        tipracks50 = [\n            protocol_context.load_labware('opentrons_96_tiprack_300ul', slot)\n            for slot in ['3', '4']\n        ]\n        tipracks10 = [\n            protocol_context.load_labware('opentrons_96_tiprack_10ul', slot)\n            for slot in ['6', '7', '8', '9']\n        ]\n        racksets = [tipracks50, tipracks10]\n        pip_l, pip_s = [\n            protocol_context.load_instrument(pip, mount, tip_racks=rack)\n            for pip, mount, rack in zip(pip_names, ['left', 'right'], racksets)\n        ]\n    else:\n        tipracks20 = [\n            protocol_context.load_labware('opentrons_96_tiprack_20ul', slot)\n            for slot in ['3', '4', '6', '7', '8', '9']\n        ]\n        p20 = protocol_context.load_instrument(\n            pip_names[0], mount='right', tip_racks=tipracks20)\n        pip_l = p20\n        pip_s = p20\n\n    # define sample locations\n    samples = gDNA_plate.wells()[:number_of_samples]\n\n    if number_of_samples <= 24:\n        # index7 = 6\n        index5 = 4\n        output = [well for col in out_plate.columns() for well in col[:4]]\n    else:\n        # index7 = 12\n        index5 = 8\n        output = [well for well in out_plate.wells()][:number_of_samples]\n\n    cols = number_of_samples // index5\n    remainder = number_of_samples % index5\n\n    \"\"\"\n    Tagment genomic DNA\n    \"\"\"\n    # Add Tagment DNA Buffer to each well\n    pip_l.transfer(10, td, output, blow_out=True)\n\n    # Add normalized gDNA to each well\n    pip_s.transfer(5, samples, output, new_tip='always')\n\n    # Add ATM to each well\n    for well in output:\n        pip_s.transfer(5, atm, well, mix_after=(5, 10))\n\n    protocol_context.pause(\"Centrifuge at 280 \u00d7 g at 20\u00b0C for 1 minute. Place \\\non the preprogrammed thermal cycler and run the tagmentation program. When \\\nthe sample reaches 10\u00b0C, immediately proceed to the next step because the \\\ntransposome is still active. Place the plate back to slot 2.\")\n\n    # Add Neutralize Tagment Buffer to each well\n    pip_s.transfer(5, nt, output, mix_after=(5, 10), new_tip='always')\n\n    protocol_context.pause(\"Centrifuge at 280 \u00d7 g at 20\u00b0C for 1 minute. Place \\\nthe plate back on slot 2.\")\n\n    # Incubate at RT for 5 minutes\n    protocol_context.delay(minutes=5)\n\n    \"\"\"\n    Amplify Libraries\n    \"\"\"\n    # Add each index 1 adapter down each column\n    for index, loc in enumerate(range(0, number_of_samples, index5)[:cols]):\n        pip_s.transfer(\n            5,\n            index_7[index],\n            [well.top() for well in output[loc: loc+index5]],\n            blow_out=True\n        )\n\n    if remainder:\n        index = range(0, number_of_samples, index5)[cols]\n        pip_s.transfer(\n            5,\n            index_7[cols],\n            [well.top() for well in output[index:index+remainder]],\n            blow_out=True\n        )\n\n    # Add each index 2 adapter across each row\n    for index in range(0, index5):\n        if remainder and index < remainder:\n            loc = [loc for loc in range(\n                index, number_of_samples, index5)][:cols+1]\n            dest = [output[i].top() for i in loc]\n        else:\n            dest = [output[i].top() for i in range(\n                index, number_of_samples, index5)][:cols]\n        pip_s.transfer(5, index_5[index], dest, blow_out=True)\n\n    # Add Nextera PCR Master Mix to each well\n    for d in output:\n        mix_vol = pip_l.max_volume if pip_l.max_volume == 20 else 30\n        pip_l.transfer(15, npm, d, mix_after=(2, mix_vol))\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "pipette setup",
            "name": "pipette_setup",
            "options": [
                {
                    "label": "P20 single-channel (GEN2)",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "P10 and P50 single-channel (GEN1)",
                    "value": "p50_single,p10_single"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 24,
            "label": "number of samples",
            "name": "number_of_samples",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "gDNA plate on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "output plate on 2",
            "share": false,
            "slot": "2",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "reagent rack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.2",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Illumina Nextera XT NGS Prep 1: Tagment Genomic DNA & Amplify Libraries",
        "source": "Protocol Library"
    },
    "modules": []
}