{
    "content": "from opentrons.protocol_api.labware import OutOfTipsError\nfrom itertools import zip_longest\nimport csv\nimport math\n\nmetadata = {\n    'title': 'Sample Mixing',\n    'author': 'Steve Plonk',\n    'apiLevel': '2.11'\n}\n\n\ndef run(ctx):\n\n    [multitasking, rate_asp_r, rate_disp_r, rate_asp_l, rate_disp_l,\n     filter_tips, pip_l, pip_r, labware_1, clearance_1, labware_2, clearance_2,\n     labware_3, clearance_3, labware_4, clearance_4, labware_5, clearance_5,\n     labware_6, clearance_6, labware_res, labware_11, clearance_11,\n     uploaded_csv] = get_values(  # noqa: F821\n     \"multitasking\", \"rate_asp_r\", \"rate_disp_r\", \"rate_asp_l\", \"rate_disp_l\",\n     \"filter_tips\", \"pip_l\", \"pip_r\", \"labware_1\", \"clearance_1\", \"labware_2\",\n     \"clearance_2\", \"labware_3\", \"clearance_3\", \"labware_4\", \"clearance_4\",\n     \"labware_5\", \"clearance_5\", \"labware_6\", \"clearance_6\", \"labware_res\",\n     \"labware_11\", \"clearance_11\", \"uploaded_csv\")\n\n    ctx.set_rail_lights(True)\n    ctx.delay(seconds=10)\n\n    # csv\n    tfers = [line for line in csv.DictReader(uploaded_csv.splitlines())]\n\n    # selected pipettes and corresponding tips\n    tipmap = {\n     'p20_single_gen2': 'opentrons_96_{}tiprack_20ul'.format(\n      'filter' if filter_tips else ''),\n     'p300_single_gen2': 'opentrons_96_{0}tiprack_{1}00ul'.format(\n      'filter' if filter_tips else '', '2' if filter_tips else '3'),\n     'p1000_single_gen2': 'opentrons_96_{}tiprack_1000ul'.format(\n      'filter' if filter_tips else '')\n      }\n\n    slotmap = {\n     'opentrons_96_{}tiprack_20ul'.format(\n      'filter' if filter_tips else ''): [7],\n     'opentrons_96_{0}tiprack_{1}00ul'.format(\n      'filter' if filter_tips else '', '2' if filter_tips else '3'): [8],\n     'opentrons_96_{}tiprack_1000ul'.format(\n      'filter' if filter_tips else ''): [9]\n      }\n\n    clearances = {}\n    for clearance, name in zip(\n     [clearance_1, clearance_2, clearance_3, clearance_4, clearance_5,\n      clearance_6, clearance_11],\n     ['clearance_1', 'clearance_2', 'clearance_3', 'clearance_4',\n      'clearance_5', 'clearance_6', 'clearance_11']):\n        if not clearance > 0:\n            raise Exception(\n             '''Specified well bottom clearances must be greater than 0''')\n        clearances[int(name[10:])] = clearance\n\n    loaded = []\n\n    if pip_l:\n\n        # use all three slots when only one pipette\n        slots = slotmap.get(tipmap.get(pip_l)) if pip_r else [7, 8, 9]\n\n        tipsleft = [ctx.load_labware(\n         tipmap.get(pip_l), str(slot)) for slot in slots]\n\n        pipette_l = ctx.load_instrument(\n            pip_l, 'left', tip_racks=tipsleft)\n\n        loaded.append(pipette_l)\n\n        pipette_l.flow_rate.aspirate = rate_asp_l*pipette_l.flow_rate.aspirate\n        pipette_l.flow_rate.dispense = rate_disp_l*pipette_l.flow_rate.dispense\n\n    if pip_r:\n\n        # use all three slots when only one pipette\n        slots = slotmap.get(tipmap.get(pip_r)) if pip_l else [7, 8, 9]\n\n        if not pip_l == pip_r:\n\n            tipsright = [ctx.load_labware(\n             tipmap.get(pip_r), str(slot)) for slot in slots]\n\n        else:\n\n            # when pip_r and pip_l same type, share same tips in 7, 8, 9\n            tipsright = []\n            tipsright.append(tipsleft[0])\n            for key in [7, 8, 9]:\n                if key not in ctx.loaded_labwares.keys():\n                    new = ctx.load_labware(tipmap.get(pip_r), str(key))\n                    tipsright.append(new)\n                    tipsleft.append(new)\n\n        pipette_r = ctx.load_instrument(\n            pip_r, 'right', tip_racks=tipsright)\n\n        loaded.append(pipette_r)\n\n        pipette_r.flow_rate.aspirate = rate_asp_r*pipette_r.flow_rate.aspirate\n        pipette_r.flow_rate.dispense = rate_disp_r*pipette_r.flow_rate.dispense\n\n    # one or two loaded pipettes in volume order\n    loaded.sort(key=lambda element: element.max_volume)\n\n    # no unworkable volumes for selected pipettes - otherwise user's discretion\n    for tfer in tfers:\n        v = float(tfer['Sample_Volume'])\n        if not 0.95*loaded[0].min_volume <= v <= 15*loaded[-1].max_volume:\n            raise Exception(\n             '''Specified {} uL transfer volume\n             not workable with selected pipettes'''.format(v))\n\n    # count and list high volume and low volume transfers\n    highvol = []\n    lowvol = []\n    if (pip_l and pip_r):\n        if pip_l != pip_r:\n            for tfer in tfers:\n                vol = float(tfer['Sample_Volume'])\n\n                if loaded[0].max_volume < vol and loaded[-1].min_volume < vol:\n                    highvol.append(tfer)\n                else:\n                    lowvol.append(tfer)\n\n            # load extra boxes of most-frequent tips in free slots\n            tiptype = loaded[-1].name if len(\n             highvol) >= len(lowvol) else loaded[0].name\n\n            for key in [7, 8, 9]:\n                if key not in ctx.loaded_labwares.keys():\n                    new = ctx.load_labware(tipmap[tiptype], str(key))\n                    for pipette in loaded:\n                        if pipette.name == tiptype:\n                            pipette._tip_racks.append(new)\n\n    # use tips in slot order\n    if pip_r:\n        tipsright.sort(key=lambda element: element.parent)\n\n    if pip_l:\n        tipsleft.sort(key=lambda element: element.parent)\n\n    # temperature modules with selected labware\n    temp = ctx.load_module('temperature module gen2', '1')\n    temp2 = ctx.load_module('temperature module gen2', '4')\n\n    if labware_1:\n        temp.load_labware(\n         labware_1, \"Temperature Module\")\n        temp.set_temperature(4)\n\n    if labware_4:\n        temp2.load_labware(\n         labware_4, \"Temperature Module 2\")\n        temp.set_temperature(4)\n\n    # selected labware in slots 2-6, 11\n    for labwr, slot in zip(\n     [labware_2, labware_3, labware_5, labware_6, labware_11],\n     [2, 3, 5, 6, 11]):\n\n        if labwr:\n            ctx.load_labware(labwr, str(slot), 'labware '+str(slot))\n\n    for tfer in tfers:\n\n        if int(tfer[\"Sample_Slot\"]) not in ctx.loaded_labwares.keys():\n            raise Exception(\n             '''CSV-specified source slot {}\n             does not have loaded labware'''.format(tfer[\"Sample_Slot\"]))\n\n        elif tfer['Sample_Position'] not in [\n         well.well_name for well in ctx.loaded_labwares[\n          int(tfer[\"Sample_Slot\"])].wells()]:\n            raise Exception(\n             '''CSV-specified source sample position {0}\n             is not valid for labware loaded in slot {1}'''.format(\n              tfer[\"Sample_Position\"], tfer[\"Sample_Slot\"]))\n\n        elif int(tfer[\"Final_Slot\"]) not in ctx.loaded_labwares.keys():\n            raise Exception(\n                 '''CSV-specified destination slot {}\n                 does not have loaded labware'''.format(tfer[\"Final_Slot\"]))\n\n        else:\n            if tfer['Final_Position'] not in [\n             well.well_name for well in ctx.loaded_labwares[\n              int(tfer[\"Final_Slot\"])].wells()]:\n                raise Exception(\n                 '''CSV-specified final position {0}\n                 is not valid for labware loaded in slot {1}'''.format(\n                  tfer[\"Final_Position\"], tfer[\"Final_Slot\"]))\n\n    # selected reservoir in slot 10\n    if labware_res:\n        ctx.load_labware(labware_res, '10', 'Reservoir')\n\n    # notify user to replenish tips\n    def pick_up_or_refill(self):\n        try:\n            self.pick_up_tip()\n        except OutOfTipsError:\n            ctx.pause(\n             \"\"\"Please Refill the {} Tip Boxes\n                and Empty the Tip Waste.\"\"\".format(self))\n            self.reset_tipracks()\n            self.pick_up_tip()\n\n    # transfer sample groups\n\n    if (not multitasking or len(loaded) == 1):\n\n        for tfer in tfers:\n\n            vol = float(tfer['Sample_Volume'])\n\n            p = {\n             True: loaded[-1]}.get(((\n              vol > loaded[0].max_volume) and (vol > loaded[-1].min_volume)),\n              loaded[0])\n\n            air_gap_vol = 0.05*p.max_volume\n\n            reps = math.ceil(\n             vol / (int(tipmap[p.name].split('_')[-1].replace(\n              'ul', '')) - air_gap_vol))\n\n            if reps:\n                v = vol / reps\n\n            tipheight_asp = clearances[int(tfer['Sample_Slot'])]\n\n            tipheight_disp = clearances[int(tfer['Final_Slot'])]\n\n            ctx.comment(\n                 \"{0} performing {1} transfer\".format(p, tfer.items()))\n\n            for rep in range(reps):\n\n                pick_up_or_refill(p)\n\n                loc_asp = ctx.loaded_labwares[int(\n                 tfer['Sample_Slot'])].wells_by_name()[tfer['Sample_Position']]\n\n                loc_disp = ctx.loaded_labwares[int(\n                 tfer['Final_Slot'])].wells_by_name()[tfer['Final_Position']]\n\n                p.aspirate(v, loc_asp.bottom(tipheight_asp))\n\n                # tip touch\n                speed_arg = 3.14*loc_asp.diameter\n                r = loc_asp.diameter / 2\n                radius_arg = (r - 0.5) / r\n                p.touch_tip(radius=radius_arg, v_offset=-10, speed=speed_arg)\n\n                p.air_gap(air_gap_vol)\n\n                p.dispense(air_gap_vol, loc_disp.top())\n                p.dispense(v, loc_disp.bottom(tipheight_disp))\n                p.blow_out()\n\n                # tip touch\n                speed_arg = 3.14*loc_disp.diameter\n                r = loc_disp.diameter / 2\n                radius_arg = (r - 0.5) / r\n                p.touch_tip(radius=radius_arg, v_offset=-2, speed=speed_arg)\n\n                p.drop_tip()\n\n    else:\n\n        p = loaded[1]\n        p2 = loaded[0]\n\n        if pip_l != pip_r:\n\n            for tferhigh, tferlow in zip_longest(highvol, lowvol):\n\n                if tferhigh:\n                    vol = float(tferhigh['Sample_Volume'])\n\n                    air_gap_vol = 0.05*p.max_volume\n\n                    reps = math.ceil(vol / (int(tipmap[p.name].split(\n                     '_')[-1].replace('ul', '')) - air_gap_vol))\n\n                    if reps:\n                        v = vol / reps\n\n                    tipheight_asp = clearances[int(tfer['Sample_Slot'])]\n\n                    tipheight_disp = clearances[int(tfer['Final_Slot'])]\n\n                    ctx.comment(\n                     \"{0} performing {1} transfer\".format(p, tferhigh.items()))\n                else:\n                    ctx.comment(\"Higher volume transfers are finished\")\n\n                if tferlow:\n\n                    vol2 = float(tferlow['Sample_Volume'])\n\n                    air_gap_vol2 = 0.05*p2.max_volume\n\n                    reps2 = math.ceil(vol2 / (int(tipmap[p2.name].split(\n                     '_')[-1].replace('ul', '')) - air_gap_vol2))\n\n                    ctx.comment(\" reps2 {}\".format(reps2))\n\n                    if reps2:\n                        v2 = vol2 / reps2\n\n                    tipheight_asp2 = clearances[int(tfer['Sample_Slot'])]\n\n                    tipheight_disp2 = clearances[int(tfer['Final_Slot'])]\n\n                    ctx.comment(\n                     \"{0} performing {1} transfer\".format(p2, tferlow.items()))\n\n                else:\n                    ctx.comment(\"Lower volume transfers are finished\")\n\n                for rep in range(max([reps, reps2])):\n\n                    if (tferhigh and rep < reps):\n\n                        pick_up_or_refill(p)\n\n                        loc_asp = ctx.loaded_labwares[int(\n                         tferhigh['Sample_Slot'])].wells_by_name()[\n                         tferhigh['Sample_Position']]\n\n                        loc_disp = ctx.loaded_labwares[int(\n                         tferhigh['Final_Slot'])].wells_by_name()[\n                         tferhigh['Final_Position']]\n\n                    if (tferlow and rep < reps2):\n\n                        pick_up_or_refill(p2)\n\n                        loc_asp2 = ctx.loaded_labwares[int(\n                         tferlow['Sample_Slot'])].wells_by_name()[\n                         tferlow['Sample_Position']]\n\n                        loc_disp2 = ctx.loaded_labwares[int(\n                         tferlow['Final_Slot'])].wells_by_name()[\n                         tferlow['Final_Position']]\n\n                    if (tferhigh and rep < reps):\n\n                        p.aspirate(v, loc_asp.bottom(tipheight_asp))\n\n                        # tip touch\n                        speed_arg = 3.14*loc_asp.diameter\n                        r = loc_asp.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p.touch_tip(\n                         radius=radius_arg, v_offset=-10, speed=speed_arg)\n\n                        p.air_gap(air_gap_vol)\n\n                    if (tferlow and rep < reps2):\n\n                        p2.aspirate(v2, loc_asp2.bottom(tipheight_asp2))\n\n                        # tip touch\n                        speed_arg = 3.14*loc_asp2.diameter\n                        r = loc_asp2.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p2.touch_tip(\n                         radius=radius_arg, v_offset=-10, speed=speed_arg)\n\n                        p2.air_gap(air_gap_vol2)\n\n                    if (tferhigh and rep < reps):\n\n                        p.dispense(\n                         air_gap_vol, loc_disp.top())\n                        p.dispense(\n                         v, loc_disp.bottom(tipheight_disp))\n                        p.blow_out()\n\n                        # tip touch\n                        speed_arg = 3.14*loc_disp.diameter\n                        r = loc_disp.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p.touch_tip(\n                         radius=radius_arg, v_offset=-2, speed=speed_arg)\n\n                    if (tferlow and rep < reps2):\n\n                        p2.dispense(\n                         air_gap_vol2, loc_disp2.top())\n                        p2.dispense(\n                         v2, loc_disp2.bottom(tipheight_disp2))\n                        p2.blow_out()\n\n                        # tip touch\n                        speed_arg = 3.14*loc_disp2.diameter\n                        r = loc_disp2.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p2.touch_tip(\n                         radius=radius_arg, v_offset=-2, speed=speed_arg)\n\n                    if p.has_tip:\n                        p.drop_tip()\n\n                    if p2.has_tip:\n                        p2.drop_tip()\n\n        else:\n\n            for tfer1, tfer2 in zip_longest(\n             [tfer for index, tfer in enumerate(tfers) if not index % 2],\n             [tfer for index, tfer in enumerate(tfers) if index % 2]):\n\n                if tfer1:\n\n                    vol = float(tfer1['Sample_Volume'])\n\n                    air_gap_vol = 0.05*p.max_volume\n\n                    reps = math.ceil(\n                     vol / (int(tipmap[p.name].split(\n                      '_')[-1].replace('ul', '')) - air_gap_vol))\n\n                    if reps:\n                        v = vol / reps\n\n                    tipheight_asp = clearances[int(tfer['Sample_Slot'])]\n\n                    tipheight_disp = clearances[int(tfer['Final_Slot'])]\n\n                    ctx.comment(\n                     \"{0} performing {1} transfer\".format(p, tfer1.items()))\n                else:\n                    ctx.comment(\"Higher volume transfers are finished\")\n\n                if tfer2:\n\n                    vol2 = float(tfer2['Sample_Volume'])\n\n                    p2 = loaded[0]\n\n                    air_gap_vol2 = 0.05*p2.max_volume\n\n                    reps2 = math.ceil(\n                     vol2 / (int(tipmap[p2.name].split(\n                      '_')[-1].replace('ul', '')) - air_gap_vol2))\n\n                    if reps2:\n                        v2 = vol2 / reps2\n\n                    tipheight_asp2 = clearances[int(tfer['Sample_Slot'])]\n\n                    tipheight_disp2 = clearances[int(tfer['Final_Slot'])]\n\n                    ctx.comment(\n                     \"{0} performing {1} transfer\".format(p2, tfer2.items()))\n                else:\n                    ctx.comment(\"Lower volume transfers are finished\")\n\n                for rep in range(max([reps, reps2])):\n\n                    if (tfer1 and rep < reps):\n\n                        pick_up_or_refill(p)\n\n                        loc_asp = ctx.loaded_labwares[int(\n                         tfer1['Sample_Slot'])].wells_by_name()[\n                         tfer1['Sample_Position']]\n\n                        loc_disp = ctx.loaded_labwares[int(\n                         tfer1['Final_Slot'])].wells_by_name()[\n                         tfer1['Final_Position']]\n\n                    if (tfer2 and rep < reps2):\n\n                        pick_up_or_refill(p2)\n\n                        loc_asp2 = ctx.loaded_labwares[int(\n                         tfer2['Sample_Slot'])].wells_by_name()[\n                         tfer2['Sample_Position']]\n\n                        loc_disp2 = ctx.loaded_labwares[int(\n                         tfer2['Final_Slot'])].wells_by_name()[\n                         tfer2['Final_Position']]\n\n                    if (tfer1 and rep < reps):\n\n                        p.aspirate(v, loc_asp.bottom(tipheight_asp))\n\n                        # tip touch\n                        speed_arg = 3.14*loc_asp.diameter\n                        r = loc_asp.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p.touch_tip(\n                         radius=radius_arg, v_offset=-10, speed=speed_arg)\n\n                        p.air_gap(air_gap_vol)\n\n                    if (tfer2 and rep < reps2):\n\n                        p2.aspirate(v2, loc_asp2.bottom(tipheight_asp2))\n\n                        # tip touch\n                        speed_arg = 3.14*loc_asp2.diameter\n                        r = loc_asp2.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p2.touch_tip(\n                         radius=radius_arg, v_offset=-10, speed=speed_arg)\n\n                        p2.air_gap(air_gap_vol2)\n\n                    if (tfer1 and (rep < reps)):\n\n                        p.dispense(\n                         air_gap_vol, loc_disp.top())\n                        p.dispense(\n                         v, loc_disp.bottom(tipheight_disp))\n                        p.blow_out()\n\n                        # tip touch\n                        speed_arg = 3.14*loc_disp.diameter\n                        r = loc_disp.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p.touch_tip(\n                         radius=radius_arg, v_offset=-2, speed=speed_arg)\n\n                    if (tfer2 and (rep < reps2)):\n\n                        p2.dispense(\n                         air_gap_vol2, loc_disp2.top())\n                        p2.dispense(\n                         v2, loc_disp2.bottom(tipheight_disp2))\n                        p2.blow_out()\n\n                        # tip touch\n                        speed_arg = 3.14*loc_disp2.diameter\n                        r = loc_disp2.diameter / 2\n                        radius_arg = (r - 0.5) / r\n                        p2.touch_tip(\n                         radius=radius_arg, v_offset=-2, speed=speed_arg)\n\n                    if p.has_tip:\n                        p.drop_tip()\n\n                    if p2.has_tip:\n                        p2.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Coordinate Tip Pickup, Aspirate, Dispense and Tip Drop of Two Selected Pipettes?",
            "name": "multitasking",
            "options": [
                {
                    "label": "NO - perform one transfer at a time",
                    "value": false
                },
                {
                    "label": "YES - coordinate actions of the two selected pipettes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flow Rate for Left Pipette Aspirate (from 0.2x default rate to 3x default rate)",
            "name": "rate_asp_l",
            "options": [
                {
                    "label": "use the default flow rate (unchanged)",
                    "value": 1
                },
                {
                    "label": "multiply the default flow rate by 2",
                    "value": 2
                },
                {
                    "label": "multiply the default flow rate by 3",
                    "value": 3
                },
                {
                    "label": "multiply the default flow rate by 0.5",
                    "value": 0.5
                },
                {
                    "label": "multiply the default flow rate by 0.2",
                    "value": 0.2
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flow Rate for Left Pipette Dispense (from 0.2x default rate to 3x default rate)",
            "name": "rate_disp_l",
            "options": [
                {
                    "label": "use the default flow rate (unchanged)",
                    "value": 1
                },
                {
                    "label": "multiply the default flow rate by 2",
                    "value": 2
                },
                {
                    "label": "multiply the default flow rate by 3",
                    "value": 3
                },
                {
                    "label": "multiply the default flow rate by 0.5",
                    "value": 0.5
                },
                {
                    "label": "multiply the default flow rate by 0.2",
                    "value": 0.2
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flow Rate for Right Pipette Aspiration (from 0.2x default rate to 3x default rate)",
            "name": "rate_asp_r",
            "options": [
                {
                    "label": "use the default flow rate (unchanged)",
                    "value": 1
                },
                {
                    "label": "multiply the default flow rate by 2",
                    "value": 2
                },
                {
                    "label": "multiply the default flow rate by 3",
                    "value": 3
                },
                {
                    "label": "multiply the default flow rate by 0.5",
                    "value": 0.5
                },
                {
                    "label": "multiply the default flow rate by 0.2",
                    "value": 0.2
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flow Rate for Right Pipette Dispense (from 0.2x default rate to 3x default rate)",
            "name": "rate_disp_r",
            "options": [
                {
                    "label": "use the default flow rate (unchanged)",
                    "value": 1
                },
                {
                    "label": "multiply the default flow rate by 2",
                    "value": 2
                },
                {
                    "label": "multiply the default flow rate by 3",
                    "value": 3
                },
                {
                    "label": "multiply the default flow rate by 0.5",
                    "value": 0.5
                },
                {
                    "label": "multiply the default flow rate by 0.2",
                    "value": 0.2
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Use Filter Tips?",
            "name": "filter_tips",
            "options": [
                {
                    "label": "YES - use Opentrons filter tips",
                    "value": true
                },
                {
                    "label": "NO - use Opentrons standard tips",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Left Pipette",
            "name": "pip_l",
            "options": [
                {
                    "label": "P20 Single Gen2 on LEFT MOUNT",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "DO NOT USE THE PIPETTE ON THE LEFT MOUNT",
                    "value": null
                },
                {
                    "label": "P300 Single Gen2 on LEFT MOUNT",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "P1000 Single Gen2 on LEFT MOUNT",
                    "value": "p1000_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Right Pipette",
            "name": "pip_r",
            "options": [
                {
                    "label": "P300 Single Gen2 on RIGHT MOUNT",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "DO NOT USE THE PIPETTE ON THE RIGHT MOUNT",
                    "value": null
                },
                {
                    "label": "P20 Single Gen2 on RIGHT MOUNT",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "P1000 Single Gen2 on RIGHT MOUNT",
                    "value": "p1000_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware on the Slot 1 Temperature Module",
            "name": "labware_1",
            "options": [
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_snapcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_generic_2ml_screwcap",
                    "value": "opentrons_24_aluminumblock_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_2ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_0.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_0.5ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_2ml_snapcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_snapcap"
                },
                {
                    "label": "EMPTY - NO LABWARE ON SLOT 1 TEMPERATURE MODULE",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 1 Labware (mm above bottom of well)",
            "name": "clearance_1",
            "type": "float"
        },
        {
            "label": "Labware in Slot 2",
            "name": "labware_2",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO LABWARE IN SLOT 2",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 2 Labware (mm above bottom of well)",
            "name": "clearance_2",
            "type": "float"
        },
        {
            "label": "Labware in Slot 3",
            "name": "labware_3",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO LABWARE IN SLOT 3",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 3 Labware (mm above bottom of well)",
            "name": "clearance_3",
            "type": "float"
        },
        {
            "label": "Labware on the Slot 4 Temperature Module",
            "name": "labware_4",
            "options": [
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_snapcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_generic_2ml_screwcap",
                    "value": "opentrons_24_aluminumblock_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_2ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_0.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_0.5ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_2ml_snapcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_snapcap"
                },
                {
                    "label": "EMPTY - NO LABWARE ON SLOT 4 TEMPERATURE MODULE",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 4 Labware (mm above bottom of well)",
            "name": "clearance_4",
            "type": "float"
        },
        {
            "label": "Labware in Slot 5",
            "name": "labware_5",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO LABWARE IN SLOT 5",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 5 Labware (mm above bottom of well)",
            "name": "clearance_5",
            "type": "float"
        },
        {
            "label": "Labware in Slot 6",
            "name": "labware_6",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO LABWARE IN SLOT 6",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 6 Labware (mm above bottom of well)",
            "name": "clearance_6",
            "type": "float"
        },
        {
            "label": "Labware in Slot 10",
            "name": "labware_res",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO RESERVOIR IN SLOT 10",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware in Slot 11",
            "name": "labware_11",
            "options": [
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_nest_1.5ml_snapcap",
                    "value": "opentrons_24_tuberack_nest_1.5ml_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_generic_2ml_screwcap",
                    "value": "opentrons_24_tuberack_generic_2ml_screwcap"
                },
                {
                    "label": "opentrons_24_aluminumblock_nest_1.5ml_screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "EMPTY - NO LABWARE IN SLOT 11",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Slot 11 Labware (mm above bottom of well)",
            "name": "clearance_11",
            "type": "float"
        },
        {
            "default": "Sample_Group,Sample_Volume,Sample_Position,Sample_Slot,Final_Position,Final_Slot\n1,70,B2,1,A1,5\n1,17,A2,2,B1,5\n1,70,B2,3,A1,5\n1,17,A2,4,B1,5\n1,105,A2,1,B1,5\n1,37,B2,2,A1,5\n1,17,A2,3,B1,5\n1,37,A2,4,B1,5\n1,17,A2,1,B2,5\n1,55,B2,2,A2,5\n2,15,A1,3,A1,5\n2,72,B1,4,B1,5\n2,17,A1,1,B1,5\n2,17,A1,2,B1,5\n2,25,A1,3,B1,5\n2,17,A1,4,B1,6\n2,17,B1,1,A1,6\n2,17,A2,2,B1,6\n2,77,B2,3,A2,6\n2,45,A2,4,B2,6\n3,17,A2,1,A1,6\n3,18,B1,2,B1,6\n3,17,A3,3,A1,6\n3,18,B1,4,A1,6\n3,17,A1,1,B1,6\n3,18,A2,2,B1,6\n3,17,B1,3,A1,6\n3,18,A2,4,B1,6\n",
            "label": "Upload CSV Input File (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "uploaded_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Temperature Module on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "labware 2 on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "labware 3 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "Temperature Module 2 on Temperature Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "labware 5 on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "labware 6 on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Reservoir on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "labware 11 on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Steve Plonk",
        "title": "Sample Mixing"
    },
    "modules": []
}