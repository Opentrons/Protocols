{
    "content": "import time\n\nmetadata = {\n    'protocolName': '''Opentrons Heater Shaker Module beta test''',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    # get parameter values from json above\n    [hs_temp, hs_rpm, time_shake, every_nth_col, labware_hs, labware_source,\n     labware_dest, tfer_vol, pip, pip_side] = get_values(  # noqa: F821\n      'hs_temp', 'hs_rpm', 'time_shake', 'every_nth_col', 'labware_hs',\n      'labware_source', 'labware_dest', 'tfer_vol', 'pip', 'pip_side')\n\n    ctx.set_rail_lights(True)\n\n    # selected pipette, corresponding tips in slot 11\n    tipmap = {'p20_multi_gen2': 'opentrons_96_tiprack_20ul',\n              'p20_single_gen2': 'opentrons_96_tiprack_20ul',\n              'p300_multi_gen2': 'opentrons_96_tiprack_300ul',\n              'p300_single_gen2': 'opentrons_96_tiprack_300ul',\n              'p1000_single_gen2': 'opentrons_96_tiprack_1000ul'\n              }\n\n    tips = [ctx.load_labware(\n     tipmap.get(pip), str(slot)) for slot in [11]]\n\n    pipette = ctx.load_instrument(\n        pip, pip_side, tip_racks=tips)\n\n    # heater shaker module in slot 1, selected plate\n    hs_mod = ctx.load_module('heaterShakerModuleV1', '1')\n\n    hs_plate = hs_mod.load_labware(\n     labware_hs, 'Heater Shaker Plate')\n\n    # open and then close the latch\n    hs_mod.open_labware_latch()\n    ctx.comment(\" latch status {}\".format(hs_mod.labware_latch_status))\n    hs_mod.close_labware_latch()\n    ctx.comment(\" latch status {}\".format(hs_mod.labware_latch_status))\n\n    # set target temperature and proceed without waiting\n    hs_mod.set_target_temperature(celsius=hs_temp)\n    ctx.comment(\n     \"Heater Shaker current temperature {}\".format(hs_mod.current_temperature))\n\n    # selected source labware\n    source = ctx.load_labware(\n     labware_source, '3', 'source')\n\n    # selected dest labware\n    dest = ctx.load_labware(\n     labware_dest, '6', 'destination')\n\n    def select_wells(selectedlabware, n, mode=pip.split('_')[1]):\n        \"\"\"\n        Return list of wells in every nth column.\n\n        always in row A unless mode is 'single'\n        if mode is 'single', listed wells span range of rows\n        \"\"\"\n        num_cols = len(selectedlabware.columns())\n        num_rows = len(selectedlabware.columns()[0])\n\n        # avoid labware with fewer than 8 rows with multi\n        if num_rows < 8 and pip.split('_')[1] != 'single':\n            # unless it is a reservoir\n            if selectedlabware.wells()[0].width is not None:\n                if selectedlabware.wells()[0].width < 70:\n                    raise Exception(\n                        '''Labware {} incompatible with\n                        {}-channel pipette.'''.format(\n                            selectedlabware, pip.split('_')[1]))\n            else:\n                raise Exception(\n                        '''Labware {} incompatible with\n                        {}-channel pipette.'''.format(\n                            selectedlabware, pip.split('_')[1]))\n\n        # always row A unless mode is single\n        index_list = num_cols*[*range(num_rows)\n                               ] if mode == 'single' else num_cols*[0]\n\n        # every nth column\n        return [column[index] for column, index in zip(\n                selectedlabware.columns()[:num_cols:n],\n                index_list[:num_cols:n])]\n\n    source_wells = select_wells(source, len(source.columns()), mode='standard')\n\n    hs_wells = select_wells(hs_plate, every_nth_col)\n\n    # use only 1st dest column when it is a reservoir\n    if dest.wells()[0].width is not None:\n        if dest.wells()[0].width >= 70:\n            dn = len(dest.columns())\n    else:\n        dn = 1\n\n    d = len(hs_wells)*select_wells(dest, dn)\n    dest_wells = d[:len(hs_wells)]\n\n    for selection, name in zip(\n     [source_wells, hs_wells, dest_wells],\n     ['source', 'heater shaker', 'destination']):\n        ctx.comment(\"Selected {0} wells {1}\".format(name, selection))\n\n    # transfer from source to heater shaker\n    ctx.comment(\n     \"Heater Shaker current temperature {}\".format(hs_mod.current_temperature))\n\n    pipette.transfer(tfer_vol, source_wells, hs_wells, touch_tip=True)\n\n    # shaking steps\n    ctx.comment(\n     \"Heater Shaker current temperature {}\".format(hs_mod.current_temperature))\n\n    # wait for previously set temperature\n    hs_mod.wait_for_temperature()\n\n    ctx.comment(\n     \"Heater Shaker current temperature {}\".format(hs_mod.current_temperature))\n\n    # start shaking\n    ctx.comment(\" current speed {} \".format(hs_mod.current_speed))\n    hs_mod.set_and_wait_for_shake_speed(rpm=hs_rpm)\n    ctx.delay(seconds=1)\n    ctx.comment(\" current speed {} \".format(hs_mod.current_speed))\n\n    # get shaking start time\n    start = time.time()\n\n    # demo pipetting steps (NOT targeting the heater shaker) during shaking\n    pipette.pick_up_tip()\n    pipette.mix(10, 10, dest_wells[0])\n    pipette.drop_tip()\n\n    # wait until the shake time has elapsed\n    if not ctx.is_simulating():\n        while time.time() - start < time_shake*60:\n            continue\n\n    # stop shaking\n    hs_mod.deactivate_shaker()\n    ctx.comment(\" current speed {} \".format(hs_mod.current_speed))\n\n    # transfer from heater shaker to destination\n    pipette.transfer(0.8*tfer_vol, hs_wells, dest_wells, touch_tip=True)\n\n    # deactivate heater, open latch\n    hs_mod.deactivate_heater()\n    hs_mod.open_labware_latch()\n    ctx.comment(\" latch status {}\".format(hs_mod.labware_latch_status))\n\n    ctx.comment(\n     '''Process Complete.''')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 42,
            "label": "Target Temperature for Heater Shaker (37-95 degrees Celsius)",
            "name": "hs_temp",
            "type": "int"
        },
        {
            "default": 1500,
            "label": "Target Shaking Speed for Heater Shaker (recommended 200-2000 rpm, up to 3000 is possible)",
            "name": "hs_rpm",
            "type": "int"
        },
        {
            "default": 2,
            "label": "Duration of Time for Shaking of the Heater Shaker (minutes)",
            "name": "time_shake",
            "type": "float"
        },
        {
            "default": 6,
            "label": "Target Every Nth Column of Heater Shaker Labware for Dispense (n)",
            "name": "every_nth_col",
            "type": "int"
        },
        {
            "label": "Labware on the Heater Shaker",
            "name": "labware_hs",
            "options": [
                {
                    "label": "opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep",
                    "value": "opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep"
                },
                {
                    "label": "opentrons_flat_plate_adapter_corning_384_wellplate_112ul_flat",
                    "value": "opentrons_flat_plate_adapter_corning_384_wellplate_112ul_flat"
                },
                {
                    "label": "opentrons_96_flat_bottom_adapter_nest_wellplate_200ul_flat",
                    "value": "opentrons_96_flat_bottom_adapter_nest_wellplate_200ul_flat"
                },
                {
                    "label": "opentrons_96_pcr_plate_adapter_nest_wellplate_100ul_pcr_full_skirt",
                    "value": "opentrons_96_pcr_plate_adapter_nest_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "opentrons_96_pcr_adapter_armadillo_wellplate_200ul",
                    "value": "opentrons_96_pcr_adapter_armadillo_wellplate_200ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for the Source (well plate or reservoir from Opentrons Labware Library)",
            "name": "labware_source",
            "options": [
                {
                    "label": "nest_12_reservoir_15ml",
                    "value": "nest_12_reservoir_15ml"
                },
                {
                    "label": "usascientific_12_reservoir_22ml",
                    "value": "usascientific_12_reservoir_22ml"
                },
                {
                    "label": "nest_1_reservoir_195ml",
                    "value": "nest_1_reservoir_195ml"
                },
                {
                    "label": "axygen_1_reservoir_90ml",
                    "value": "axygen_1_reservoir_90ml"
                },
                {
                    "label": "agilent_1_reservoir_290ml",
                    "value": "agilent_1_reservoir_290ml"
                },
                {
                    "label": "nest_96_wellplate_100ul_pcr_full_skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "biorad_96_wellplate_200ul_pcr",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "corning_384_wellplate_112ul_flat",
                    "value": "corning_384_wellplate_112ul_flat"
                },
                {
                    "label": "nest_96_wellplate_200ul_flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "corning_96_wellplate_360ul_flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "nest_96_wellplate_2ml_deep",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "usascientific_96_wellplate_2.4ml_deep",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                },
                {
                    "label": "thermoscientificnunc_96_wellplate_1300ul",
                    "value": "thermoscientificnunc_96_wellplate_1300ul"
                },
                {
                    "label": "thermoscientificnunc_96_wellplate_2000ul",
                    "value": "thermoscientificnunc_96_wellplate_2000ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for the Destination (well plate or reservoir from Opentrons Labware Library)",
            "name": "labware_dest",
            "options": [
                {
                    "label": "nest_96_wellplate_100ul_pcr_full_skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                },
                {
                    "label": "nest_12_reservoir_15ml",
                    "value": "nest_12_reservoir_15ml"
                },
                {
                    "label": "usascientific_12_reservoir_22ml",
                    "value": "usascientific_12_reservoir_22ml"
                },
                {
                    "label": "nest_1_reservoir_195ml",
                    "value": "nest_1_reservoir_195ml"
                },
                {
                    "label": "axygen_1_reservoir_90ml",
                    "value": "axygen_1_reservoir_90ml"
                },
                {
                    "label": "agilent_1_reservoir_290ml",
                    "value": "agilent_1_reservoir_290ml"
                },
                {
                    "label": "biorad_96_wellplate_200ul_pcr",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "corning_384_wellplate_112ul_flat",
                    "value": "corning_384_wellplate_112ul_flat"
                },
                {
                    "label": "nest_96_wellplate_200ul_flat",
                    "value": "nest_96_wellplate_200ul_flat"
                },
                {
                    "label": "corning_96_wellplate_360ul_flat",
                    "value": "corning_96_wellplate_360ul_flat"
                },
                {
                    "label": "nest_96_wellplate_2ml_deep",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "usascientific_96_wellplate_2.4ml_deep",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                },
                {
                    "label": "thermoscientificnunc_96_wellplate_1300ul",
                    "value": "thermoscientificnunc_96_wellplate_1300ul"
                },
                {
                    "label": "thermoscientificnunc_96_wellplate_2000ul",
                    "value": "thermoscientificnunc_96_wellplate_2000ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 100,
            "label": "Transfer Volume (uL)",
            "name": "tfer_vol",
            "type": "float"
        },
        {
            "label": "Select a Pipette",
            "name": "pip",
            "options": [
                {
                    "label": "p300_multi_gen2",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "p20_multi_gen2",
                    "value": "p20_multi_gen2"
                },
                {
                    "label": "p20_single_gen2",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "p300_single_gen2",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "p1000_single_gen2",
                    "value": "p1000_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Selected Pipette is Mounted on which side? (Right or Left)",
            "name": "pip_side",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Heater Shaker Plate on Heater-Shaker Module GEN1 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep"
        },
        {
            "name": "source on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "destination on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "protocolName": "Opentrons Heater Shaker Module beta test"
    },
    "modules": [
        {
            "name": "HeaterShakerContext at Heater-Shaker Module GEN1 on 1 lw Heater Shaker Plate on Heater-Shaker Module GEN1 on 1",
            "share": false,
            "slot": "1",
            "type": "heatershaker"
        }
    ]
}