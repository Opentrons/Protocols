{
    "content": "from opentrons import protocol_api\nfrom opentrons import types\nfrom opentrons.protocol_api.labware import Well\nimport math\nfrom types import MethodType\nimport subprocess\n\nmetadata = {\n    'protocolName': 'Omega Bio-Tek Mag-Bind Plant DNA DS Kit',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'\n}\n\nAUDIO_FILE_PATH = '/etc/audio/speaker-test.mp3'\n\n\ndef run_quiet_process(command):\n    subprocess.check_output('{} &> /dev/null'.format(command), shell=True)\n\n\ndef test_speaker():\n    print('Speaker')\n    print('Next\\t--> CTRL-C')\n    try:\n        run_quiet_process('mpg123 {}'.format(AUDIO_FILE_PATH))\n    except KeyboardInterrupt:\n        pass\n        print()\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n    [\n     _m300_mount,\n     _num_samps,\n     _samp_labware,\n     _elution_vol\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n         '_m300_mount',\n         '_num_samps',\n         '_samp_labware',\n         '_elution_vol')\n\n    if not 1 <= _num_samps <= 96:\n        raise Exception(\"The 'Number of Samples' should be between 1 and 96\")\n\n    # define all custom variables above here with descriptions\n\n    m300_mount = _m300_mount  # mount for 8-channel p300 pipette\n    num_cols = math.ceil(_num_samps/8)  # number of sample columns\n    samp_labware = _samp_labware  # labware containing sample\n    elution_vol = _elution_vol  # volume of elution buffer\n\n    # m300_mount = 'left'\n    # num_cols = 1\n    # samp_labware = 'nest_96_wellplate_2ml_deep'\n    # elution_vol = 100\n    # load modules\n    mag_deck = ctx.load_module('magnetic module gen2', 7)\n\n    # load labware\n    rsvr_12 = [ctx.load_labware('nest_12_reservoir_15ml', s) for s in [2, 3]]\n    rsvr_1 = ctx.load_labware('nest_1_reservoir_195ml', 10)\n    pcr_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt', 1)\n    samp_plate = ctx.load_labware(samp_labware, 4)\n    mag_plate = mag_deck.load_labware('nest_96_wellplate_2ml_deep')\n\n    # load tipracks\n    tips = [\n        ctx.load_labware(\n            'opentrons_96_filtertiprack_200ul', s) for s in [5, 6, 8, 9, 11]\n            ]\n    all_tips = [t for rack in tips for t in rack.rows()[0]]\n    t_start = 0\n    t_end = int(num_cols)\n\n    # load instrument\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount, tip_racks=tips)\n\n    # extend well objects for improved liquid handling\n    class WellH(Well):\n        def __init__(self, well, min_height=0.5, comp_coeff=1.1,\n                     current_volume=0):\n            super().__init__(well._impl)\n            self.well = well\n            # specified minimum well bottom clearance\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n            # specified starting volume in ul\n            self.current_volume = current_volume\n            # cross sectional area\n            if self.diameter is not None:\n                self.radius = self.diameter/2\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            else:\n                cse = None\n            self.cse = cse\n            # initial liquid level in mm from start vol\n            if cse:\n                self.height = (current_volume/cse)\n            else:\n                raise Exception(\"\"\"Labware definition must\n                supply well radius or well length and width.\"\"\")\n            if self.height < min_height:\n                self.height = min_height\n            elif self.height > well.parent.highest_z:\n                raise Exception(\"\"\"Specified liquid volume\n                can not exceed the height of the labware.\"\"\")\n\n        def height_dec(self, vol, ppt, bottom=False):\n            # decrement height (mm)\n            dh = (vol/self.cse)*self.comp_coeff\n            # tip immersion (mm) as fraction of tip length\n            mm_immersed = 0.05*ppt._tip_racks[0].wells()[0].depth\n            # decrement til target reaches specified min clearance\n            self.height = self.height - dh if (\n             (self.height - dh - mm_immersed) > self.min_height\n             ) else self.min_height + mm_immersed\n            self.current_volume = self.current_volume - vol if (\n             self.current_volume - vol > 0) else 0\n            tip_ht = self.height - mm_immersed if bottom is False else bottom\n            return(self.well.bottom(tip_ht))\n\n        def height_inc(self, vol, top=False):\n            # increment height (mm)\n            ih = (vol/self.cse)*self.comp_coeff\n            # keep calculated liquid ht between min clearance and well depth\n            self.height = self.min_height if (\n             self.height < self.min_height) else self.height\n            self.height = (self.height + ih) if (\n             (self.height + ih) < self.depth) else self.depth\n            # increment\n            self.current_volume += vol\n            if top is False:\n                tip_ht = self.height\n                return(self.well.bottom(tip_ht))\n            else:\n                return(self.well.top())\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n    def aspirate_h(self, vol, source, rate=1, bottom=False):\n        self.aspirate(\n         vol, source.height_dec(vol, self, bottom=bottom), rate=rate)\n\n    def dispense_h(self, vol, dest, rate=1, top=False):\n        self.dispense(vol, dest.height_inc(vol, top=top), rate=rate)\n\n    def slow_tip_withdrawal(\n     self, speed_limit, well_location, to_surface=False):\n        if self.mount == 'right':\n            axis = 'A'\n        else:\n            axis = 'Z'\n        previous_limit = None\n        if axis in ctx.max_speeds.keys():\n            for key, value in ctx.max_speeds.items():\n                if key == axis:\n                    previous_limit = value\n        ctx.max_speeds[axis] = speed_limit\n        if to_surface is False:\n            self.move_to(well_location.top())\n        else:\n            if isinstance(well_location, WellH):\n                self.move_to(well_location.bottom().move(types.Point(\n                 x=0, y=0, z=well_location.height+(\n                  20*(self._tip_racks[0].wells()[0].depth / 88)))))\n            else:\n                self.move_to(well_location.center())\n        ctx.max_speeds[axis] = previous_limit\n\n    def custom_pick_up(self, loc=None):\n        nonlocal t_start\n        nonlocal t_end\n        \"\"\"`custom_pick_up` will pause the protocol when all tip boxes are out of\n        tips, prompting the user to replace all tip racks. Once tipracks are\n        reset, the protocol will start picking up tips from the first tip\n        box as defined in the slot order when assigning the labware definition\n        for that tip box. `pick_up()` will track tips for both pipettes if\n        applicable.\n\n        :param loc: User can manually specify location for tip pick up\n        \"\"\"\n        if loc:\n            self.pick_up_tip(loc)\n        else:\n            try:\n                self.pick_up_tip()\n            except protocol_api.labware.OutOfTipsError:\n                flash_lights()\n                ctx.pause(\"Replace empty tip racks\")\n                self.reset_tipracks()\n                t_start = 0\n                t_end = int(num_cols)\n                ctx.set_rail_lights(True)\n                self.pick_up_tip()\n\n    # bind additional methods to pipettes\n    for met in [aspirate_h, dispense_h, slow_tip_withdrawal, custom_pick_up]:\n        setattr(\n         m300, met.__name__,\n         MethodType(met, m300))\n\n    # reagents\n    liquid_waste = rsvr_1.wells()[0].top()\n    cspl = [WellH(well) for well in rsvr_12[0].wells()[:6]]\n    for idx in range(num_cols):\n        cspl[idx//2].height_inc(720*8*1.1)\n\n    # helper functions\n    def flash_lights():\n        for _ in range(19):\n            ctx.set_rail_lights(not ctx.rail_lights_on)\n            ctx.delay(seconds=0.25)\n\n    def flow_rate(asp=92.86, disp=92.86, blow=92.86):\n        \"\"\"\n        This function can be used to quickly modify the flow rates of the m300\n        If no parameters are entered, the flow rates will be\n        reset.\n\n        :param asp: Aspiration flow rate, in uL/sec\n        :param disp: Dispense flow rate, in uL/sec\n        \"\"\"\n        m300.flow_rate.aspirate = asp\n        m300.flow_rate.dispense = disp\n        m300.flow_rate.blow_out = blow\n\n    def remove_supernatant(vol, src):\n        w = int(str(src).split(' ')[0][1:])\n        radi = float(src.width)/4 if src.width is not None else \\\n            float(src.diameter)/4\n        x0 = radi if w % 2 == 0 else -radi\n        while vol > 180:\n            m300.aspirate(180, src.bottom().move(types.Point(x=x0, y=0, z=1)))\n            m300.dispense(200, liquid_waste)\n            m300.blow_out()\n            m300.aspirate(20, liquid_waste)\n            vol -= 180\n        m300.aspirate(vol, src.bottom().move(types.Point(x=x0, y=0, z=0.7)))\n        m300.dispense(vol+20, liquid_waste)\n        m300.blow_out()\n        m300.aspirate(10, liquid_waste)\n\n    def wash(srcs, msg):\n        nonlocal t_start\n        nonlocal t_end\n\n        if mag_deck.status == 'engaged':\n            mag_deck.disengage()\n        ctx.comment(f'\\nPerforming wash step: {msg}\\n')\n        flow_rate()\n        for idx, col in enumerate(mag_samps_h):\n            m300.custom_pick_up()\n            src = srcs[idx//3]\n            for i in range(2):\n                flow_rate(asp=150, disp=150)\n                if i == 1:\n                    m300.dispense(20, src.top(-1))\n                    m300.dispense(20, src)\n                m300.mix(2, 200, src)\n                flow_rate()\n                m300.aspirate(200, src)\n                m300.slow_tip_withdrawal(10, src, to_surface=True)\n                m300.dispense(180, col.top(-2))\n                flow_rate(asp=10)\n                m300.aspirate(20, col.top())\n            m300.dispense(20, src.top())\n            flow_rate()\n            m300.mix(1, 140, src)\n            m300.aspirate(140, src)\n            m300.slow_tip_withdrawal(10, src, to_surface=True)\n            m300.dispense(140, col)\n            m300.mix(10, 100, col)\n            ctx.delay(seconds=5)\n            m300.slow_tip_withdrawal(10, col, to_surface=True)\n            m300.blow_out()\n            m300.touch_tip(speed=40)\n            m300.aspirate(10, col.top())\n            m300.drop_tip()\n\n        mag_deck.engage()\n        mag_msg = '\\nIncubating on Mag Deck for 3 minutes\\n'\n        ctx.delay(minutes=3, msg=mag_msg)\n\n        # Discard Supernatant\n        ctx.comment(f'\\nRemoving supernatant for wash: {msg}\\n')\n        t_start += num_cols\n        t_end += num_cols\n        for src, t_d in zip(mag_samps_h, all_tips[t_start:t_end]):\n            m300.custom_pick_up()\n            remove_supernatant(540, src)\n            m300.drop_tip(t_d)\n\n    # plate, tube rack maps\n    init_samps = samp_plate.rows()[0][:num_cols]\n    mag_samps = mag_plate.rows()[0][:num_cols]\n    mag_samps_h = [WellH(well) for well in mag_samps]\n    pcr_samps = pcr_plate.rows()[0][:num_cols]\n\n    # protocol\n    ctx.set_rail_lights(True)\n    # # Transfer 700\u00b5L CSPL Buffer + 20\u00b5L Prot K\n    # ctx.comment('\\nTransferring 720uL of CSPL Buffer + Proteinase K\\n')\n    #\n    # m300.custom_pick_up()\n    # for idx, col in enumerate(init_samps):\n    #     src = cspl[idx//2]\n    #     for _ in range(4):\n    #         m300.aspirate_h(180, src)\n    #         m300.slow_tip_withdrawal(10, src, to_surface=True)\n    #         m300.dispense(180, col.top(-2))\n    # m300.drop_tip()\n    #\n    # flash_lights()\n    # ctx.pause('Please remove samples and incubate at 56C for 30 minutes, \\\n    # then centrifuge at 4000g for 10 minutes. Once complete, please replace \\\n    # samples on the deck and place ensure 12-well reservoirs are filled with \\\n    # necessary reagents in deck slots 2 and 3. When ready, click RESUME.')\n    # ctx.set_rail_lights(True)\n    # Creating reagent variables for second part of protocol\n    rbb = [WellH(well, current_volume=0) for well in rsvr_12[0].wells()[:6]]\n    cspw1 = [WellH(well) for well in rsvr_12[0].wells()[6:10]]\n    cspw2 = [WellH(well) for well in rsvr_12[1].wells()[:4]]\n    spm1 = [WellH(well) for well in rsvr_12[1].wells()[4:8]]\n    spm2 = [WellH(well) for well in rsvr_12[1].wells()[8:]]\n    elution_buffer = [WellH(well) for well in rsvr_12[0].wells()[10:]]\n\n    for idx in range(num_cols):\n        rbb[idx//2].height_inc(525*8*1.1)\n        cspw1[idx//3].height_inc(500*8*1.1)\n        cspw2[idx//3].height_inc(500*8*1.1)\n        spm1[idx//3].height_inc(500*8*1.1)\n        spm2[idx//3].height_inc(500*8*1.1)\n        cspw1[idx//6].height_inc(elution_vol*8*1.1)\n\n    ctx.comment('\\nTransferring 500uL of sample to plate on MagDeck\\n')\n\n    flow_rate(asp=20)\n    for src, dest in zip(init_samps, mag_samps_h):\n        m300.custom_pick_up()\n        for i in range(2):\n            m300.aspirate(20, src.top())\n            m300.aspirate(180, src)\n            m300.slow_tip_withdrawal(10, src)\n            m300.dispense_h(180, dest)\n            m300.slow_tip_withdrawal(10, dest, to_surface=True)\n            m300.dispense(20, dest.bottom(5))\n        m300.aspirate(20, src.top())\n        m300.aspirate(140, src)\n        m300.dispense_h(140, dest)\n        m300.slow_tip_withdrawal(10, dest, to_surface=True)\n        m300.dispense(20, dest.bottom(5))\n        m300.drop_tip()\n    flow_rate()\n\n    # Transfer 5uL RNAse + 500uL RBB buffer + 20uL Mag-Bind Beads\n    ctx.comment('\\nTransferring 5uL RNAse + 500uL RBB buffer + \\\n    20uL Mag-Bind Beads\\n')\n\n    m300.custom_pick_up()\n    for idx, col in enumerate(mag_samps):\n        src = rbb[idx//2]\n        for i in range(2):\n            if i == 0:\n                m300.aspirate(20, src.top())\n            m300.aspirate(180, src)\n            m300.slow_tip_withdrawal(10, src, to_surface=True)\n            m300.dispense(200, col.top(-2))\n            m300.blow_out()\n            m300.aspirate(20, col.top(-2))\n        m300.aspirate(165, src)\n        m300.slow_tip_withdrawal(10, src, to_surface=True)\n        m300.dispense(185, col.top(-2))\n    m300.drop_tip()\n\n    incubate_msg = '\\nIncubating at room temperature for 10 minutes\\\n     plus mixing\\n'\n    ctx.comment(incubate_msg)\n\n    for col, t_d in zip(mag_samps, all_tips[t_start:t_end]):\n        m300.custom_pick_up()\n        m300.aspirate(20, col.top())\n        m300.mix(8, 150, col)\n        m300.dispense(20, col.top(-2))\n        m300.blow_out(col.top(-2))\n        m300.touch_tip()\n        m300.drop_tip(t_d)\n\n    for _ in range(2):\n        if num_cols < 3:\n            ctx.delay(minutes=3, seconds=30)\n        for col, t_d in zip(mag_samps, all_tips[t_start:t_end]):\n            m300.custom_pick_up(t_d)\n            m300.aspirate(20, col.top())\n            m300.mix(8, 150, col)\n            m300.dispense(20, col.top(-2))\n            m300.blow_out(col.top(-2))\n            m300.touch_tip()\n            m300.drop_tip(t_d)\n\n    t_start += num_cols\n    t_end += num_cols\n    mag_deck.engage()\n    mag_msg = '\\nIncubating on Mag Deck for 3 minutes\\n'\n    ctx.delay(minutes=3, msg=mag_msg)\n\n    # Discard Supernatant\n    ctx.comment('\\nRemoving supernatant\\n')\n    for src, t_d in zip(mag_samps_h, all_tips[t_start:t_end]):\n        m300.custom_pick_up()\n        remove_supernatant(1080, src)\n        m300.drop_tip(t_d)\n\n    # Wash with 500uL CSPW1 Buffer\n    wash(cspw1, 'CSPW1')\n\n    # Wash with 500uL CSPW2 Buffer\n    wash(cspw2, 'CSPW2')\n\n    # Wash with SPM Buffer (1)\n    wash(spm1, 'SPM (first wash)')\n\n    # Wash with SPM Buffer (2)\n    wash(spm2, 'SPM (second wash)')\n\n    # Air dry for 10 minutes\n    mag_deck.engage()\n\n    air_dry_msg = '\\nAir drying the beads for 10 minutes. \\\n    Please add elution buffer at 65C to 12-well reservoir.\\n'\n    ctx.delay(minutes=10, msg=air_dry_msg)\n    flash_lights()\n    ctx.pause('Please check the Well Plate')\n\n    mag_deck.disengage()\n    # Add Elution Buffer\n    ctx.comment(f'\\nAdding {elution_vol}uL Elution Buffer to samples\\n')\n\n    for idx, col in enumerate(mag_samps_h):\n        src = elution_buffer[idx//6]\n        m300.custom_pick_up()\n        m300.aspirate(elution_vol, src)\n        m300.slow_tip_withdrawal(10, src, to_surface=True)\n        m300.dispense_h(elution_vol, col)\n        m300.mix(10, 100, col)\n        m300.slow_tip_withdrawal(10, col, to_surface=True)\n        m300.drop_tip()\n\n    flash_lights()\n    if not ctx.is_simulating():\n        test_speaker()\n    ctx.pause('Please remove samples and incubate at 65C for 5 minutes.\\\n    When complete, replace samples and click RESUME\\n')\n    ctx.set_rail_lights(True)\n\n    # Transfer elution to PCR plate\n    for col in mag_samps_h:\n        m300.custom_pick_up()\n        m300.mix(10, 100, col)\n        m300.slow_tip_withdrawal(10, col, to_surface=True)\n        m300.blow_out(col.top(-3))\n        m300.touch_tip(speed=40)\n        m300.drop_tip()\n\n    mag_deck.engage()\n    mag_msg = '\\nIncubating on Mag Deck for 3 minutes\\n'\n    ctx.delay(minutes=3, msg=mag_msg)\n\n    ctx.comment(f'\\nTransferring {elution_vol}uL to final PCR plate\\n')\n    t_start += num_cols\n    if t_start >= 60:\n        t_start -= 60\n\n    flow_rate(asp=20)\n    for src, dest, tip in zip(mag_samps, pcr_samps, all_tips[t_start:]):\n        w = int(str(src).split(' ')[0][1:])\n        radi = float(src.width)/4 if src.width is not None else \\\n            float(src.diameter)/4\n        x0 = radi if w % 2 == 0 else -radi\n        m300.custom_pick_up()\n        m300.aspirate(\n            elution_vol, src.bottom().move(types.Point(x=x0, y=0, z=1)))\n        m300.dispense(elution_vol, dest)\n        m300.drop_tip(tip)\n\n    mag_deck.disengage()\n    ctx.comment('\\nProtocol complete! Please store samples at -20C or \\\n    continue processing')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Pipette Mount",
            "name": "_m300_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 8,
            "label": "Number of Samples",
            "name": "_num_samps",
            "type": "int"
        },
        {
            "default": "nest_96_wellplate_2ml_deep",
            "label": "Labware for Input Samples",
            "name": "_samp_labware",
            "type": "str"
        },
        {
            "default": 100,
            "label": "Elution Volume (in \u00b5L)",
            "name": "_elution_vol",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on Magnetic Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST 1 Well Reservoir 195 mL on 10",
            "share": false,
            "slot": "10",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Omega Bio-Tek Mag-Bind Plant DNA DS Kit",
        "source": "Custom Protocol Request"
    },
    "modules": []
}