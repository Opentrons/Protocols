{
    "content": "from opentrons.protocol_api.labware import Well\nimport csv\nimport math\n\nmetadata = {\n    'title': 'RNA Normalization',\n    'author': 'Steve Plonk',\n    'apiLevel': '2.10'\n}\n\n\ndef run(ctx):\n\n    [clearance_rna, clearance_dest, labware_rna, labware_dest, vol_h2o,\n     uploaded_csv] = get_values(  # noqa: F821\n        \"clearance_rna\", \"clearance_dest\", \"labware_rna\", \"labware_dest\",\n        \"vol_h2o\", \"uploaded_csv\")\n\n    ctx.set_rail_lights(True)\n    ctx.delay(seconds=10)\n\n    if not 500 <= vol_h2o <= 1500:\n        raise Exception(\n         'Starting volume of water must be between 500 and 1500 uL per tube.')\n\n    tfers = [line for line in csv.DictReader(uploaded_csv.splitlines())]\n\n    sample_count = len(tfers)\n    if not 1 <= sample_count <= 96:\n        raise Exception('Invalid number of samples (must be 1-96).')\n\n    # p300 single, p20 single, tips\n    tips20 = [ctx.load_labware(\n     'opentrons_96_filtertiprack_20ul', str(slot)) for slot in [10]]\n    tips300 = [ctx.load_labware(\n     'opentrons_96_filtertiprack_200ul', str(slot)) for slot in [11]]\n    p20s = ctx.load_instrument(\"p20_single_gen2\", 'left', tip_racks=tips20)\n    p300s = ctx.load_instrument(\"p300_single_gen2\", 'right', tip_racks=tips300)\n\n    # input RNA samples\n    if labware_rna == \"opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap\":\n        rna = [ctx.load_labware(labware_rna, slot, \"Input RNA Tube Rack\")\n               for slot in [2, 3, 5, 6][:math.ceil(sample_count / 24)]]\n    elif labware_rna == \"nest_96_wellplate_2ml_deep\":\n        rna = ctx.load_labware(labware_rna, '2', \"Input RNA Plate\")\n    else:\n        raise Exception(\n         'Adjustments to the protocol are needed for this labware.')\n\n    # water tubes with tracking of volume and liquid height\n    rack = ctx.load_labware(\n     'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n     '4', 'Reagent Rack')\n\n    class WellH(Well):\n        def __init__(self, well, min_height=5, comp_coeff=1.15,\n                     current_volume=0):\n            super().__init__(well._impl)\n            self.well = well\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n            self.current_volume = current_volume\n            if self.diameter is not None:\n                self.radius = self.diameter/2\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            self.height = round(current_volume/cse)\n            if self.height < min_height:\n                self.height = min_height\n            elif self.height > well.parent.highest_z:\n                raise Exception(\"\"\"Specified liquid volume\n                can not exceed the height of the labware.\"\"\")\n\n        def height_dec(self, vol):\n            if self.diameter is not None:\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            dh = round((vol/cse)*self.comp_coeff)\n            if self.height - dh > self.min_height:\n                self.height = self.height - dh\n            else:\n                self.height = self.min_height\n            if self.current_volume - vol > 0:\n                self.current_volume = self.current_volume - vol\n            else:\n                self.current_volume = 0\n            return(self.well.bottom(self.height))\n\n        def height_inc(self, vol, top=False):\n            if self.diameter is not None:\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            ih = round((vol/cse)*self.comp_coeff)\n            if self.height < self.min_height:\n                self.height = self.min_height\n            if self.height + ih < self.depth:\n                self.height = self.height + ih\n            else:\n                self.height = self.depth\n            self.current_volume += vol\n            if top is False:\n                return(self.well.bottom(self.height))\n            else:\n                return(self.well.top())\n\n    water_tubes = []\n    num_tubes = math.ceil(sum([float(\n     tfer['water vol']) for tfer in tfers]) / vol_h2o)\n    for index, tube in enumerate(rack.wells()[:num_tubes]):\n        new = WellH(rack.wells()[index], min_height=1, current_volume=vol_h2o)\n        water_tubes.append(new)\n\n    ctx.pause(\n     \"Please place {0} tubes each containing {1} uL water in {2}\".format(\n      num_tubes, vol_h2o, rack))\n\n    def wtr_tubes():\n        yield from water_tubes\n\n    water_tube = wtr_tubes()\n\n    water = next(water_tube)\n\n    def distribute_water(pip, lst, disposal):\n        nonlocal water\n        if lst != []:\n            disp = []\n            in_tip = 0\n            pip.pick_up_tip()\n            pip.aspirate(disposal, water.height_dec(disposal))\n            in_tip += disposal\n            for index, tfer in enumerate(lst):\n                vol = float(tfer['water vol'])\n                dst = dest_plate.wells_by_name()[tfer['dest well']]\n                if water.current_volume <= 50:\n                    try:\n                        water = next(water_tube)\n                    except StopIteration:\n                        ctx.comment(\"The next water tube was not found.\")\n                if vol + in_tip > pip._tip_racks[0].wells()[0].max_volume:\n                    for d in disp:\n                        pip.dispense(float(d[0]), d[1].bottom(clearance_dest))\n                    disp = []\n                    pip.dispense(disposal, water.height_inc(disposal))\n                    in_tip = 0\n                    pip.aspirate(disposal, water.height_dec(disposal))\n                    in_tip += disposal\n                pip.aspirate(vol, water.height_dec(vol))\n                in_tip += vol\n                disp.append((vol, dst))\n                if index == len(lst)-1:\n                    for d in disp:\n                        pip.dispense(float(d[0]), d[1].bottom(clearance_dest))\n            pip.drop_tip()\n\n    # 4 degree temperature module with destination plate\n    temp = ctx.load_module('temperature module gen2', '1')\n    dest_plate = temp.load_labware(\n     labware_dest, \"Destination Plate at 4 Degrees\")\n    temp.set_temperature(4)\n\n    # transfer water\n    small_tfers = []\n    big_tfers = []\n    for tfer in tfers:\n        vol = float(tfer['water vol'])\n        if vol <= 10:\n            small_tfers.append(tfer)\n        else:\n            big_tfers.append(tfer)\n\n    distribute_water(p20s, small_tfers, 2)\n\n    distribute_water(p300s, big_tfers, 15)\n\n    # transfer RNA and mix\n    for tfer in tfers:\n        vol = float(tfer['source vol'])\n        if vol <= 20:\n            pip = p20s\n        else:\n            pip = p300s\n        pip.transfer(\n         vol, rna[int(tfer['source rack or plate'])-1].wells_by_name(\n         )[tfer['source well']].bottom(clearance_rna),\n         dest_plate.wells_by_name(\n          )[tfer['dest well']].bottom(clearance_dest),\n         mix_after=(6, 20), new_tip='always')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 1,
            "label": "Well Bottom Clearance for RNA Aspiration (mm)",
            "name": "clearance_rna",
            "type": "float"
        },
        {
            "default": 1,
            "label": "Well Bottom Clearance for Dispense to Destination Plate (mm)",
            "name": "clearance_dest",
            "type": "float"
        },
        {
            "label": "Labware Containing Input RNA Samples",
            "name": "labware_rna",
            "options": [
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "nest_96_wellplate_2ml_deep",
                    "value": "nest_96_wellplate_2ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Destination Plate",
            "name": "labware_dest",
            "options": [
                {
                    "label": "opentrons_96_aluminumblock_biorad_wellplate_200ul",
                    "value": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 1000,
            "label": "Initial Volume of RNAse-Free Water in 1.5 mL Eppendorf Tube (uL)",
            "name": "vol_h2o",
            "type": "float"
        },
        {
            "default": "source rack or plate,source well,source vol,dest well,water vol\n1,A1,35,A1,15\n1,B1,12.5,B1,37.5\n1,C1,10,C1,40\n",
            "label": "Upload CSV Input File (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "uploaded_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Destination Plate at 4 Degrees on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
        },
        {
            "name": "Input RNA Tube Rack on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Reagent Rack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Steve Plonk",
        "title": "RNA Normalization"
    },
    "modules": []
}