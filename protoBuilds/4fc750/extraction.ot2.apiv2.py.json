{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\nimport contextlib\nimport threading\nfrom opentrons import protocol_api\n\nmetadata = {\n    'protocolName':\n        'Omega Mag-Bind\u00ae Blood & Tissue DNA 96 Kit - 250\u03bcL Blood Protocol',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.9'\n}\n\n\n\"\"\"\nHere is where you can modify the magnetic module engage height:\n\"\"\"\n\n\n# Definitions for deck light flashing\n@contextlib.contextmanager\ndef flashing_rail_lights(\n    protocol: protocol_api.ProtocolContext, seconds_per_flash_cycle=1.0\n):\n    \"\"\"Flash the rail lights on and off in the background.\n\n    Source: https://github.com/Opentrons/opentrons/issues/7742\n\n    Example usage:\n\n        # While the robot is doing nothing for 2 minutes, flash lights quickly.\n        with flashing_rail_lights(protocol, seconds_per_flash_cycle=0.25):\n            protocol.delay(minutes=2)\n\n    When the ``with`` block exits, the rail lights are restored to their\n    original state.\n\n    Exclusive control of the rail lights is assumed. For example, within the\n    ``with`` block, you must not call `ProtocolContext.set_rail_lights`\n    yourself, inspect `ProtocolContext.rail_lights_on`, or nest additional\n    calls to `flashing_rail_lights`.\n    \"\"\"\n    original_light_status = protocol.rail_lights_on\n\n    stop_flashing_event = threading.Event()\n\n    def background_loop():\n        while True:\n            protocol.set_rail_lights(not protocol.rail_lights_on)\n            # Wait until it's time to toggle the lights for the next flash or\n            # we're told to stop flashing entirely, whichever comes first.\n            got_stop_flashing_event = stop_flashing_event.wait(\n                timeout=seconds_per_flash_cycle/2\n            )\n            if got_stop_flashing_event:\n                break\n\n    background_thread = threading.Thread(\n        target=background_loop, name=\"Background thread for flashing rail \\\nlights\"\n    )\n\n    try:\n        if not protocol.is_simulating():\n            background_thread.start()\n        yield\n\n    finally:\n        # The ``with`` block might be exiting normally, or it might be exiting\n        # because something inside it raised an exception.\n        #\n        # This accounts for user-issued cancelations because currently\n        # (2021-05-04), the Python Protocol API happens to implement user-\n        # issued cancellations by raising an exception from internal API code.\n        if not protocol.is_simulating():\n            stop_flashing_event.set()\n            background_thread.join()\n\n        # This is questionable: it may issue a command to the API while the API\n        # is in an inconsistent state after raising an exception.\n        protocol.set_rail_lights(original_light_status)\n\n\n# Start protocol\ndef run(ctx):\n    [num_samples, deepwell_type, elution_type, res12_type, res1_type,\n     magdeck_gen, p300_gen, starting_vol, binding_buffer_vol, wash1_vol,\n     wash2_vol, elution_vol, mix_reps, settling_time, park_tips, tip_track,\n     flash] = get_values(  # noqa: F821\n        'num_samples', 'deepwell_type', 'elution_type', 'res12_type',\n        'res1_type', 'magdeck_gen', 'p300_gen', 'starting_vol',\n        'binding_buffer_vol', 'wash1_vol', 'wash2_vol', 'elution_vol',\n        'mix_reps', 'settling_time', 'park_tips', 'tip_track', 'flash')\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    magdeck = ctx.load_module(magdeck_gen, '1')\n    magdeck.disengage()\n    magplate = magdeck.load_labware(deepwell_type, 'deepwell plate')\n    res1 = ctx.load_labware(res12_type, '2', 'reagent reservoir 1')\n    res2 = ctx.load_labware(res12_type, '3', 'reagent reservoir 2')\n    elutionplate = ctx.load_labware(deepwell_type, '4', 'elution plate')\n    tips300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['6', '7', '8', '9', '10']]\n    waste_res = ctx.load_labware(res1_type, '11', 'Liquid Waste')\n    waste = waste_res.wells()[0].top()\n    num_cols = math.ceil(num_samples/8)\n    if park_tips:\n        parkingrack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '5', 'tiprack for parking')\n        parking_spots = parkingrack.rows()[0][:num_cols]\n    else:\n        tips300.insert(0, ctx.load_labware('opentrons_96_tiprack_300ul', '5',\n                                           '200\u00b5l filtertiprack'))\n        parking_spots = [None for none in range(12)]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(p300_gen, 'left', tip_racks=tips300)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    binding_buffer = res1.wells()[:3]\n    wash1 = res1.wells()[4:7]\n    wash2 = res1.wells()[7:10]\n    wash3 = res2.wells()[:3]\n    elution_solution = res2.wells()[4]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n\n    magdeck.disengage()  # just in case\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    tip_log = {'count': {}}\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                if 'tips300' in data:\n                    tip_log['count'][m300] = data['tips300']\n                else:\n                    tip_log['count'][m300] = 0\n        else:\n            tip_log['count'][m300] = 0\n    else:\n        tip_log['count'] = {m300: 0}\n\n    tip_log['tips'] = {\n        m300: [tip for rack in tips300 for tip in rack.rows()[0]]}\n    tip_log['max'] = {m300: len(tip_log['tips'][m300])}\n\n    def _pick_up(pip, loc=None):\n        nonlocal tip_log\n        if tip_log['count'][pip] == tip_log['max'][pip] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log['count'][pip] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log['tips'][pip][tip_log['count'][pip]])\n            tip_log['count'][pip] += 1\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n    drop_threshold = 120\n\n    def _drop(pip):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        if pip.type == 'multi':\n            drop_count += 8\n        else:\n            drop_count += 1\n        if drop_count >= drop_threshold:\n            # Setup for flashing lights notification to empty trash\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    with flashing_rail_lights(ctx, seconds_per_flash_cycle=1):\n                        ctx.pause('Please empty tips from waste before \\\nresuming.')\n            drop_count = 0\n\n    waste_vol = 0\n    # adjust 5ml for spilling\n    waste_threshold = waste_res.wells()[0].max_volume - 5000\n\n    def remove_supernatant(vol, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                if flash:\n                    if not ctx._hw_manager.hardware.is_simulator:\n                        with flashing_rail_lights(ctx,\n                                                  seconds_per_flash_cycle=1):\n                            ctx.pause('Please empty liquid waste (slot 11) \\\nbefore resuming.')\n\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            for _ in range(num_trans):\n                _waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, m.top())\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=20)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            _drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def bind(vol, park=True):\n        \"\"\"\n        `bind` will perform magnetic bead binding on each sample in the\n        deepwell plate. Each channel of binding beads will be mixed before\n        transfer, and the samples will be mixed with the binding beads after\n        the transfer. The magnetic deck activates after the addition to all\n        samples, and the supernatant is removed after bead bining.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n        for i, (well, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            num_trans = math.ceil(vol/200)\n            vol_per_trans = vol/num_trans\n            asp_per_chan = (0.95*res1.wells()[0].max_volume)//(vol_per_trans*8)\n            for t in range(num_trans):\n                chan_ind = int((i*num_trans + t)//asp_per_chan)\n                source = binding_buffer[chan_ind]\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, source.top())\n                for _ in range(8):\n                    m300.aspirate(180, source.bottom(0.5))\n                    m300.dispense(180, source.bottom(5))\n                m300.transfer(vol_per_trans, source, well.top(), air_gap=20,\n                              new_tip='never')\n                if t < num_trans - 1:\n                    m300.air_gap(20)\n            m300.mix(4, 200, well)\n            m300.blow_out(well.top(-2))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        ctx.delay(minutes=3, msg='Incubating off MagDeck for 3 minutes.')\n\n        # agitate after resuspension\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.mix(4, 200, loc)\n            m300.blow_out(m.top(-2))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        ctx.delay(minutes=3, msg='Incubating off MagDeck for 3 minutes.')\n\n        magdeck.engage()\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        # remove initial supernatant\n        remove_supernatant(vol+starting_vol, park=park)\n\n    def wash(vol, source, mix_reps=15, park=True, resuspend=True):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                m300.mix(mix_reps, 150, loc)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage()\n\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        remove_supernatant(vol, park=park)\n\n    def elute(vol, park=True):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.aspirate(vol, elution_solution)\n            m300.move_to(m.center())\n            m300.dispense(vol, loc)\n            m300.mix(mix_reps, 0.8*vol, loc)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        # agitate after resuspension\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.mix(10, 0.8*vol, loc)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        magdeck.engage()\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.transfer(vol, loc, e.bottom(5), air_gap=20, new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(20)\n            m300.drop_tip()\n\n    \"\"\"\n    Here is where you can call the methods defined above to fit your specific\n    protocol. The normal sequence is:\n    \"\"\"\n    bind(binding_buffer_vol, park=park_tips)\n    wash(wash1_vol, wash1, park=park_tips)\n    wash(wash1_vol, wash2, park=park_tips)\n    wash(wash2_vol, wash3, park=park_tips)\n    elute(elution_vol, park=park_tips)\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {'tips300': tip_log['count'][m300]}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples + controls (1-96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "96-deepwell extraction plate type",
            "name": "deepwell_type",
            "options": [
                {
                    "label": "USA Scientific",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                },
                {
                    "label": "NEST",
                    "value": "nest_96_wellplate_2ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "96-well elution plate type",
            "name": "elution_type",
            "options": [
                {
                    "label": "Bio-Rad",
                    "value": "biorad_96_wellplate_200ul_pcr"
                },
                {
                    "label": "NEST",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "12-well reagent reservoir type",
            "name": "res12_type",
            "options": [
                {
                    "label": "USA Scientific",
                    "value": "usascientific_12_reservoir_22ml"
                },
                {
                    "label": "NEST",
                    "value": "nest_12_reservoir_15ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "1-well waste reservoir type",
            "name": "res1_type",
            "options": [
                {
                    "label": "Agilent 290mL",
                    "value": "agilent_1_reservoir_290ml"
                },
                {
                    "label": "NEST 195mL",
                    "value": "nest_1_reservoir_195ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "magnetic module generation",
            "name": "magdeck_gen",
            "options": [
                {
                    "label": "GEN1",
                    "value": "magdeck"
                },
                {
                    "label": "GEN2",
                    "value": "magnetic module gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 multi-channel pipette generation",
            "name": "p300_gen",
            "options": [
                {
                    "label": "GEN1",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "GEN2",
                    "value": "p300_multi"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 250.0,
            "label": "intitial volume (sample + lysis buffer, in ul)",
            "name": "starting_vol",
            "type": "float"
        },
        {
            "default": 420.0,
            "label": "binding buffer + beads volume (in ul)",
            "name": "binding_buffer_vol",
            "type": "float"
        },
        {
            "default": 600.0,
            "label": "VHB wash volume (in ul, up to 500ul)",
            "name": "wash1_vol",
            "type": "float"
        },
        {
            "default": 600.0,
            "label": "SPM wash volume (in ul, up to 500ul)",
            "name": "wash2_vol",
            "type": "float"
        },
        {
            "default": 100.0,
            "label": "final elution volume (in ul)",
            "name": "elution_vol",
            "type": "float"
        },
        {
            "default": 5,
            "label": "mix repetitions for bead resuspension",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 2.0,
            "label": "bead settling time (in minutes)",
            "name": "settling_time",
            "type": "float"
        },
        {
            "label": "park tips",
            "name": "park_tips",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "flash robot on pause",
            "name": "flash",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "deepwell plate on Magnetic Module GEN1 on 1",
            "share": false,
            "slot": "1",
            "type": "usascientific_96_wellplate_2.4ml_deep"
        },
        {
            "name": "reagent reservoir 1 on 2",
            "share": false,
            "slot": "2",
            "type": "usascientific_12_reservoir_22ml"
        },
        {
            "name": "reagent reservoir 2 on 3",
            "share": false,
            "slot": "3",
            "type": "usascientific_12_reservoir_22ml"
        },
        {
            "name": "elution plate on 4",
            "share": false,
            "slot": "4",
            "type": "usascientific_96_wellplate_2.4ml_deep"
        },
        {
            "name": "tiprack for parking on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Liquid Waste on 11",
            "share": false,
            "slot": "11",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Omega Mag-Bind\u00ae Blood & Tissue DNA 96 Kit - 250\u03bcL Blood Protocol"
    },
    "modules": []
}