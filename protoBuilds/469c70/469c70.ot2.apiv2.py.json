{
    "content": "import math\n\n\nmetadata = {\n    'protocolName': 'Serial Dilution of Analyte Stock',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'\n}\n\n\ndef run(ctx):\n\n    [csv, num_tipracks, num_tipracks20, num_mix, asp_rate, disp_rate,\n        blowout_rate, p1000_mount, p20_mount] = get_values(  # noqa: F821\n        \"csv\", \"num_tipracks\", \"num_tipracks20\", \"num_mix\",\n        \"asp_rate\", \"disp_rate\",\n            \"blowout_rate\", \"p1000_mount\", \"p20_mount\")\n\n    list_of_rows = [[val.strip() for val in line.split(',')]\n                    for line in csv.splitlines()\n                    if line.split(',')[0].strip()][1:]\n\n    rack_type = 0\n    slot_num_source = 1\n    tube_source = 2\n    init_vol_tracking = 4\n    transfer_vol = 5\n    slot_num_dest = 6\n    dispense_height = 7\n    tube_dest = 8\n\n    slots_15 = []\n    slots_24 = []\n    for the in list_of_rows:\n        if the[rack_type] == \"24\":\n            slots_24.append(the[slot_num_source])\n\n        elif the[rack_type] == \"15\":\n            slots_15.append(the[slot_num_source])\n\n    slots_15 = list(set(slots_15))\n    slots_24 = list(set(slots_24))\n\n    # load labware\n    racks_15 = [ctx.load_labware(\n                    'opentrons_15_tuberack_falcon_15ml_conical',\n                    slot, label='SERIAL RACK') for slot in slots_15]\n    diluent_labware = ctx.load_labware('nest_1_reservoir_195ml', '3',\n                                       label='DILUTION RESERVOIR')\n    racks_24 = [ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap', slot,\n        label='STOCK RACK') for slot in slots_24]\n\n    tiprack1 = [ctx.load_labware('opentrons_96_tiprack_1000ul', slot)\n                for slot in ['6', '9', '11'][:int(num_tipracks)]]\n\n    tiprack20 = [ctx.load_labware('opentrons_96_tiprack_20ul', slot)\n                 for slot in ['8', '10'][:int(num_tipracks20)]]\n\n    # load instrument\n    p1000 = ctx.load_instrument('p1000_single_gen2', p1000_mount,\n                                tip_racks=tiprack1)\n    p20 = ctx.load_instrument('p20_single_gen2', p20_mount,\n                              tip_racks=tiprack20)\n\n    asp_rate = float(asp_rate)\n    disp_rate = float(disp_rate)\n    blowout_rate = float(blowout_rate)\n    num_mix = int(num_mix)\n    print(racks_15, diluent_labware, racks_24)\n\n    p1000.flow_rate.aspirate = p1000.flow_rate.aspirate*asp_rate\n    p1000.flow_rate.dispense = p1000.flow_rate.dispense*disp_rate\n    p1000.flow_rate.blow_out = p1000.flow_rate.blow_out*blowout_rate\n    p20.flow_rate.aspirate = p20.flow_rate.aspirate*asp_rate\n    p20.flow_rate.dispense = p20.flow_rate.dispense*disp_rate\n    p20.flow_rate.blow_out = p20.flow_rate.blow_out*blowout_rate\n\n    for the in list_of_rows:\n\n        # source and dest\n        source_labware = ctx.loaded_labwares[int(the[slot_num_source])]\n        dest_labware = ctx.loaded_labwares[int(the[slot_num_dest])]\n\n        # height tracking\n        if the[slot_num_source] in slots_15 or \\\n                the[slot_num_source] in slots_24:\n            v_naught = float(the[init_vol_tracking])*1000\n            radius = source_labware.wells()[0].diameter/2\n            h = v_naught/(math.pi*radius**2)*0.6\n            check_height = 0.5*source_labware.wells()[0].depth\n            asp_loc_z = h if h > check_height else 1\n\n        # transfer\n        if str(the[slot_num_source]) in slots_15:\n            source_well = the[tube_source]\n            asp_height = asp_loc_z\n        elif str(the[slot_num_source]) in slots_24:\n            source_well = the[tube_source]\n            asp_height = asp_loc_z\n        else:\n            if int(the[slot_num_source]) == 3:\n                source_well = 'A1'\n            else:\n                source_well = the[tube_source]\n            asp_height = 1\n\n        # variables\n        transfer_volume = float(the[transfer_vol])*1000\n        source = source_labware.wells_by_name()[source_well]\n        dest = dest_labware.wells_by_name()[the[tube_dest]]\n        if the[dispense_height].lower() == \"top\":\n            final_dest = dest.top()\n        elif the[dispense_height].lower() == \"middle\":\n            final_dest = dest.bottom(0.5*dest.depth)\n        else:\n            final_dest = dest.bottom(z=1)\n\n        if transfer_volume > 100:\n            pip = p1000\n        else:\n            pip = p20\n        pip.pick_up_tip()\n        pip.transfer(transfer_volume,\n                     source.bottom(asp_height),\n                     final_dest,\n                     new_tip='never',\n                     blow_out=True,\n                     blowout_location='destination well')\n        if str(the[slot_num_source]) == \"3\" and \\\n                pip == ctx.loaded_instruments[p1000_mount]:\n            pip.mix(num_mix,\n                    0.6*transfer_volume\n                    if 0.6*transfer_volume*1000 < 1000 else 1000,\n                    final_dest)\n        pip.drop_tip()\n        ctx.comment('\\n\\n')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Rack type (mL),Slot No,Position,Sample ID,Initial tube volume (mL),Volume (mL),Slot No,Dispensing height,Tube number,Sample ID\n24,4,A1,Stock-1,1.5,0.25,1,Bottom,A1,Int-1\n1-well Resovoir,3,A1,Diluent,x,11.75,1,Top,A1,Int-1\n15,1,A1,Int-1,12,1.2,1,Middle,A2,Int-2\n1-well Resovoir,3,A1,Diluent,x,8.8,1,Top,A2,Int-2\n15,1,A2,Int-2,10,1,1,Top,A3,STD8\n1-well Resovoir,3,A1,Diluent,x,11,1,Top,A3,STD8\n15,1,A3,STD8,12,2.2,1,Top,A4,STD7\n1-well Resovoir,3,A1,Diluent,x,7.8,1,Top,A4,STD7\n15,1,A4,STD7,10,2,1,Top,A5,STD6\n1-well Resovoir,3,A1,Diluent,x,8,1,Top,A5,STD6\n15,1,A5,STD6,10,3.5,1,Top,B1,STD5\n1-well Resovoir,3,A1,Diluent,x,6.5,1,Top,B1,STD5\n15,1,B1,STD5,10,4,1,Top,B2,STD4\n1-well Resovoir,3,A1,Diluent,x,6,1,Top,B2,STD4\n15,1,B2,STD4,10,6.5,1,Top,B3,STD3\n1-well Resovoir,3,A1,Diluent,x,3.5,1,Top,B3,STD3\n15,1,B3,STD3,10,3,1,Top,B4,STD2\n1-well Resovoir,3,A1,Diluent,x,7,1,Top,B4,STD2\n15,1,B4,STD2,10,1.2,1,Top,B5,STD1\n1-well Resovoir,3,A1,Diluent,x,8.8,1,Top,B5,STD1\n15,7,A2,Stock-2,5,0.3,2,,A1,Int-1\n15,7,A3,Diluent,10,9.7,2,,A1,Int-1\n15,2,A1,Int-1,10,2,2,,A2,Int-2\n15,7,A3,Diluent,0.3,8,2,,A2,Int-2\n15,2,A2,Int-2,10,1.5,2,,A3,DQC\n15,7,A4,Diluent,10,8.5,2,,A3,DQC\n15,2,A3,DQC,10,6.2,2,,A4,HQC\n15,7,A4,Diluent,1.5,3.8,2,,A4,HQC\n15,2,A4,HQC,10,3.5,2,,A5,MQC\n1-well Resovoir,3,A1,Diluent,x,6.5,2,,A5,MQC\n15,2,A5,HQC,10,0.6,2,,B1,LQC\n1-well Resovoir,3,A1,Diluent,x,9.4,2,,B1,LQC\n15,2,B1,HQC,10,1.2,2,,B2,LLOQ QC\n1-well Resovoir,3,A1,Diluent,x,8.8,2,,B2,LLOQ QC",
            "label": ".CSV File",
            "name": "csv",
            "type": "textFile"
        },
        {
            "default": 1,
            "label": "Number of 1000ul tipracks (0-3)",
            "name": "num_tipracks",
            "type": "int"
        },
        {
            "default": 0,
            "label": "Number of 20ul tipracks (0-2)",
            "name": "num_tipracks20",
            "type": "int"
        },
        {
            "default": 2,
            "label": "Number of Mix Repetitions",
            "name": "num_mix",
            "type": "int"
        },
        {
            "default": 1.0,
            "label": "Aspirate Rate",
            "name": "asp_rate",
            "type": "float"
        },
        {
            "default": 1.0,
            "label": "Dispense Rate",
            "name": "disp_rate",
            "type": "float"
        },
        {
            "default": 1.0,
            "label": "Blowout Rate",
            "name": "blowout_rate",
            "type": "float"
        },
        {
            "label": "P1000 Single-Channel Mount",
            "name": "p1000_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P20 Single-Channel Mount",
            "name": "p20_mount",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p1000_single_gen2"
        },
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "SERIAL RACK on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "SERIAL RACK on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "DILUTION RESERVOIR on 3",
            "share": false,
            "slot": "3",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "STOCK RACK on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "SERIAL RACK on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protocolName": "Serial Dilution of Analyte Stock",
        "source": "Custom Protocol Request"
    },
    "modules": []
}