{
    "content": "\"\"\"OPENTRONS.\"\"\"\nfrom opentrons import protocol_api\nimport math\n\nmetadata = {\n    'protocolName': 'Plasma Spike w/Optional Serial Dilution',\n    'author': 'John C. Lynch <john.lynch@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\ndef run(ctx):\n    \"\"\"PROTOCOL.\"\"\"\n    [\n     serial_boolean,\n     starting_diluent_vol,\n     starting_plasma_vol,\n     p20_mount\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n        \"serial_boolean\",\n        \"starting_diluent_vol\",\n        \"starting_plasma_vol\",\n        \"p20_mount\")\n\n    # define all custom variables above here with descriptions:\n\n    # number of samples\n    if p20_mount == 'left':\n        p300_side = 'right'\n    else:\n        p300_side = 'left'\n\n    # load labware\n    tube_dual = ctx.load_labware('opentrons_10_tuberack_falcon_4x50ml_'\n                                 '6x15ml_conical', '3')\n    tube_24 = ctx.load_labware('opentrons_24_tuberack_eppendorf_1.5ml_'\n                               'safelock_snapcap', '4')\n\n    # load tipracks\n    tips300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot)\n               for slot in ['1']]\n    tips20 = [ctx.load_labware('opentrons_96_tiprack_20ul', slot)\n              for slot in ['2']]\n\n    # load instrument\n    p300 = ctx.load_instrument('p300_single_gen2', p300_side, tip_racks=tips300)\n    p20 = ctx.load_instrument('p20_single_gen2', p20_mount, tip_racks=tips20)\n\n    # reagents\n    diluent = tube_dual.wells()[0]  # 15 mL conical tube\n    plasma = tube_dual.wells()[1]  # 15 mL conical tube\n    radius_15 = tube_dual.wells()[0].diameter/2\n    print(radius_15)\n    dilution_targets = tube_24.rows()[0][1:]+tube_24.rows()[1][:]\n    dilution_sources = tube_24.rows()[0][:]+tube_24.rows()[1][:]\n    plasma_targets = tube_24.rows()[2][:]+tube_24.rows()[3][:]\n\n    h_plasma = (starting_plasma_vol*1000/(math.pi*(radius_15**2)))-3\n    h_diluent = (starting_diluent_vol*1000/(math.pi*(radius_15**2)))-3\n    print(h_plasma)\n    print(h_diluent)\n\n    def adjust_height_plasma(vol, radius):\n        nonlocal h_plasma\n        dh = vol/(math.pi*radius**2)\n        h_plasma -= dh\n        if h_plasma < 6:\n            h_plasma = 1\n\n    def adjust_height_dil(vol, radius):\n        nonlocal h_diluent\n        dh = vol/(math.pi*radius**2)\n        h_diluent -= dh\n        if h_diluent < 6:\n            h_diluent = 1\n\n    def bead_mixing(well, pip, mvol, reps=10):\n        \"\"\"bead_mixing.\"\"\"\n        \"\"\"\n        'bead_mixing' will mix liquid that contains beads. This will be done by\n        aspirating from the middle of the well & dispensing from the bottom to\n        mix the beads with the other liquids as much as possible. Aspiration &\n        dispensing will also be reversed to ensure proper mixing.\n        param well: The current well that the mixing will occur in.\n        param pip: The pipet that is currently attached/ being used.\n        param mvol: The volume that is transferred before the mixing steps.\n        param reps: The number of mix repetitions that should occur. Note~\n        During each mix rep, there are 2 cycles of aspirating from bottom,\n        dispensing at the top and 2 cycles of aspirating from middle,\n        dispensing at the bottom\n        \"\"\"\n        vol = mvol * .9\n\n        pip.move_to(well.center())\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(1), rate=2)\n            pip.dispense(vol, well.bottom(5), rate=2)\n    # protocol\n    # add diluent to tubes 2-12 on 24 rack\n    p300.pick_up_tip()\n    for dest in dilution_targets:\n        p300.aspirate(200, diluent)\n        p300.move_to(diluent.top())\n        p300.aspirate(20, diluent.top())\n        p300.move_to(dest.top())\n        p300.dispense(20, dest.top())\n        p300.dispense(200, dest)\n        adjust_height_plasma(200, radius_15)\n        print(h_plasma)\n    vol_add_list = [250, 250, 250, 240]\n\n    # add 980uL diluent to tube 1 on 24 rack\n    for vol in vol_add_list:\n        p300.aspirate(vol, diluent)\n        p300.move_to(diluent.top())\n        p300.aspirate(20, diluent.top())\n        p300.move_to(tube_24.wells()[0].top())\n        p300.dispense(20, tube_24.wells()[0].top())\n        p300.dispense(vol, tube_24.wells()[0])\n    p300.drop_tip()\n\n    #  add 20uL stock solution to tube 1 on the 24 rack\n    # p20.pick_up_tip()\n    # p20.aspirate(20, stock)\n    # p20.dispense(20, tube_24.wells()[0])\n    # p20.drop_tip()\n\n    # mix with p300\n    p300.pick_up_tip()\n    bead_mixing(tube_24.wells()[0], p300, 300, reps=10)\n\n    # first serial dilution\n    p300.aspirate(200, tube_24.wells()[0])\n    p300.dispense(200, dilution_targets[0])\n    p300.drop_tip()\n\n    # serial dilution\n    for src, dest in zip(dilution_targets, dilution_targets[1:]):\n        p300.pick_up_tip()\n        p300.aspirate(200, src)\n        p300.move_to(src.top())\n        p300.aspirate(20, src.top())\n        p300.move_to(dest.top())\n        p300.dispense(20, dest.top())\n        p300.dispense(200, dest)\n        bead_mixing(dest, p300, 300, reps=10)\n        p300.drop_tip()\n\n    # add 100 uL plasma to 13-24 in tube rack\n    for dest in plasma_targets:\n        p300.pick_up_tip()\n        p300.aspirate(100, plasma)\n        p300.move_to(plasma.top())\n        p300.aspirate(20, plasma.top())\n        p300.move_to(dest.top())\n        p300.dispense(20, dest.top())\n        p300.dispense(100, dest)\n        # need tip touch here?\n        p300.drop_tip()\n\n    # move 10 uL dilutions to plasma tubes\n    for src, dest in zip(dilution_sources, plasma_targets):\n        p20.pick_up_tip()\n        p20.aspirate(10, src)\n        p20.dispense(10, dest)\n        # need tip touch here?\n        p20.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Serial Dilution?",
            "name": "serial_boolean",
            "options": [
                {
                    "label": "Yes",
                    "value": true
                },
                {
                    "label": "No",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 15,
            "label": "Starting Diluent Volume",
            "name": "starting_diluent_vol",
            "type": "float"
        },
        {
            "default": 15,
            "label": "Starting Plasma Volume",
            "name": "starting_plasma_vol",
            "type": "float"
        },
        {
            "label": "P20 Single GEN2 mount",
            "name": "p20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 10 Tube Rack with Falcon 4x50 mL, 6x15 mL Conical on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "John C. Lynch <john.lynch@opentrons.com>",
        "protocolName": "Plasma Spike w/Optional Serial Dilution",
        "source": "Custom Protocol Request"
    },
    "modules": []
}