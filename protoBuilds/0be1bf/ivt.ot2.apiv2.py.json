{
    "content": "from opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': 'IVT Aliquots',\n    'author': 'Nick Diehl <ndiehl@opentrons.com>',\n    'apiLevel': '2.14'\n}\n\n\ndef run(ctx):\n\n    [input_csv] = get_values(  # noqa: F821\n        'input_csv')\n\n    # parse data\n    data = [\n        [val.strip() for val in line.split(',')]\n        for line in input_csv.splitlines()\n    ]\n    rxn_vol = float(data[9][5])\n    num_rxns = int(data[10][5])\n    total_vol_with_overage = float(data[11][5])\n    factor_overage = total_vol_with_overage/(rxn_vol*num_rxns)\n\n    # labware\n    rack1 = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n        '4', 'component rack 1')\n    rack2 = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n        '7', 'component rack 2')\n    rack15 = ctx.load_labware(\n        'opentrons_15_tuberack_5000ul', '8', 'mix tube')\n    aliquot_rack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n        '5', 'aliquot rack')\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '6', 'reservoir')\n    tiprack_20 = [ctx.load_labware('opentrons_96_tiprack_20ul', '1')]\n    tiprack_300 = [ctx.load_labware('opentrons_96_tiprack_300ul', '2')]\n\n    template_volumes = []\n    for line in data[31:]:\n        if not line[0] or 'rxn' in line[0].lower():  # look for templates end\n            break\n        template_volumes.append(float(line[6]))\n    if not len(template_volumes) == num_rxns:\n        ctx.pause(f'Number of templates entered ({num_rxns}) \\ndoes not match number of concentrations entered \n({len(template_volumes)}) \\nContinue?')\n\n    mix_volumes = [\n        float(line[5]) for line in data[14:24]\n    ]\n    mix_map = {\n        well: vol\n        for well, vol in zip(rack1.wells()[:len(mix_volumes)], mix_volumes)\n    }\n\n    template_map = {\n        well: vol\n        for well, vol in zip(rack2.wells()[:len(template_volumes)],\n                             template_volumes)\n    }\n    enzyme_volumes = [\n        float(line[5]) for line in data[25:27]]\n    enzyme_map = {\n        well: vol\n        for well, vol in zip(\n            rack2.wells()[len(template_volumes):\n                          len(template_volumes)+len(enzyme_volumes)],\n            enzyme_volumes)\n    }\n\n    colors = [\n        '#5b3811',\n        '#ddb4ca',\n        '#4f3e24',\n        '#584582',\n        '#860916',\n        '#1f6f7e',\n        '#95bb6d',\n        '#f5ea87',\n        '#539a51',\n        '#992d16',\n        '#5f50cf',\n        '#159668',\n        '#897f77',\n        '#2bad24',\n        '#3bbac0',\n        '#44971e',\n        '#d11e7f',\n        '#4cfe77',\n        '#ee06d2',\n        '#9ffd59']\n\n    for letter, (well, vol) in zip('ABCDEFGHIJ', mix_map.items()):\n\n        temp = ctx.define_liquid(\n            name=letter,\n            description='',\n            display_color=colors.pop()\n        )\n        well.load_liquid(temp, vol*num_rxns*factor_overage)\n\n    template_color = colors.pop()\n    for i, (well, vol) in enumerate(template_map.items()):\n\n        temp = ctx.define_liquid(\n            name=f'DNA template {i+1}',\n            description='',\n            display_color=template_color\n        )\n        well.load_liquid(temp, vol*factor_overage)\n\n    for letter, (well, vol) in zip(\n            ['P (1:100 dilution)', 'TP'], enzyme_map.items()):\n\n        temp = ctx.define_liquid(\n            name=letter,\n            description='',\n            display_color=colors.pop()\n        )\n        well.load_liquid(temp, vol*num_rxns*factor_overage)\n\n    mix_tube = rack15.wells()[0]\n    enzyme_mix_tube = rack2.rows()[0][-1]\n    dn = rack2.wells()[len(template_volumes)+len(enzyme_volumes)]\n    cac = rack2.wells()[len(template_volumes)+len(enzyme_volumes)+1]\n    rxns = aliquot_rack.wells()[:num_rxns]\n    water = reservoir.wells()[0]\n    licl_h2o = reservoir.wells()[1]\n\n    # find vols DN and CaC\n    vol_dn = vol_cac = None\n    for line in data[45:]:  # start looking lower\n        if line[0].lower().strip() == 'dn':\n            vol_dn = float(line[5])\n        if line[0].lower().strip() == 'cac':\n            vol_cac = float(line[5])\n\n    mix_tube_liq = ctx.define_liquid(\n            name='mix tube',\n            description='non-enzyme mix components',\n            display_color=colors.pop()\n    )\n    enzyme_mix_tube_liq = ctx.define_liquid(\n            name='enzyme mix tube',\n            description='enzyme mix components',\n            display_color=colors.pop()\n    )\n    water_liq = ctx.define_liquid(\n            name='water',\n            description='',\n            display_color=colors.pop()\n    )\n    licl_h2o_liq = ctx.define_liquid(\n            name='LiCl + H2O',\n            description='1:1 ratio of LiCl and H2O',\n            display_color=colors.pop()\n    )\n\n    mix_tube.load_liquid(mix_tube_liq, 0)\n    enzyme_mix_tube.load_liquid(enzyme_mix_tube_liq, 0)\n\n    dn_liq = ctx.define_liquid(\n        name='DN',\n        description='',\n        display_color=colors.pop()\n    )\n    dn.load_liquid(dn_liq, vol_dn)\n\n    cac_liq = ctx.define_liquid(\n        name='CaC',\n        description='',\n        display_color=colors.pop()\n    )\n    cac.load_liquid(cac_liq, vol_cac)\n\n    vols_water = [\n        rxn_vol - (sum(mix_volumes) + sum(enzyme_volumes) + template_vol)\n        for template_vol in template_volumes]\n    vol_licl_h2o = (rxn_vol + sum([vol_dn, vol_cac]))*2\n\n    water.load_liquid(water_liq, sum(vols_water))\n    licl_h2o.load_liquid(licl_h2o_liq, vol_licl_h2o)\n\n    # pipettes\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'left', tip_racks=tiprack_300)\n    p20 = ctx.load_instrument(\n        'p20_single_gen2', 'right', tip_racks=tiprack_20)\n\n    def wick(pip, well, side=1):\n        pip.default_speed /= 5\n        radius = well.diameter/2 if well.diameter else well.length/2\n        pip.move_to(well.bottom().move(Point(x=side*radius*0.5, z=3)))\n        pip.default_speed *= 5\n\n    def slow_withdraw(pip, well, delay_seconds=1.0):\n        pip.default_speed /= 10\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 10\n\n    vol_pre_airgap_p300 = 20.0\n    vol_pre_airgap_p20 = 2.0\n\n    # initial mix\n    for i, (well, transfer_vol) in enumerate(mix_map.items()):\n        if transfer_vol > 20:\n            pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n        else:\n            pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n        num_trans = math.ceil(\n            transfer_vol/(\n                pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n        vol_per_trans = round(transfer_vol/num_trans, 2)\n        pip.pick_up_tip()\n        for n in range(num_trans):\n            depth = 1.5 if transfer_vol <= 10 else 3\n            pip.aspirate(vol_pre_airgap, well.top())\n            pip.aspirate(vol_per_trans, well.bottom(depth))\n            slow_withdraw(pip, well)\n            if n < num_trans - 1:\n                pip.dispense(pip.current_volume, mix_tube.top())\n            else:\n                pip.dispense(pip.current_volume, mix_tube.bottom(2))\n                slow_withdraw(pip, mix_tube)\n            slow_withdraw(pip, mix_tube)\n        if i == len(mix_map.items()) - 1:\n            if not pip == p300:\n                pip.drop_tip()\n                p300.pick_up_tip()\n            p300.mix(5, pip.max_volume*0.8, mix_tube, rate=0.5)\n            slow_withdraw(pip, mix_tube)\n        pip.drop_tip()\n\n    # water addition\n    for vol_water, d in zip(vols_water,\n                            aliquot_rack.wells()[:len(template_volumes)]):\n        if vol_water > 20:\n            pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n        else:\n            pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n        num_trans = math.ceil(\n            vol_water/(\n                pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n        vol_per_trans = round(vol_water/num_trans, 2)\n        if not pip.has_tip:\n            pip.pick_up_tip()\n        for _ in range(num_trans):\n            pip.aspirate(vol_pre_airgap, water.top())\n            pip.aspirate(vol_per_trans, water)\n            slow_withdraw(pip, water)\n            pip.dispense(pip.current_volume, d.bottom(2))\n            slow_withdraw(pip, d)\n    for pip in [p20, p300]:\n        if pip.has_tip:\n            pip.drop_tip()\n\n    # mix addition\n    vol_mix = sum(mix_volumes)/(num_rxns*factor_overage)\n    if vol_mix > 20:\n        pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n    else:\n        pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n    num_trans = math.ceil(\n        vol_mix/(\n            pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n    vol_per_trans = round(vol_mix/num_trans, 2)\n    for d in rxns:\n        pip.pick_up_tip()\n        for _ in range(num_trans):\n            pip.aspirate(vol_pre_airgap, mix_tube.top())\n            pip.aspirate(vol_per_trans, mix_tube)\n            slow_withdraw(pip, mix_tube)\n            pip.dispense(pip.current_volume, d.bottom(2))\n            slow_withdraw(pip, d)\n        pip.drop_tip()\n\n    # DNA template addition\n    for (template, vol), d in zip(\n            template_map.items(),\n            aliquot_rack.wells()[:len(template_volumes)]):\n        if vol > 20:\n            pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n        else:\n            pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n        num_trans = math.ceil(\n            vol/(\n                pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n        num_trans = math.ceil(vol/pip.tip_racks[0].wells()[0].max_volume)\n        vol_per_trans = round(vol/num_trans, 2)\n        pip.pick_up_tip()\n        depth = 1.5 if vol_per_trans <= 10 else 3\n        for n in range(num_trans):\n            pip.aspirate(vol_pre_airgap, template.top())\n            pip.aspirate(vol_per_trans, template.bottom(depth))\n            slow_withdraw(pip, template)\n            pip.dispense(pip.current_volume, d.bottom(2))\n            if n == num_trans - 1:\n                pip.mix(5, pip.max_volume*0.8, d.bottom(2), rate=0.5)\n            slow_withdraw(pip, d)\n        pip.drop_tip()\n\n    ctx.pause('Place enzymes in tuberack.')\n\n    # enzyme mix\n    for i, (well, transfer_vol) in enumerate(enzyme_map.items()):\n        if transfer_vol > 20:\n            pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n        else:\n            pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n        num_trans = math.ceil(\n            transfer_vol/(\n                pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n        vol_per_trans = round(transfer_vol/num_trans, 2)\n        pip.pick_up_tip()\n        depth = 1.5 if vol_per_trans <= 10 else 3\n        for _ in range(num_trans):\n            pip.aspirate(vol_pre_airgap, well.top())\n            pip.aspirate(vol_per_trans, well.bottom(depth))\n            slow_withdraw(pip, well)\n            pip.dispense(pip.current_volume, enzyme_mix_tube.bottom(1.5))\n            if i == 0:\n                wick(pip, enzyme_mix_tube)\n            slow_withdraw(pip, enzyme_mix_tube)\n        if i == len(enzyme_map.items()) - 1:\n            pip.mix(5, sum(enzyme_volumes)*0.8,\n                    enzyme_mix_tube.bottom(2), rate=0.5)\n            slow_withdraw(pip, enzyme_mix_tube)\n        pip.drop_tip()\n\n    # enzyme mix addition\n    vol_enzyme_mix = sum(enzyme_volumes)/(num_rxns*factor_overage)\n    if vol_enzyme_mix > 20:\n        pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n    else:\n        pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n    num_trans = math.ceil(\n        vol_enzyme_mix/(\n            pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n    vol_per_trans = round(vol_enzyme_mix/num_trans, 2)\n    for d in rxns:\n        pip.pick_up_tip()\n        for _ in range(num_trans):\n            pip.aspirate(vol_per_trans, enzyme_mix_tube.bottom(1.5))\n            slow_withdraw(pip, enzyme_mix_tube)\n            pip.dispense(pip.current_volume, d.bottom(2))\n            slow_withdraw(pip, d)\n        pip.mix(\n            5,\n            pip.tip_racks[0].wells()[0].max_volume*0.8,\n            d.bottom(2),\n            rate=0.5)\n        pip.drop_tip()\n\n    ctx.pause('INCUBATION')\n\n    # DN and CaC\n    for vol, reagent in zip([vol_dn, vol_cac], [dn, cac]):\n        pip = p20 if vol < 20 else p300\n        for d in rxns:\n            pip.pick_up_tip()\n            pip.aspirate(vol, reagent)\n            slow_withdraw(pip, reagent)\n            pip.dispense(vol, d.bottom(3))\n            pip.mix(5, pip.max_volume*0.8, d.bottom(2), rate=5)\n            slow_withdraw(pip, d)\n            pip.drop_tip()\n\n    ctx.pause('INCUBATION')\n\n    # LiCl and H2O\n    if vol_licl_h2o > 20:\n        pip, vol_pre_airgap = p300, vol_pre_airgap_p300\n    else:\n        pip, vol_pre_airgap = p20, vol_pre_airgap_p20\n    num_trans = math.ceil(\n        vol_licl_h2o/(\n            pip.tip_racks[0].wells()[0].max_volume-vol_pre_airgap))\n    vol_per_trans = round(vol_licl_h2o/num_trans, 2)\n    for d in rxns:\n        pip.pick_up_tip()\n        for i in range(num_trans):\n            pip.aspirate(vol_pre_airgap, licl_h2o.top())\n            pip.aspirate(vol_per_trans, licl_h2o)\n            slow_withdraw(pip, licl_h2o)\n            if i < num_trans - 1:\n                pip.dispense(pip.current_volume, d.top(-1))\n                pip.blow_out()\n                ctx.delay(seconds=2.0)\n            else:\n                pip.dispense(pip.current_volume, d.bottom(2))\n                slow_withdraw(pip, d)\n        pip.drop_tip()\n",
    "custom_labware_defs": [
        {
            "brand": {
                "brand": "Opentrons",
                "brandId": []
            },
            "cornerOffsetFromSlot": {
                "x": 0,
                "y": 0,
                "z": 0
            },
            "dimensions": {
                "xDimension": 127.76,
                "yDimension": 85.48,
                "zDimension": 80.76
            },
            "groups": [
                {
                    "metadata": {
                        "displayCategory": "tubeRack",
                        "wellBottomShape": "v"
                    },
                    "wells": [
                        "A1",
                        "B1",
                        "C1",
                        "A2",
                        "B2",
                        "C2",
                        "A3",
                        "B3",
                        "C3",
                        "A4",
                        "B4",
                        "C4",
                        "A5",
                        "B5",
                        "C5"
                    ]
                }
            ],
            "metadata": {
                "displayCategory": "tubeRack",
                "displayName": "Opentrons 15 Tube Rack with Eppendorf 5 mL",
                "displayVolumeUnits": "\u00b5L",
                "tags": []
            },
            "namespace": "custom_beta",
            "ordering": [
                [
                    "A1",
                    "B1",
                    "C1"
                ],
                [
                    "A2",
                    "B2",
                    "C2"
                ],
                [
                    "A3",
                    "B3",
                    "C3"
                ],
                [
                    "A4",
                    "B4",
                    "C4"
                ],
                [
                    "A5",
                    "B5",
                    "C5"
                ]
            ],
            "parameters": {
                "format": "irregular",
                "isMagneticModuleCompatible": false,
                "isTiprack": false,
                "loadName": "opentrons_15_tuberack_5000ul",
                "quirks": []
            },
            "schemaVersion": 2,
            "version": 1,
            "wells": {
                "A1": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 13.88,
                    "y": 67.74,
                    "z": 25.76
                },
                "A2": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 38.88,
                    "y": 67.74,
                    "z": 25.76
                },
                "A3": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 63.88,
                    "y": 67.74,
                    "z": 25.76
                },
                "A4": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 88.88,
                    "y": 67.74,
                    "z": 25.76
                },
                "A5": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 113.88,
                    "y": 67.74,
                    "z": 25.76
                },
                "B1": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 13.88,
                    "y": 42.74,
                    "z": 25.76
                },
                "B2": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 38.88,
                    "y": 42.74,
                    "z": 25.76
                },
                "B3": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 63.88,
                    "y": 42.74,
                    "z": 25.76
                },
                "B4": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 88.88,
                    "y": 42.74,
                    "z": 25.76
                },
                "B5": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 113.88,
                    "y": 42.74,
                    "z": 25.76
                },
                "C1": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 13.88,
                    "y": 17.74,
                    "z": 25.76
                },
                "C2": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 38.88,
                    "y": 17.74,
                    "z": 25.76
                },
                "C3": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 63.88,
                    "y": 17.74,
                    "z": 25.76
                },
                "C4": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 88.88,
                    "y": 17.74,
                    "z": 25.76
                },
                "C5": {
                    "depth": 55,
                    "diameter": 14.6,
                    "shape": "circular",
                    "totalLiquidVolume": 5000,
                    "x": 113.88,
                    "y": 17.74,
                    "z": 25.76
                }
            }
        }
    ],
    "fields": [
        {
            "default": "Experimental Summary,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nLD Lot#,L1,L2,,,,,,,,,,,,,,,,,,\nConcentration (mg/mL),0.64,0.67,,,,,,,,,,,,,,,,,,\nCON,C1,C2,,,,,,,,,,,,,,,,,,\nLE,,,,,,,,,,,,,,,,,,,,\n  ,,,,,,,,,,,,,,,,,,,,\nStep1,,,,,,,,,,,,,,,,,,,,\n,,,,Volume (uL),500,,,,,,,,,,,,,,,\n,,,,Number of Reactions,5,,,,,,,,,,,,,,,\n,,,,Total Volume (+20%),3000,,,,,,,,,,,,,,,\nMaster Mix,,,,,,,,,,,,,,,,,,,,\nComponent,Stock Concentration,Units,Target Concentration,Units,Volume to add (uL),,,,,,,,,,,,,,,\nA,1000,mM,40.00,mM,120.0,,,,,,,,,,,,,,,\nB,40,U/\u03bcL,0.08,U/\u03bcL,6.0,,,,,,,,,,,,,,,\nC,100,mM,7.00,mM,210.0,,,,,,,,,,,,,,,\nD,100,mM,7.00,mM,210.0,,,,,,,,,,,,,,,\nE,100,mM,7.00,mM,210.0,,,,,,,,,,,,,,,\nF,100,mM,7.00,mM,210.0,,,,,,,,,,,,,,,\nG,100,mM,4.00,mM,120.0,,,,,,,,,,,,,,,\nH,1000,mM,32.00,mM,96.0,,,,,,,,,,,,,,,\nI,1000,mM,5.00,mM,15.0,,,,,,,,,,,,,,,\nJ,200,mM,2.00,mM,30.0,,,,,,,,,,,,,,,\nK,varied,mg/mL,0.10,mg/mL,,,,,,,,,,,,,,,,\nP  (0.1U/uL stock),100,mU/\u03bcL,0.02,mU/\u03bcL,0.60,,,,,,,,,,,,,,,\nTP,200,U/\u03bcL,10.00,U/\u03bcL,150.0,,,,,,,,,,,,,,,\n,,,,Total Volume (uL):,1377.6,,,,,,,,,,,,,,,\n,,,,Per Rxn (uL):,229.6,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nLot #,Description,Master Mix Aliquot (uL),Water (uL),Template Stock Con. (mg/mL),Template Target Con. (mg/mL),Template Vol. (uL),,,,,,,,,,,,,,\nL1,C1,229.60,192.28,0.64,0.10,78.13,,,,,,,,,,,,,,\nL2,C2,229.60,195.77,0.67,0.10,74.63,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nRXN Condition,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nTemperature,37C,,,,,,,,,,,,,,,,,,,\nTime,120 Minutes,,,,,,,,,,,,,,,,,,,\nAgitation,300 rpm,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nStep2,,,,,,,,,,,,,,,,,,,,\nRemoval D - after addition of DN and CaC incubate at 37C temp & agitation for an additional 15 minutes,,,,,,,,,,,,,,,,,,,,\n,,,,,0.1mg/mL DNA on each Reaction,,,,,,,,,,,,,,,\nComponent,Stock Concentration,Units,Target Concentration,Units,Volume to add (uL),,,,,,,,,,,,,,,\nDN,50,U/uL,See calculation above,U/uL,8.0,,,,,,,,,,,,,,,\nCaC,1000,mM,1,mM,0.25,,,,,,,,,,,,,,,\n,,,,Total Volume after DN,508.3,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,\nAdd equal volume of H2O and LiCl and freeze overnight at -80C:,,,,,,,,,,,,,,,,,,,,",
            "label": "input .csv file",
            "name": "input_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "component rack 1 on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "aliquot rack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "reservoir on 6",
            "share": false,
            "slot": "6",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "component rack 2 on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "mix tube on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_15_tuberack_5000ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.14",
        "author": "Nick Diehl <ndiehl@opentrons.com>",
        "protocolName": "IVT Aliquots"
    },
    "modules": []
}