{
    "content": "import math\nimport os\nimport json\nfrom opentrons.types import Point\n\nmetadata = {\n    'protocolName': 'NGS Library Cleanup with Ampure XP Beads',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.9'\n}\n\nMAG_HEIGHT = 6.8\n\n\ndef run(ctx):\n\n    [p300_multi_mount, number_of_samples, volume_of_beads,\n     bead_incubation_time_in_minutes, etoh_inc, drying_time_in_minutes,\n     vol_etoh, mix_etoh, volume_EB_in_ul, elution_inc,\n     volume_final_elution_in_ul, park_tips, tip_track,\n     drop_threshold] = get_values(  # noqa: F821\n        'p300_multi_mount', 'number_of_samples', 'volume_of_beads',\n        'bead_incubation_time_in_minutes', 'etoh_inc',\n        'drying_time_in_minutes', 'vol_etoh', 'mix_etoh', 'volume_EB_in_ul',\n        'elution_inc', 'volume_final_elution_in_ul', 'park_tips', 'tip_track',\n        'drop_threshold')\n\n    # check\n    if number_of_samples > 96 or number_of_samples < 1:\n        raise Exception('Invalid number of samples.')\n\n    num_cols = math.ceil(number_of_samples/8)\n\n    # load labware\n    magdeck = ctx.load_module('magnetic module gen2', '1')\n    mag_plate = magdeck.load_labware(\n        'nest_96_wellplate_100ul_pcr_full_skirt', 'magnetic plate')\n    elution_plate = ctx.load_labware(\n        'nest_96_wellplate_100ul_pcr_full_skirt', '2', 'elution plate')\n    tips300 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n        for slot in ['6', '8', '9', '10', '11', '3']]\n    if park_tips:\n        rack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '5', 'tiprack for parking')\n        parking_spots = rack.rows()[0][:num_cols]\n    else:\n        rack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '5', '200\u00b5l filtertiprack')\n        parking_spots = [None for none in range(12)]\n    tips300.insert(0, rack)\n\n    deep96 = ctx.load_labware('nest_96_wellplate_2ml_deep', '7',\n                              'reagent deepwell plate')\n    waste_plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '4',\n                                   'waste deepwell plate')\n\n    # sample setup\n    mag_samples = mag_plate.rows()[0][:num_cols]\n    elution_samples = elution_plate.rows()[0][:num_cols]\n    waste = [chan.top(-5) for chan in waste_plate.rows()[0][:num_cols]]\n    num_drying_sets = math.ceil(num_cols/4)  # process 4 columns at a time\n    drying_sets = [\n        mag_samples[i*4:i*4+4] if i < num_drying_sets - 1\n        else mag_samples[i*4:]\n        for i in range(num_drying_sets)]\n    parking_sets = [\n        parking_spots[i*4:i*4+4] if i < num_drying_sets - 1\n        else parking_spots[i*4:]\n        for i in range(num_drying_sets)]\n    waste_sets = [\n        waste[i*4:i*4+4] if i < num_drying_sets - 1\n        else waste[i*4:]\n        for i in range(num_drying_sets)]\n\n    # reagents\n    beads = deep96.rows()[0][0]\n    etoh = deep96.rows()[0][1]\n    eb_buff = deep96.rows()[0][2]\n\n    # pipettes\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', mount=p300_multi_mount, tip_racks=tips300)\n    m300.flow_rate.aspirate = 100\n    m300.flow_rate.dispense = 200\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n    folder_path = '/data/bead_cleanup'\n    tip_file_path = folder_path + '/tip_log.json'\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def pick_up(pip, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n            return loc\n        else:\n            loc = tip_log[pip]['tips'][tip_log[pip]['count']]\n            pip.pick_up_tip(loc)\n            tip_log[pip]['count'] += 1\n            return loc\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n\n    def drop(pip, loc=None):\n        nonlocal switch\n        nonlocal drop_count\n        if not loc:\n            if pip.type == 'multi':\n                drop_count += 8\n            else:\n                drop_count += 1\n            if drop_count >= drop_threshold:\n                ctx.home()\n                ctx.pause('Please empty tips from waste before resuming.')\n                drop_count = 0\n            side = 30 if switch else -18\n            drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n                Point(x=side))\n            pip.drop_tip(drop_loc)\n            switch = not switch\n        else:\n            pip.drop_tip(loc)\n\n    # mix beads\n    ctx.max_speeds['A'] = 50\n    ctx.max_speeds['Z'] = 50\n    # transfer beads and mix samples\n    for m, p in zip(mag_samples, parking_spots):\n        pick_up(m300)\n        m300.mix(5, volume_of_beads, beads.bottom(2))\n        m300.blow_out(beads.top(-5))\n        m300.transfer(volume_of_beads, beads, m.bottom(2), new_tip='never')\n        m300.blow_out(m.top(-2))\n        for _ in range(10):\n            m300.aspirate(volume_of_beads+25, m.bottom(2))\n            m300.dispense(volume_of_beads+25, m.center())\n        m300.blow_out(m.top(-2))\n        drop(m300, p)\n    ctx.max_speeds['A'] = 125\n    ctx.max_speeds['Z'] = 125\n\n    # incubation\n    ctx.delay(minutes=bead_incubation_time_in_minutes, msg='Incubating off \\\nmagnet for ' + str(bead_incubation_time_in_minutes) + ' minutes.')\n    magdeck.engage(height=MAG_HEIGHT)\n    ctx.delay(minutes=etoh_inc, msg='Incubating \\\non magnet for ' + str(etoh_inc) + ' minutes.')\n\n    # remove supernatant\n    for m, p, w in zip(mag_samples, parking_spots, waste):\n        pick_up(m300, p)\n        m300.aspirate(120, m.bottom(0.5))\n        m300.air_gap(20)\n        m300.dispense(140, w, rate=0.7)\n        m300.blow_out(w)\n        m300.air_gap(20)\n        drop(m300, p)\n\n    # 2x EtOH washes\n    etoh_loc = None\n    for wash in range(2):\n        if mix_etoh:\n            magdeck.disengage()\n\n        # transfer EtOH\n        if wash == 0:\n            etoh_loc = pick_up(m300)\n        else:\n            pick_up(m300, etoh_loc)\n\n        m300.distribute(vol_etoh, etoh, [m.top(2) for m in mag_samples],\n                        blow_out=True, blowout_location='source well',\n                        new_tip='never')\n        if wash == 0:\n            drop(m300, etoh_loc)\n        else:\n            drop(m300)\n        if mix_etoh:\n            for m, p in zip(mag_samples, parking_spots):\n                pick_up(m300, p)\n                m300.mix(10, vol_etoh*0.8, m)\n                m300.blow_out(m.top())\n                drop(m300, p)\n\n        if mix_etoh:\n            magdeck.engage(height=MAG_HEIGHT)\n            ctx.delay(minutes=etoh_inc, msg='Incubating on magnet for \\\n' + str(etoh_inc) + ' minutes.')\n\n        # remove supernatant\n        if wash == 0:\n            for m, p, w in zip(mag_samples, parking_spots, waste):\n                if mix_etoh:\n                    pick_up(m300, p)\n                else:\n                    if not m300.has_tip:\n                        pick_up(m300, p)\n                m300.aspirate(vol_etoh, m.bottom(0.5))\n                m300.air_gap(20)\n                m300.dispense(vol_etoh+20, w, rate=0.7)\n                m300.blow_out(w)\n                m300.air_gap(20)\n                drop(m300, p)\n        else:\n            for m, p, w in zip(mag_samples, parking_spots, waste):\n                if mix_etoh:\n                    pick_up(m300, p)\n                else:\n                    if not m300.has_tip:\n                        pick_up(m300, p)\n                m300.aspirate(vol_etoh - 15, m.bottom(0.5))\n                m300.air_gap(20)\n                m300.dispense(vol_etoh - 15 + 20, w, rate=0.7)\n                m300.air_gap(20)\n                drop(m300, p)\n\n            ctx.pause('Briefly centrifuge plate to pellet any residual \\\nmaterial on the side of the wells. Then, replace plate on magnetic module.')\n\n            eb_tip = None\n            for set_ind, (sample_set, parking_set, waste_set) in enumerate(\n                    zip(drying_sets, parking_sets, waste_sets)):\n                m300.flow_rate.aspirate = 20\n                for m, p, w in zip(sample_set, parking_set, waste_set):\n                    pick_up(m300, p)\n                    m300.aspirate(20, m.bottom(0.5))\n                    m300.air_gap(20)\n                    m300.dispense(40, w, rate=0.7)\n                    m300.blow_out(w)\n                    m300.air_gap(20)\n                    drop(m300)\n                m300.flow_rate.aspirate = 100\n\n                ctx.delay(\n                    minutes=drying_time_in_minutes, msg='Drying for \\\n' + str(drying_time_in_minutes) + ' minutes.')\n\n                # transfer EB buffer\n                if set_ind == 0:\n                    eb_tip = pick_up(m300)\n                else:\n                    pick_up(m300, eb_tip)\n\n                # custom distribution\n                col_per_asp = math.floor(180/volume_EB_in_ul)\n                num_asp = math.ceil(len(sample_set)/col_per_asp)\n                dist_sets = [\n                    sample_set[i*col_per_asp:i*col_per_asp+col_per_asp]\n                    if i < num_asp - 1\n                    else sample_set[i*col_per_asp:]\n                    for i in range(num_asp)]\n                for dist_set in dist_sets:\n                    m300.dispense(m300.current_volume, eb_buff.top())\n                    m300.distribute(volume_EB_in_ul, eb_buff,\n                                    [m.top(2) for m in dist_set],\n                                    blow_out=True,\n                                    blowout_location='source well',\n                                    new_tip='never')\n                    m300.air_gap(20)\n                if set_ind == len(sample_set) - 1:\n                    drop(m300)\n                else:\n                    drop(m300, eb_tip)\n\n    magdeck.disengage()\n\n    # mix samples\n    for m in mag_samples:\n        pick_up(m300)\n        m300.mix(10, 0.8*volume_EB_in_ul, m)\n        m300.blow_out(m.top())\n        drop(m300)\n\n    ctx.delay(minutes=bead_incubation_time_in_minutes, msg='Incubating off \\\nmagnet for ' + str(bead_incubation_time_in_minutes) + ' minutes.')\n    magdeck.engage(height=MAG_HEIGHT)\n    ctx.delay(minutes=elution_inc, msg='Incubating on magnet for \\\n' + str(elution_inc) + ' minutes.')\n\n    # transfer supernatant to new PCR plate\n    m300.flow_rate.aspirate = 20\n    for i, (m, e, p) in enumerate(\n            zip(mag_samples, elution_samples, parking_spots)):\n        pick_up(m300)\n        side = -1 if i % 2 == 0 else 1\n        m300.transfer(volume_final_elution_in_ul,\n                      m.bottom().move(Point(x=side*2.0, z=0.5)), e,\n                      new_tip='never')\n        m300.blow_out(e.top(-2))\n        drop(m300)\n\n    magdeck.disengage()\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "P300 multi-channel GEN2 pipette mount",
            "name": "p300_multi_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 96,
            "label": "number of samples (1-96)",
            "name": "number_of_samples",
            "type": "int"
        },
        {
            "default": 50.0,
            "label": "volume of beads (\u00b5l)",
            "name": "volume_of_beads",
            "type": "float"
        },
        {
            "default": 5,
            "label": "bead incubation time (minutes)",
            "name": "bead_incubation_time_in_minutes",
            "type": "float"
        },
        {
            "default": 2,
            "label": "initial/EtOH wash bead settling time on magnet (minutes)",
            "name": "etoh_inc",
            "type": "float"
        },
        {
            "default": 1,
            "label": "bead drying time (minutes)",
            "name": "drying_time_in_minutes",
            "type": "float"
        },
        {
            "default": 100.0,
            "label": "volume of ethanol (\u00b5l)",
            "name": "vol_etoh",
            "type": "float"
        },
        {
            "label": "mix after ethanol addition",
            "name": "mix_etoh",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 50.0,
            "label": "volume of EB (\u00b5l)",
            "name": "volume_EB_in_ul",
            "type": "float"
        },
        {
            "default": 2,
            "label": "elution bead settling time on magnet (minutes)",
            "name": "elution_inc",
            "type": "float"
        },
        {
            "default": 40.0,
            "label": "volume of final elution (\u00b5l)",
            "name": "volume_final_elution_in_ul",
            "type": "float"
        },
        {
            "label": "park tips",
            "name": "park_tips",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 200,
            "label": "maximum tips allowed in trash",
            "name": "drop_threshold",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "magnetic plate on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "elution plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "waste deepwell plate on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "tiprack for parking on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "reagent deepwell plate on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "NGS Library Cleanup with Ampure XP Beads",
        "source": "Custom Protocol Request"
    },
    "modules": []
}