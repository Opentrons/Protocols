{
    "content": "from opentrons import types\n\nmetadata = {\n    'protocolName': 'Illumina COVIDSeq Test: Anneal RNA',\n    'author': 'Sakib <sakib.hossain@opentrons.com>',\n    'description': 'Custom Protocol Request',\n    'apiLevel': '2.10'\n}\n\n\ndef run(ctx):\n\n    [m20_mount, reservoir_type, plate_1_cols,\n        plate_2_cols, temperature] = get_values(  # noqa: F821\n        \"m20_mount\", \"reservoir_type\", \"plate_1_cols\", \"plate_2_cols\",\n        \"temperature\")\n\n    # Labware\n    tips200ul = ctx.load_labware('opentrons_96_filtertiprack_20ul', 10)\n    temp_mod = ctx.load_module('temperature module gen2', 1)\n    reservoir = temp_mod.load_labware(reservoir_type, \"Master Mix Reservoir\")\n    plate_1 = ctx.load_labware('biorad_96_wellplate_200ul_pcr', 11, \"Plate 1\")\n    plate_2 = ctx.load_labware('biorad_96_wellplate_200ul_pcr', 8, \"Plate 2\")\n\n    # Pipettes\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount,\n                              tip_racks=[tips200ul])\n\n    # Wells\n    plate_1_wells = plate_1.rows()[0]\n    plate_2_wells = plate_2.rows()[0]\n    mm = reservoir['A1']\n\n    # Helper Functions\n    def includeCols(includedCols, plateCols):\n        included_cols = []\n        if includedCols != \"\":\n            included_cols = [int(i)-1 for i in includedCols.split(\",\")]\n            dests = [col for i, col in enumerate(plateCols) if i\n                     in included_cols]\n            return dests\n\n    def distribute(pipette, vol, source, dest, disposal_vol, asp_height,\n                   disp_height):\n\n        use_vol = pipette.max_volume - disposal_vol\n        num_distribute = use_vol // vol\n\n        def well_lists(wells, n):\n            for i in range(0, len(wells), n):\n                yield wells[i:i + n]\n\n        asp_vols = []\n\n        def calc_vol(wells, vol):\n\n            for wells in dest_wells:\n                aspirate_vol = vol*len(wells) + disposal_vol\n                asp_vols.append(aspirate_vol)\n\n        dest_wells = list(well_lists(dest, int(num_distribute)))\n        calc_vol(dest_wells, vol)\n\n        # Aspirate from source\n        pipette.pick_up_tip()\n        for wells, asp_vol in zip(dest_wells, asp_vols):\n            pipette.aspirate(asp_vol, source.bottom(z=asp_height))\n\n            # Add Movement Path Code Here\n            pipette.move_to(ctx.deck.position_for('4').move(types.Point(x=20,\n                            z=50)))\n\n            for well in wells:\n                pipette.dispense(vol, well.bottom(z=disp_height))\n            pipette.dispense(disposal_vol, source.bottom(z=asp_height))\n        pipette.drop_tip()\n\n    # Protocol Steps\n    temp_mod.set_temperature(temperature)\n    distribute(m20, 8.5, mm, includeCols(plate_1_cols, plate_1_wells), 3, 1, 1)\n    if reservoir_type == 'biorad_96_wellplate_200ul_pcr':\n        ctx.pause('''Please refill the master mix before continuing to Plate 2.\n                Click Resume when ready.''')\n    distribute(m20, 8.5, mm, includeCols(plate_2_cols, plate_2_wells), 3, 1, 1)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "P20 Multichannel GEN2 Pipette Mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Reservoir Labware Type",
            "name": "reservoir_type",
            "options": [
                {
                    "label": "Opentrons 96 Well Aluminum Block with Bio-Rad Well Plate 200 \u00b5L",
                    "value": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
                },
                {
                    "label": "NEST 96 Deepwell Plate 2mL",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "NEST 12 Well Reservoir 15 mL",
                    "value": "nest_12_reservoir_15ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": "1,2,3,4,5,6,7,8,9,10,11,12",
            "label": "Plate 1 Columns",
            "name": "plate_1_cols",
            "type": "str"
        },
        {
            "default": "1,2,3,4,5,6,7,8,9,10,11,12",
            "label": "Plate 2 Columns",
            "name": "plate_2_cols",
            "type": "str"
        },
        {
            "default": 4,
            "label": "Temperature (C)",
            "name": "temperature",
            "type": "float"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Master Mix Reservoir on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
        },
        {
            "name": "Plate 2 on 8",
            "share": false,
            "slot": "8",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Plate 1 on 11",
            "share": false,
            "slot": "11",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Sakib <sakib.hossain@opentrons.com>",
        "description": "Custom Protocol Request",
        "protocolName": "Illumina COVIDSeq Test: Anneal RNA"
    },
    "modules": []
}