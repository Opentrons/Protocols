{
    "content": "import json\nimport os\nimport math\n\n# metadata\nmetadata = {\n    'protocolName': 'Logix Smart Nasopharyngeal/Saliva Covid-19 PCR Prep \\\n(Station B)',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.10'\n}\n\n\ndef run(ctx):\n\n    [sample_type, num_samples, p10_mount, m10_mount,\n     tip_track] = get_values(  # noqa: F821\n        'sample_type', 'num_samples', 'p10_mount', 'm10_mount', 'tip_track')\n\n    # load labware\n    source_plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1',\n                                    '96-deepwell sample plate')\n    dest_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                  '2', '96-well PCR plate')\n    tuberack = ctx.load_labware('opentrons_24_tuberack_nest_2ml_screwcap',\n                                '4', 'reagent tuberack')\n    tipracks10s = [\n        ctx.load_labware('opentrons_96_tiprack_10ul', slot,\n                         '300\u00b5l tiprack')\n        for slot in ['7', '8', '10', '11']]\n    tipracks10m = [ctx.load_labware('opentrons_96_tiprack_10ul', slot,\n                                    '10\u00b5l tiprack')\n                   for slot in ['3', '5', '6', '9']]\n\n    # load pipette\n    p10 = ctx.load_instrument('p10_single', p10_mount, tip_racks=tipracks10s)\n    m10 = ctx.load_instrument('p10_multi', m10_mount, tip_racks=tipracks10m)\n\n    # setup samples and reagents\n    source_multi = source_plate.rows()[0][:math.ceil((num_samples+2)/8)]\n    all_dests = dest_plate.wells()[:2+num_samples]\n    all_dests_multi = dest_plate.rows()[0][:math.ceil((num_samples+2)/8)]\n    mm, pos_control, neg_control = tuberack.wells()[:3]\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def _pick_up(pip, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log[pip]['tips'][tip_log[pip]['count']])\n            tip_log[pip]['count'] += 1\n\n    if sample_type == 'nasopharyngeal':\n        vol_mm = 5\n        vol_sample = 5\n    else:\n        vol_mm = 10\n        vol_sample = 10\n\n    # transfer mastermix\n    _pick_up(p10)\n    for d in all_dests:\n        if vol_mm <= 7:\n            p10.air_gap(2)\n        p10.aspirate(vol_mm, mm)\n        if vol_mm <= 7:\n            p10.air_gap(1)\n        p10.dispense(p10.current_volume, d.bottom(1))\n    p10.drop_tip()\n\n    # transfer sample\n    for s, d in zip(source_multi, all_dests_multi):\n        _pick_up(m10)\n        if vol_mm <= 7:\n            m10.air_gap(2)\n        m10.aspirate(vol_sample, mm)\n        if vol_mm <= 7:\n            m10.air_gap(1)\n        m10.dispense(p10.current_volume, d.bottom(1))\n        m10.drop_tip()\n\n    # transfer controls\n    for s, d in zip([pos_control, neg_control], dest_plate.wells()[:2]):\n        _pick_up(p10)\n        if vol_mm <= 7:\n            p10.air_gap(2)\n        p10.aspirate(vol_sample, mm)\n        if vol_mm <= 7:\n            p10.air_gap(1)\n        p10.dispense(p10.current_volume, d.bottom(1))\n        p10.drop_tip()\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "sample type",
            "name": "sample_type",
            "options": [
                {
                    "label": "nasopharyngeal (5\u00b5l sample, 5\u00b5l mix)",
                    "value": "nasopharyngeal"
                },
                {
                    "label": "saliva (10\u00b5l sample, 10\u00b5l mix)",
                    "value": "saliva"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 94,
            "label": "number of samples (1-94)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "P10 single-channel GEN1 mount",
            "name": "p10_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P10 multi-channel GEN2 mount",
            "name": "m10_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p10_multi"
        },
        {
            "mount": "right",
            "name": "p10_single"
        }
    ],
    "labware": [
        {
            "name": "96-deepwell sample plate on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "96-well PCR plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "10\u00b5l tiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "reagent tuberack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_nest_2ml_screwcap"
        },
        {
            "name": "10\u00b5l tiprack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "10\u00b5l tiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "300\u00b5l tiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "300\u00b5l tiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "10\u00b5l tiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "300\u00b5l tiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "300\u00b5l tiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Logix Smart Nasopharyngeal/Saliva Covid-19 PCR Prep (Station B)",
        "source": "Custom Protocol Request"
    },
    "modules": []
}