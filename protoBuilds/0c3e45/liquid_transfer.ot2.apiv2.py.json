{
    "content": "import json\nimport os\n\nmetadata = {\n    'protocolName': 'Liquid Transfer',\n    'author': 'Nick Diehl <ndiehl@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.12'\n}\n\nTIP_TRACK = True\n\n\ndef run(ctx):\n\n    plates = [ctx.load_labware(\n        'nest_96_wellplate_200ul_flat', str(slot), f'plate {slot}')\n        for slot in range(1, 10)]\n    reservoir = ctx.load_labware('nest_1_reservoir_195ml', '10')\n    tiprack = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '11')]\n\n    m300 = ctx.load_instrument('p300_multi_gen2', 'right', tip_racks=tiprack)\n    m300.flow_rate.aspirate = 300\n    m300.flow_rate.dispense = 300\n\n    sivi_1 = reservoir.wells()[0]\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n\n    folder_path = '/data/liquid_transfer'\n    tip_file_path = folder_path + '/tip_log.json'\n    if TIP_TRACK and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def _pick_up(pip, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log[pip]['tips'][tip_log[pip]['count']])\n            tip_log[pip]['count'] += 1\n\n    # liquid transfers\n    _pick_up(m300)\n    for plate in plates:\n        for d in plate.rows()[0]:\n            m300.distribute(100, sivi_1.bottom(1), d.bottom(6.5),\n                            disposal_vol=0, new_tip='never')\n    m300.drop_tip()\n\n    # track final used tip\n    if TIP_TRACK and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [],
    "instruments": [
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "plate 1 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 2 on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 3 on 3",
            "share": false,
            "slot": "3",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 4 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 5 on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 6 on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 7 on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 8 on 8",
            "share": false,
            "slot": "8",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "plate 9 on 9",
            "share": false,
            "slot": "9",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "NEST 1 Well Reservoir 195 mL on 10",
            "share": false,
            "slot": "10",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Nick Diehl <ndiehl@opentrons.com>",
        "protocolName": "Liquid Transfer",
        "source": "Custom Protocol Request"
    },
    "modules": []
}