{
    "content": "metadata = {\n    'protodestName': 'Extraction Prep with Kingfisher Flex Extractor',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protodest Request',\n    'apiLevel': '2.7'\n}\n\n\ndef run(ctx):\n\n    [num_samp, mix_reps, p300_mount, p1000_mount] = get_values(  # noqa: F821\n        \"num_samp\", \"mix_reps\", \"p300_mount\", \"p1000_mount\")\n\n    if not 0 <= num_samp <= 96:\n        raise Exception(\"Enter a sample number between 1-96\")\n\n    # load labware\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '1')\n    reservoir2 = ctx.load_labware('nest_12_reservoir_15ml', '2')\n    npw4_block = ctx.load_labware('nest_96_wellplate_2ml_deep', '3')\n    sample_block = ctx.load_labware('nest_96_wellplate_2ml_deep', '4')\n    elution_block = ctx.load_labware('nest_96_wellplate_2ml_deep', '5')\n    ethanol_block = ctx.load_labware('nest_96_wellplate_2ml_deep', '6')\n    npw3_block = ctx.load_labware('nest_96_wellplate_2ml_deep', '7')\n\n    tiprack300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot)\n                  for slot in ['9', '8']]\n    tiprack1000 = [ctx.load_labware('opentrons_96_tiprack_1000ul', '10')]\n    tuberack = ctx.load_labware(\n            'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '11')\n\n    # load instrument\n    p1000 = ctx.load_instrument('p1000_single_gen2', p1000_mount,\n                                tip_racks=tiprack1000)\n    p300 = ctx.load_instrument('p300_multi_gen2', p300_mount,\n                               tip_racks=tiprack300)\n\n    num_channels_per_pickup = 1  # (only pickup tips on front-most channel)\n    tips_ordered = [\n        tip for rack in tiprack300\n        for row in rack.rows()[\n         len(rack.rows())-num_channels_per_pickup::-1*num_channels_per_pickup]\n        for tip in row]\n    tip_count = 0\n\n    def pick_up(pip):\n        nonlocal tip_count\n        pip.pick_up_tip(tips_ordered[tip_count])\n        tip_count += 1\n\n    # reagents\n    mag_beads = reservoir.rows()[0][:4]\n    ethanol = reservoir.rows()[0][4:8]\n    npw3 = reservoir.rows()[0][8:12]\n    npw4 = reservoir2.rows()[0][:4]\n\n    proteinase_k = tuberack.rows()[0][:2]\n    ntc = tuberack.rows()[1][0]\n    hsc = tuberack.rows()[2][0]\n    elution_buffer = tuberack.rows()[3][:4]\n\n    # add controls\n    p1000.pick_up_tip()\n    p1000.transfer(400, ntc, sample_block.wells()[0], new_tip='never')\n    p1000.drop_tip()\n\n    p1000.pick_up_tip()\n    p1000.transfer(400, hsc, sample_block.wells()[1], new_tip='never')\n    p1000.drop_tip()\n    ctx.comment('\\n\\n\\n\\n\\n')\n\n    # add proteinase k and incubate for 15 minutes\n    for s, d in zip(proteinase_k*num_samp, sample_block.wells()[:num_samp]):\n        pick_up(p300)\n        p300.aspirate(24, s)\n        p300.dispense(24, d)\n        p300.mix(mix_reps, 300, d)\n        p300.drop_tip()\n    ctx.delay(minutes=15)\n    ctx.comment('\\n\\n\\n\\n\\n')\n\n    # add magnetic beads\n    p1000.pick_up_tip()\n    for mag_well, dest in zip(mag_beads*num_samp,\n                              sample_block.wells()[:num_samp]):\n        p1000.mix(5, 1000, mag_well)\n        p1000.transfer(595, mag_well, dest.top(), new_tip='never')\n    p1000.drop_tip()\n    ctx.comment('\\n\\n\\n\\n\\n')\n\n    # make npw3, npw4 and ethanol npw3_block\n    # ethanol\n    p1000.pick_up_tip()\n    for ethanol_well, dest in zip(ethanol*num_samp,\n                                  ethanol_block.wells()[:num_samp]):\n        p1000.transfer(600, ethanol_well, dest.top(), new_tip='never')\n    p1000.drop_tip()\n    ctx.comment('\\n\\n\\n\\n\\n')\n\n    # npw3\n    p1000.pick_up_tip()\n    for npw3_well, dest in zip(npw3*num_samp,\n                               npw3_block.wells()[:num_samp]):\n        p1000.transfer(600, npw3_well, dest.top(), new_tip='never')\n    p1000.drop_tip()\n    ctx.comment('\\n\\n\\n\\n\\n')\n\n    # npw4\n    p1000.pick_up_tip()\n    for npw4_well, dest in zip(npw4*num_samp, npw4_block.wells()[:num_samp]):\n        p1000.transfer(600, npw4_well, dest.top(), new_tip='never')\n    p1000.drop_tip()\n\n    # elution buffer\n    pick_up(p300)\n    for elution_tubes, elution_well in zip(elution_buffer*num_samp,\n                                           elution_block.wells()[:num_samp]):\n        p300.aspirate(50, elution_tubes)\n        p300.dispense(50, elution_well.top())\n    p300.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of wells (1-96)",
            "name": "num_samp",
            "type": "int"
        },
        {
            "default": 15,
            "label": "Mix Repetitions to Re-suspend beads",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "label": "P1000 Single Channel Mount (GEN2)",
            "name": "p1000_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi Channel Mount (GEN2)",
            "name": "p300_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 12 Well Reservoir 15 mL on 1",
            "share": false,
            "slot": "1",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 3",
            "share": false,
            "slot": "3",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.7",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protodestName": "Extraction Prep with Kingfisher Flex Extractor",
        "source": "Custom Protodest Request"
    },
    "modules": []
}