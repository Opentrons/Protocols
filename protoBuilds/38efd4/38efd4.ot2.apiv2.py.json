{
    "content": "from opentrons.protocol_api.labware import Well, OutOfTipsError\nfrom types import MethodType\nimport math\nimport csv\n\nmetadata = {\n    'title': 'Protein Crystallization Screen Formulation',\n    'author': 'Steve Plonk',\n    'apiLevel': '2.10'\n}\n\n\ndef run(ctx):\n\n    [skip_mix_step, labware1, labware2, labware3, labware4, labware5, labware6,\n     labware7, labware8, reagents_csv, formulation_csv\n     ] = get_values(  # noqa: F821\n        \"skip_mix_step\", \"labware1\", \"labware2\", \"labware3\", \"labware4\",\n        \"labware5\", \"labware6\", \"labware7\", \"labware8\", \"reagents_csv\",\n        \"formulation_csv\")\n\n    ctx.set_rail_lights(True)\n    ctx.delay(seconds=10)\n\n    # p300 single, p1000 single, tips\n    tips300 = [ctx.load_labware(\n     'opentrons_96_tiprack_300ul', str(slot)) for slot in [10]]\n    tips1000 = [ctx.load_labware(\n     'opentrons_96_tiprack_1000ul', str(slot)) for slot in [11]]\n    p300s = ctx.load_instrument(\"p300_single_gen2\", 'left', tip_racks=tips300)\n    p1000s = ctx.load_instrument(\n     \"p1000_single_gen2\", 'right', tip_racks=tips1000)\n\n    # load labware for reagents (based on protocol parameters)\n    reagent_labware = [\n     ctx.load_labware(labware, slot) for labware, slot in zip(\n      [labware1, labware2, labware3, labware4, labware5, labware6, labware7,\n       labware8], [num+1 for num in range(8)]) if labware is not None]\n\n    ctx.comment(\n     \"reagent labware loaded for this run {}\".format(\n      [labware.load_name for labware in reagent_labware]))\n\n    # crystallization screening plate\n    output_plate = ctx.load_labware(\n     'usascientific_96_wellplate_2.4ml_deep', '9')\n\n    def pick_up_or_refill(self):\n        try:\n            self.pick_up_tip()\n        except OutOfTipsError:\n            pause_attention(\n             \"\"\"Please Refill the {} Tip Boxes\n                and Empty the Tip Waste.\"\"\".format(self))\n            self.reset_tipracks()\n            self.pick_up_tip()\n\n    def pause_attention(message):\n        ctx.set_rail_lights(False)\n        ctx.delay(seconds=10)\n        ctx.pause(message)\n        ctx.set_rail_lights(True)\n\n    def slow_tip_withdrawal(self, speed_limit, well_location, to_center=False):\n        if self.mount == 'right':\n            axis = 'A'\n        else:\n            axis = 'Z'\n        ctx.max_speeds[axis] = speed_limit\n        if to_center is False:\n            self.move_to(well_location.top())\n        else:\n            self.move_to(well_location.center())\n        ctx.max_speeds[axis] = None\n\n    def delay(self, delay_time):\n        ctx.delay(seconds=delay_time)\n\n    def prewet_tips(self, well_location, vol=None, reps=2):\n        for rep in range(reps):\n            if vol is None:\n                vol = self.max_volume\n            else:\n                vol = vol\n            self.aspirate(vol, well_location.height_dec(vol))\n            self.dispense(vol, well_location.height_inc(vol))\n\n    def blow_out_solvent(self, well_location, reps=3, delay=1, touch=False):\n        for rep in range(reps):\n            if rep > 0:\n                self.aspirate(self.max_volume, source.top())\n            self.blow_out(well_location.top())\n        if touch is True:\n            self.touch_tip(radius=0.75, v_offset=-2, speed=20)\n\n    class WellH(Well):\n        def __init__(self, well, min_height=5, comp_coeff=1.15,\n                     current_volume=0):\n            super().__init__(well._impl)\n            self.well = well\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n            self.current_volume = current_volume\n            if self.diameter is not None:\n                self.radius = self.diameter/2\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            self.height = current_volume/cse\n            if self.height < min_height:\n                self.height = min_height\n            elif self.height > well.parent.highest_z:\n                raise Exception(\"\"\"Specified liquid volume\n                can not exceed the height of the labware.\"\"\")\n\n        def height_dec(self, vol):\n            if self.diameter is not None:\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            dh = (vol/cse)*self.comp_coeff\n            if self.height - dh > self.min_height:\n                self.height = self.height - dh\n            else:\n                self.height = self.min_height\n            if self.current_volume - vol > 0:\n                self.current_volume = self.current_volume - vol\n            else:\n                self.current_volume = 0\n            return(self.well.bottom(self.height))\n\n        def height_inc(self, vol, top=False):\n            if self.diameter is not None:\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            ih = (vol/cse)*self.comp_coeff\n            if self.height < self.min_height:\n                self.height = self.min_height\n            if self.height + ih < self.depth:\n                self.height = self.height + ih\n            else:\n                self.height = self.depth\n            self.current_volume += vol\n            if top is False:\n                return(self.well.bottom(self.height))\n            else:\n                return(self.well.top())\n\n    def create_chunks(list_name, n):\n        for i in range(0, len(list_name), n):\n            yield list_name[i:i+n]\n\n    for pipette_object in [p300s, p1000s]:\n        for method in [prewet_tips, delay, slow_tip_withdrawal,\n                       blow_out_solvent, pick_up_or_refill]:\n            setattr(\n             pipette_object, method.__name__,\n             MethodType(method, pipette_object))\n\n    # wells of output plate as rows\n    dest_wells = []\n    for row in output_plate.rows():\n        row_wells = []\n        for well in row:\n            new = WellH(well, min_height=3)\n            row_wells.append(new)\n        dest_wells.append(row_wells)\n\n    # formulation csv input\n    [first_blank_line, *formulation_csv_lines] = formulation_csv.splitlines()\n    dispenses = []\n    liquids = [\"H2O\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n    lines = [*csv.reader(formulation_csv_lines)]\n    for chunk in create_chunks(lines, 9):\n        new = {}\n        for line, liquid in zip(chunk, liquids):\n            new[liquid] = []\n            for index in range(2, 26, 2):\n                new[liquid].append(line[index])\n        dispenses.append(new)\n\n    # reagent csv input\n    [*reagent_csv_lines] = reagents_csv.splitlines()\n    reagents = []\n    for line in csv.DictReader(reagent_csv_lines):\n        if line['Deck_Slot']:\n            new = {}\n            for key, value in zip(\n             [\"reagent\", \"slot\", \"wells\", \"vols\", \"liq\", \"viscosity\", \"sticky\"\n              ], [\n              line[\"Reagent\"], line[\"Deck_Slot\"], line[\"Positions\"].split(),\n              line[\"Initial Volumes\"].split(), line[\"Liquid Class\"],\n              line[\"Viscosity\"], line[\"Stickiness\"]]):\n                new[key] = value\n            reagents.append(new)\n\n    source_locations = {}\n    source_volumes = {}\n    source_class = {}\n    source_viscosity = {}\n    for reagent in reagents:\n        for key, value in ctx.loaded_labwares.items():\n            if str(key) == str(reagent[\"slot\"]):\n                source_locations[str(reagent[\"reagent\"])] = [\n                 value.wells_by_name()[well] for well in reagent[\"wells\"]]\n                source_volumes[str(reagent[\"reagent\"])] = [\n                 int(volume) for volume in reagent[\"vols\"]]\n                source_class[str(reagent[\"reagent\"])] = reagent[\"liq\"]\n                source_viscosity[\n                 str(reagent[\"reagent\"])] = reagent[\"viscosity\"]\n\n    for rgnt in source_locations.keys():\n        ctx.comment(\"Transferring reagent {} to output plate\".format(rgnt))\n        liquid_class = source_class[rgnt]\n        ctx.comment(\" liquid class {}\".format(liquid_class))\n        if liquid_class == \"viscous\":\n            if not source_viscosity[rgnt]:\n                raise Exception(\"\"\"Viscosity in mPa*s must be provided\n                for each viscous reagent.\"\"\")\n            else:\n                viscosity = int(round(float(source_viscosity[rgnt])))\n                ctx.comment(\" viscosity {}\".format(viscosity))\n                delay_time = round(1.67*(viscosity**0.2831))\n                ctx.comment(\n                 \"\"\"calculated post-aspirate and post-dispense delay\n                 of {} seconds\"\"\".format(delay_time))\n                adjusted_rate = round(\n                 (81.379*(math.e)**(-0.002*viscosity)) / 92, 1)\n                ctx.comment(\"\"\"calculated aspirate and dispense flow rate\n                adjusted to {} times default rate.\"\"\".format(adjusted_rate))\n                withdraw_speed = int(round(6.4613*(viscosity**-0.318)))\n                ctx.comment(\"\"\"calculated tip withdraw speed adjusted\n                to {} mm/sec.\"\"\".format(withdraw_speed))\n                top_dispenses = False\n        else:\n            delay_time = 0\n            adjusted_rate = 1\n            withdraw_speed = None\n            top_dispenses = True\n\n        source_wells = []\n        for well, vol in zip(source_locations[rgnt], source_volumes[rgnt]):\n            new = WellH(well, min_height=3, current_volume=int(vol))\n            source_wells.append(new)\n        ctx.comment('''using locations as source: {}'''.format(source_wells))\n\n        def reagent_wells():\n            yield from source_wells\n\n        reagent_well = reagent_wells()\n        source = next(reagent_well)\n        for row, dispense in zip(dest_wells, dispenses):\n            for well, vol in zip(row, dispense[rgnt]):\n                if vol:\n                    if (source.current_volume <= 100 or (\n                     int(vol) + 100) > source.current_volume):\n                        try:\n                            source = next(reagent_well)\n                        except StopIteration:\n                            ctx.comment(\n                             \"reagent {} supply is exhausted\".format(rgnt))\n                            ctx.comment('''due to insufficient reagent volume,\n                            skipped transfers (except well dispenses already\n                            completed and listed above) to row {}'''.format(\n                             row))\n                            break\n                    if (source.current_volume <= 100 or (\n                     int(vol) + 100) > source.current_volume):\n                        ctx.comment(\n                             \"reagent {} supply is exhausted\".format(rgnt))\n                        ctx.comment('''due to insufficient reagent volume,\n                        skipped transfers (except well dispenses already\n                        completed and listed above) to row {}'''.format(\n                             row))\n                        break\n                    reps = 1\n                    if liquid_class == \"volatile\":\n                        air_gap_vol = 15\n                    else:\n                        air_gap_vol = 0\n                    if int(vol) + air_gap_vol > 300:\n                        pip = p1000s\n                        if liquid_class == \"volatile\":\n                            air_gap_vol = 25\n                        top_dispenses = True\n                        if int(vol) + air_gap_vol > 1000:\n                            reps = math.ceil(int(vol) / 1000)\n                    else:\n                        pip = p300s\n                        if int(vol) < 50:\n                            top_dispenses = False\n                    if not pip.has_tip:\n                        pip.pick_up_or_refill()\n                    for rep in range(reps):\n                        if liquid_class == \"volatile\":\n                            pip.prewet_tips(source)\n                        pip.aspirate(\n                         (int(vol) / reps), source.height_dec(int(vol) / reps),\n                         rate=adjusted_rate)\n                        pip.delay(delay_time)\n                        if withdraw_speed is not None:\n                            pip.slow_tip_withdrawal(withdraw_speed, source)\n                        if liquid_class == \"volatile\":\n                            pip.air_gap(air_gap_vol)\n                        dispense_location = well.height_inc(\n                         int(vol) / reps, top=top_dispenses)\n                        pip.dispense(\n                         (int(vol) / reps)+air_gap_vol,\n                         dispense_location, rate=adjusted_rate)\n                        pip.delay(delay_time)\n                        if liquid_class == \"volatile\":\n                            pip.blow_out_solvent(well)\n                        else:\n                            original_value = pip.flow_rate.blow_out\n                            if liquid_class == \"viscous\":\n                                pip.flow_rate.blow_out = original_value / 10\n                            pip.blow_out()\n                            pip.flow_rate.blow_out = original_value\n                        if top_dispenses is False:\n                            if withdraw_speed is not None:\n                                pip.slow_tip_withdrawal(withdraw_speed, well)\n                            pip.drop_tip()\n        for pipette in [p300s, p1000s]:\n            if pipette.has_tip:\n                pipette.drop_tip()\n    if not skip_mix_step:\n        for row in dest_wells:\n            for well in row:\n                if well.current_volume > 0:\n                    p1000s.pick_up_or_refill()\n                    mix_volume = well.current_volume / 2\n                    if (well.current_volume / 2) > 1000:\n                        mix_volume = 1000\n                    p1000s.mix(\n                     10, mix_volume, well.bottom(well.height / 2), rate=0.25)\n                    p1000s.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Skip Mixing Step? (yes or no)",
            "name": "skip_mix_step",
            "options": [
                {
                    "label": "YES - skip the mix step",
                    "value": true
                },
                {
                    "label": "NO - do not skip the mix step",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 1",
            "name": "labware1",
            "options": [
                {
                    "label": "Deck Slot 1 Empty",
                    "value": null
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 2",
            "name": "labware2",
            "options": [
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "Deck Slot 2 Empty",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 3",
            "name": "labware3",
            "options": [
                {
                    "label": "Deck Slot 3 Empty",
                    "value": null
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 4",
            "name": "labware4",
            "options": [
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "Deck Slot 4 Empty",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 5",
            "name": "labware5",
            "options": [
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                },
                {
                    "label": "Deck Slot 5 Empty",
                    "value": null
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 6",
            "name": "labware6",
            "options": [
                {
                    "label": "Deck Slot 6 Empty",
                    "value": null
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 7",
            "name": "labware7",
            "options": [
                {
                    "label": "Deck Slot 7 Empty",
                    "value": null
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tube Rack in Deck Slot 8",
            "name": "labware8",
            "options": [
                {
                    "label": "Deck Slot 8 Empty",
                    "value": null
                },
                {
                    "label": "opentrons_6_tuberack_falcon_50ml_conical",
                    "value": "opentrons_6_tuberack_falcon_50ml_conical"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap",
                    "value": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
                },
                {
                    "label": "opentrons_15_tuberack_falcon_15ml_conical",
                    "value": "opentrons_15_tuberack_falcon_15ml_conical"
                },
                {
                    "label": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical",
                    "value": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": "Reagent,Deck_Slot,Positions,Initial Volumes,Liquid Class,Viscosity,Stickiness\nH2O,4,A1 B1 A2 B2,15000 15000 15000 15000,aqueous,,\n1,4,A3 B3,15000 15000,viscous,45.86,\n2,2,A1 B1 C1 D1 A2 B2 C2 D2,1200 1500 1000 1250 1500 1500 1500 1500,aqueous,,\n3,2,A3 B3 C3 D3 A4 B4 C4 D4,1200 1500 1000 1250 1500 1500 1500 1500,volatile,,\n4,5,A1 A2 A3 A4 A6,450 2000 2000 2000 2000,aqueous,,\n5,5,D1 D2 D3 D4 D6,2000 2000 2000 2000 2000,volatile,,\n6,None,,,,,\n7,None,,,,,\n8,None,,,,,\n",
            "label": "Reagents CSV (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "reagents_csv",
            "type": "textFile"
        },
        {
            "default": ",1,,2,,3,,4,,5,,6,,7,,8,,9,,10,,11,,12,\nA,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200\n,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200,Reagent 1,1200\n,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500,Reagent 2,500\n,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500,Reagent 3,500\n,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,\n,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nB,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200,H2O,1200\n,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500,Reagent 1,500\n,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250,Reagent 2,250\n,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100,Reagent 3,100\n,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,\n,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nC,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290,H2O,290\n,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250,Reagent 1,250\n,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50\n,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50\n,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150,Reagent 4,150\n,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500,Reagent 5,500\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nD,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850,H2O,850\n,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50\n,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35,Reagent 2,35\n,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20,Reagent 3,20\n,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50,Reagent 4,50\n,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100,Reagent 5,100\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nE,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400,H2O,400\n,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35,Reagent 1,35\n,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,,Reagent 2,\n,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,,Reagent 3,\n,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35,Reagent 4,35\n,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50,Reagent 5,50\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nF,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35,H2O,35\n,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,,Reagent 1,\n,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50\n,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50\n,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,\n,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35,Reagent 5,35\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nG,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,,H2O,\n,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50\n,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50\n,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50\n,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,\n,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20,Reagent 5,20\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\nH,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50,H2O,50\n,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50,Reagent 1,50\n,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50,Reagent 2,50\n,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50,Reagent 3,50\n,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,,Reagent 4,\n,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,,Reagent 5,\n,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,,Reagent 6,\n,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,,Reagent 7,\n,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,,Reagent 8,\n",
            "label": "Formulation CSV (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "formulation_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 2 mL Safe-Lock Snapcap on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 6 Tube Rack with Falcon 50 mL Conical on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_6_tuberack_falcon_50ml_conical"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 2 mL Safe-Lock Snapcap on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "USA Scientific 96 Deep Well Plate 2.4 mL on 9",
            "share": false,
            "slot": "9",
            "type": "usascientific_96_wellplate_2.4ml_deep"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Steve Plonk",
        "title": "Protein Crystallization Screen Formulation"
    },
    "modules": []
}