{
    "content": "import math\nfrom itertools import groupby\n\nmetadata = {\n    'protocolName': 'Fresh Spiking with CSV',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'\n}\n\n\ndef run(ctx):\n\n    [csv, p20_mount, p1000_mount] = get_values(  # noqa: F821\n        \"csv\", \"p20_mount\", \"p1000_mount\")\n\n    # load labware\n    final_rack1 = ctx.load_labware(\n                    'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n                    '2',\n                    label='FINAL RACK 1')\n    final_rack2 = ctx.load_labware(\n                    'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n                    '4',\n                    label='FINAL RACK 2')\n\n    matrix_rack = ctx.load_labware(\n                    'opentrons_15_tuberack_falcon_15ml_conical', '3',\n                    label='MATRIX RACK')\n    analyte_rack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap', '1',\n        label='ANALYTE RACK')\n\n    tiprack20 = [ctx.load_labware('opentrons_96_tiprack_20ul', slot)\n                 for slot in ['5']]\n    tiprack1000 = [ctx.load_labware('opentrons_96_tiprack_1000ul', slot)\n                   for slot in ['8']]\n    # load instrument\n    p20 = ctx.load_instrument('p20_single_gen2',\n                              p20_mount, tip_racks=tiprack20)\n    p1000 = ctx.load_instrument('p1000_single_gen2',\n                                p1000_mount, tip_racks=tiprack1000)\n\n    # protocol\n    list_of_rows = [[val.strip() for val in line.split(',')]\n                    for line in csv.splitlines()\n                    if line.split(',')[0].strip()][1:]\n\n    slot_num_source = 0\n    tube_source = 1\n    vol = 3\n    slot_num_dest = 4\n    tube_dest = 5\n    all_labware = [analyte_rack,\n                   final_rack1,\n                   matrix_rack,\n                   final_rack2]\n\n    a1_v_naught = 0\n    a2_v_naught = 0\n    for row in list_of_rows:\n        if row[slot_num_source] == \"3\":\n            if row[tube_source] == \"A1\":\n                a1_v_naught += float(row[vol])\n            else:\n                a2_v_naught += float(row[vol])\n\n    # liquid height tracking\n    v_naught1 = a1_v_naught\n    v_naught2 = a2_v_naught\n    radius = matrix_rack.wells()[0].diameter/2\n    h_naught1 = v_naught1/(math.pi*radius**2)\n    h_naught2 = v_naught2/(math.pi*radius**2)\n    h1 = h_naught1\n    h2 = h_naught2\n\n    def adjust_height(vol, matrix_tube):\n        nonlocal h1\n        nonlocal h2\n        dh = vol/(math.pi*radius**2)\n        if matrix_tube == \"A1\":\n            h1 -= dh\n            if h1 < 20:\n                h1 = 1\n            else:\n                return h1 - 20\n        else:\n            h2 -= dh\n            if h2 < 20:\n                h2 = 1\n            else:\n                return h2 - 20\n\n    # divide betweeen first and second half of protocol based on slot num\n    dividers = []\n    for row in list_of_rows:\n        dividers.append(row[slot_num_source])\n\n    # transfer target cell\n    sections = [list(j) for i, j in groupby(dividers)]\n\n    for i, _ in enumerate(list_of_rows[:len(sections[0])]):\n\n        # well nomenclature for easier use\n        source = all_labware[int(_[slot_num_source])-1]\n        source_well = _[tube_source]\n        dest = all_labware[int(_[slot_num_dest])-1]\n        dest_well = _[tube_dest]\n        transfer_vol = float(_[vol])\n        pip = p20 if transfer_vol < 100 else p1000\n\n        # liquid height tracking between A1 and A2 on slot 3\n        if _[slot_num_source] == \"3\":\n            if source_well == \"A1\":\n                asp_loc_z = h1\n            elif source_well == \"A2\":\n                asp_loc_z = h2\n\n        if i == 0:\n            pip.pick_up_tip()\n\n        # aspirate if low on volume\n        if pip.current_volume < transfer_vol-100:\n            if pip.current_volume > 0:\n                pip.dispense(pip.current_volume,\n                             source.wells_by_name()[source_well])\n            pip.aspirate(pip.max_volume,\n                         source.wells_by_name()[source_well].bottom(asp_loc_z))\n\n        pip.dispense(transfer_vol, dest.wells_by_name()[dest_well].top())\n\n        # adjust liquid height\n        if _[slot_num_source] == \"3\":\n            adjust_height(transfer_vol, source_well)\n\n        # get rid of final tip volume at end and drop tip\n        if i == len(sections[0])-1:\n            pip.dispense(pip.current_volume,\n                         source.wells_by_name()[source_well])\n            pip.drop_tip()\n\n    ctx.comment('\\n\\n\\n')\n\n    for _ in list_of_rows[len(sections[0]):]:\n\n        # well nomenclature for easier use\n        source = all_labware[int(_[slot_num_source])-1]\n        source_well = _[tube_source]\n        dest = all_labware[int(_[slot_num_dest])-1]\n        dest_well = _[tube_dest]\n        transfer_vol = float(_[vol])\n        pip = p20 if transfer_vol < 100 else p1000\n\n        # dispense into top if visiting source and well multiple times\n        # to avoid cross contam\n        if transfer_vol > 20:\n            pip.pick_up_tip()\n            pip.transfer(transfer_vol,\n                         source.wells_by_name()[source_well],\n                         dest.wells_by_name()[dest_well].top(),\n                         new_tip='never')\n            pip.blow_out()\n\n        # volumes too low to dispense from top so go into well\n        else:\n            pip.pick_up_tip()\n            pip.transfer(transfer_vol,\n                         source.wells_by_name()[source_well],\n                         dest.wells_by_name()[dest_well],\n                         new_tip='never')\n            pip.blow_out()\n\n        pip.mix(2, 0.6*transfer_vol if 0.6*transfer_vol <\n                pip.max_volume else pip.max_volume,\n                dest.wells_by_name()[dest_well])\n        pip.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Slot No,Position,Sample ID,Volume,Slot No,Tube number,Sample ID\n3,A1,Blank Matrix,200,2,A1,Blk",
            "label": ".CSV File",
            "name": "csv",
            "type": "textFile"
        },
        {
            "label": "P20 Single-Channel Mount",
            "name": "p20_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P1000 Single-Channel Mount",
            "name": "p1000_mount",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "ANALYTE RACK on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "FINAL RACK 1 on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "MATRIX RACK on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "FINAL RACK 2 on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protocolName": "Fresh Spiking with CSV",
        "source": "Custom Protocol Request"
    },
    "modules": []
}