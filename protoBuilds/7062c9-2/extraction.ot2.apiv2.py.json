{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\n\nmetadata = {\n    'protocolName': 'Capping Assay: Steps 3-6',\n    'author': 'Nick <protocols@opentrons.com>',\n    'apiLevel': '2.11'\n}\n\nTEST_MODE = False\n\n\ndef run(ctx):\n    [num_samples, tip_track] = get_values(  # noqa: F821\n        'num_samples', 'tip_track')\n\n    bead_vol = 100.0\n    sample_vol = 110.0\n    park_tips = True\n    mag_height = 6.6\n    z_offset = 1.0\n    radial_offset = 0.3\n    wash1_vol = 200.0\n    wash2_vol = 200.0\n    elution_vol = 100.0\n    air_gap_vol = 0.0\n    bead_settling_time = 1.0\n    temp_time = 5.0\n    mix_reps = 10\n\n    if TEST_MODE:\n        bead_settling_time, mix_reps, temp_time = 0.0, 1, 0.0\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    sample_plate = ctx.load_labware(\n        'opentrons_96_aluminumblock_nest_wellplate_100ul',\n        '1', 'starting sample plate')\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep',\n                                    'deepwell plate')\n    tempdeck = ctx.load_module('Temperature Module Gen2', '7')\n    heatingplate = tempdeck.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul',\n                'heating plate')\n    elutionplate = ctx.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul', '2',\n                'final elution plate')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '11',\n                             'Liquid Waste').wells()[0].top()\n    res = ctx.load_labware('nest_12_reservoir_15ml', '5', 'reagent reservoir')\n    num_cols = math.ceil(num_samples/8)\n    tips300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['3', '6', '9', '10']]\n    if park_tips:\n        rack = ctx.load_labware(\n            'opentrons_96_filtertiprack_200ul', '8', 'tiprack for parking')\n        parking_spots = rack.rows()[0][:num_cols]\n    else:\n        rack = ctx.load_labware(\n            'opentrons_96_filtertiprack_200ul', '8', '200\u00b5l filtertiprack')\n        parking_spots = [None for none in range(12)]\n    tips300.insert(0, rack)\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    wash1 = res.wells()[:2]\n    wash2 = res.wells()[2:5]\n    elution_solution = res.wells()[-1]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    starting_samples_m = sample_plate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n    heating_samples_m = heatingplate.rows()[0][:num_cols]\n    if mag_samples_m[0].width:\n        radius = mag_samples_m[0].width/2\n    else:\n        radius = mag_samples_m[0].diameter/2\n\n    magdeck.disengage()  # just in case\n    tempdeck.set_temperature(85)\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n    ctx._implementation._hw_manager.hardware._attached_instruments[\n        m300._implementation.get_mount()].update_config_item(\n            'pick_up_current', 0.5)\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def _pick_up(pip=m300, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log[pip]['tips'][tip_log[pip]['count']])\n            tip_log[pip]['count'] += 1\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n    drop_threshold = 120\n\n    def _drop(pip=m300):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        if pip.type == 'multi':\n            drop_count += 8\n        else:\n            drop_count += 1\n        if drop_count == drop_threshold:\n            # Setup for flashing lights notification to empty trash\n            ctx.home()  # home before continuing with protocol\n            drop_count = 0\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, park=False, drop=True):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                ctx.pause('Please empty liquid waste (slot 11) before \\\nresuming.')\n\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if not m300.has_tip:\n                if park:\n                    _pick_up(m300, spot)\n                else:\n                    _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0).move(Point(x=side*radius*radial_offset,\n                                         z=z_offset))\n            for _ in range(num_trans):\n                _waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, m.top())\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=air_gap_vol)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            if drop:\n                _drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def wash(vol, source, mix_reps=mix_reps, park=True, resuspend=True,\n             drop=True):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if not m300.has_tip:\n                _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, source.top())\n                m300.transfer(vol_per_trans, source, m.top(),\n                              air_gap=air_gap_vol, new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                m300.mix(mix_reps, 150, loc)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage(height=mag_height)\n\n        ctx.delay(minutes=bead_settling_time, msg='Incubating on MagDeck for \\\n' + str(bead_settling_time) + ' minutes.')\n\n        remove_supernatant(vol, park=park, drop=drop)\n\n    def elute(vol, park=True):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, h, spot) in enumerate(zip(mag_samples_m, heating_samples_m,\n                                             parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            m300.aspirate(vol, h)\n            m300.move_to(m.center())\n            m300.dispense(vol, loc)\n            m300.mix(mix_reps, 0.8*vol, loc)\n            m300.transfer(vol, m.bottom(0.2), h, new_tip='never')\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        ctx.delay(minutes=temp_time, msg=f'Incubating at 85C for {temp_time} \\\nminutes')\n\n        for m, h, spot in zip(mag_samples_m, heating_samples_m,\n                              parking_spots):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            m300.transfer(vol, h.bottom(0.2), m,\n                          mix_before=(mix_reps, 0.8*vol), new_tip='never')\n            _drop(m300)\n\n        magdeck.engage(height=mag_height)\n        ctx.delay(minutes=bead_settling_time, msg='Incubating on MagDeck for \\\n' + str(bead_settling_time) + ' minutes.')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            m300.transfer(vol, loc, e.bottom(5), air_gap=air_gap_vol,\n                          new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(20)\n            m300.drop_tip()\n\n    \"\"\"\n    ACTIONS\n    \"\"\"\n    # pre-heat elution buffer\n    _pick_up(m300)\n    for h in heating_samples_m:\n        m300.transfer(elution_vol, elution_solution, h, new_tip='never')\n\n    # prewash\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=bead_settling_time, msg=f'Beads separating for \\\n{bead_settling_time} minutes.')\n    remove_supernatant(bead_vol, drop=False)\n    # keep tips for wash\n    for w in range(2):\n        wash(wash1_vol, wash1[w], park=park_tips, drop=False)\n\n    # add sample and mix iteratively for ~30 minutes\n    for s, d, p in zip(starting_samples_m, mag_samples_m, parking_spots):\n        if not m300.has_tip:\n            _pick_up()\n        m300.transfer(sample_vol, s, d, new_tip='never')\n        m300.drop_tip(p)\n\n    mixes_per_min = 2\n    num_mix_cycles = int(30*mixes_per_min/num_cols)\n    if TEST_MODE:\n        num_mix_cycles = 1\n    for i in range(num_mix_cycles):\n        for s, p in zip(mag_samples_m, parking_spots):\n            _pick_up(m300, p)\n            m300.mix(10, 0.8*sample_vol, s)\n            if i < num_mix_cycles - 1:\n                m300.drop_tip(p)\n            else:\n                _drop(m300)\n\n    # sample washes\n    for w in range(2):\n        wash(wash1_vol, wash1[w], park=park_tips)\n    for w in range(3):\n        wash(wash2_vol, wash2[w], park=park_tips)\n    elute(elution_vol, park=park_tips)\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 24,
            "label": "number of samples + controls (1-96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "starting sample plate on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "final elution plate on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "deepwell plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "reagent reservoir on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "heating plate on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "tiprack for parking on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Liquid Waste on 11",
            "share": false,
            "slot": "11",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Capping Assay: Steps 3-6"
    },
    "modules": []
}