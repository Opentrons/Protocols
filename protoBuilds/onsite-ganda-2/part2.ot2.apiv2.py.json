{
    "content": "\"\"\"OPENTRONS.\"\"\"\nimport math\nfrom opentrons import types\n\nmetadata = {\n    'protocolName': 'rhAmpSeq Library Prep Part 1 - PCR 1',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\ndef run(ctx):\n    \"\"\"PROTOCOL.\"\"\"\n    [\n     num_samples, m20_mount\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n        \"num_samples\", \"m20_mount\")\n\n    # define all custom variables above here with descriptions:\n    if m20_mount == 'right':\n        m300_mount = 'left'\n    else:\n        m300_mount = 'right'\n    num_cols = math.ceil(num_samples/8)\n    num_etoh_wells = math.ceil((0.4*num_samples)/15)\n    m20_speed_mod = 4\n    airgap_library = 5\n    etoh_res_vol = 15000\n    # load modules\n    mag_module = ctx.load_module('magnetic module gen2', '1')\n\n    # load labware\n    sample_plate = mag_module.load_labware('nest_96_wellplate'\n                                           '_100ul_pcr_full_skirt')\n    reagent_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '2')\n    reagent_resv = ctx.load_labware('nest_12_reservoir_15ml', '3')\n    # load tipracks\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul',\n                                  str(slot))\n                 for slot in [4, 5]]\n    tiprack300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul',\n                                   str(slot))\n                  for slot in [6, 7, 8, 9, 10, 11]]\n    # load instrument\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount, tip_racks=tiprack20)\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount,\n                               tip_racks=tiprack300)\n    # reagents\n    sample_plate_dest = sample_plate.rows()[0][:num_cols]\n    library_mix = reagent_plate.rows()[0][0]\n    pcr_forward = reagent_plate.rows()[0][1]\n    pcr_reverse = reagent_plate.rows()[0][2]\n    beads_1 = reagent_plate.rows()[0][3]\n    beads_2 = reagent_plate.rows()[0][4]\n    idte = reagent_plate.rows()[0][5]\n    # well volume tracking is better solution for this\n    etoh_1 = reagent_resv.wells()[0]\n    etoh_2 = reagent_resv.wells()[1]\n    etoh_3 = reagent_resv.wells()[2]\n    etoh_4 = reagent_resv.wells()[3]\n    liquid_trash_1 = reagent_resv.wells()[8]\n    liquid_trash_2 = reagent_resv.wells()[9]\n    liquid_trash_3 = reagent_resv.wells()[10]\n    liquid_trash_4 = reagent_resv.wells()[11]\n\n    etoh_total = [etoh_1, etoh_2, etoh_3, etoh_4]\n    trash_total = [liquid_trash_1, liquid_trash_2, liquid_trash_3,\n                   liquid_trash_4]\n    # Volume and Height Tracking\n    # class VolHeightTracker:\n    #     def __init__(self, labware, well_vol, start=0, end=12,\n    #                  min_height=1, comp_coeff=0.9, msg='Reset Labware'):\n    #         try:\n    #             self.labware_wells = dict.fromkeys(\n    #                 labware.wells()[start:end], 0)\n    #         except Exception:\n    #             self.labware_wells = dict.fromkeys(\n    #                 labware, 0)\n    #         self.labware_wells_backup = self.labware_wells.copy()\n    #         self.well_vol = well_vol\n    #         self.start = start\n    #         self.end = end\n    #         self.min_height = min_height\n    #         self.comp_coeff = comp_coeff\n    #         self.width = labware.wells()[0].xDimension\n    #         self.length = labware.wells()[0].yDimension\n    #         self.area = self.width*self.length\n    #         self.msg = msg\n    #\n    #     def tracker(self, vol):\n    #         '''tracker() will track how much liquid\n    #         was used up per well. If the volume of\n    #         a given well is greater than self.well_vol\n    #         it will remove it from the dictionary and iterate\n    #         to the next well which will act as the reservoir.'''\n    #         well = next(iter(self.labware_wells))\n    #         if self.labware_wells[well] + vol >= self.well_vol:\n    #             del self.labware_wells[well]\n    #             if len(self.labware_wells) < 1:\n    #                 ctx.pause(self.msg)\n    #                 self.labware_wells = self.labware_wells_backup.copy()\n    #             well = next(iter(self.labware_wells))\n    #         dh = (self.well_vol - self.labware_wells[well]) / self.area \\\n    #             * self.comp_coeff\n    #         height = self.min_height if dh < 1 else round(dh, 2)\n    #         self.labware_wells[well] = self.labware_wells[well] + vol\n    #         ctx.comment(f'''{int(self.labware_wells[well])} uL of liquid\n    #                     used from {well}''')\n    #         ctx.comment(f'Current Liquid Height of {well}: {height}mm')\n    #         return well.bottom(height)\n    #\n    #     def trash_tracker(self, vol):\n    #         '''WIP trash_tracker() will track how much liquid\n    #         was added per well. If the volume of\n    #         a given well is greater than self.well_vol\n    #         it will remove it from the dictionary and iterate\n    #         to the next well which will act as the new trash.'''\n    #         cutoff_vol = self.well_vol*0.75\n    #         well = next(iter(self.labware_wells))\n    #         if self.labware_wells[well] + vol >= cutoff_vol:\n    #             del self.labware_wells[well]\n    #             if len(self.labware_wells) < 1:\n    #                 ctx.pause(self.msg)\n    #                 self.labware_wells = self.labware_wells_backup.copy()\n    #             well = next(iter(self.labware_wells))\n    #         dh = (self.well_vol - self.labware_wells[well]) / self.area \\\n    #             * self.comp_coeff\n    #         height = self.min_height if dh < 1 else round(dh, 2)\n    #         self.labware_wells[well] = self.labware_wells[well] + vol\n    #         ctx.comment(f'''{int(self.labware_wells[well])} uL of liquid\n    #                     used from {well}''')\n    #         ctx.comment(f'Current Liquid Height of {well}: {height}mm')\n    #         return well.bottom(height)\n\n    # etohTrack = VolHeightTracker(etoh_total, well_vol=etoh_res_vol, start=0,\n    #                              end=96)\n    etoh_volumes = dict.fromkeys(reagent_resv.wells()[:4], 0)\n    supernatant_headspeed_modulator = 5\n\n    def liquid_tracker(vol):\n        '''liquid_tracker() will track how much liquid\n        was used up per well. If the volume of\n        a given well is greater than 'liquid'_res_vol\n        it will remove it from the dictionary and iterate\n        to the next well which will act as the reservoir.'''\n        well = next(iter(etoh_volumes))\n        if etoh_volumes[well] > etoh_res_vol:\n            del etoh_volumes[well]\n            well = next(iter(etoh_volumes))\n        etoh_volumes[well] = etoh_volumes[well] + vol\n        ctx.comment(f'{int(etoh_volumes[well])} uL of water used from {well}')\n        return well\n\n    def bead_mixing(well, pip, mvol, reps=8):\n\n            \"\"\"\n            'bead_mixing' will mix liquid that contains beads. This will be done by\n            aspirating from the bottom of the well and dispensing from the top as to\n            mix the beads with the other liquids as much as possible. Aspiration and\n            dispensing will also be reversed for a short to to ensure maximal mixing.\n            param well: The current well that the mixing will occur in.\n            param pip: The pipet that is currently attached/ being used.\n            param mvol: The volume that is transferred before the mixing steps.\n            param reps: The number of mix repetitions that should occur. Note~\n            During each mix rep, there are 2 cycles of aspirating from bottom,\n            dispensing at the top and 2 cycles of aspirating from middle,\n            dispensing at the bottom\n            \"\"\"\n            center = well.top().move(types.Point(x=0, y=0, z=5))\n            aspbot = well.bottom(1)\n            asptop = well.bottom(10)\n            disbot = well.bottom(3)\n            distop = well.top()\n\n            vol = mvol * .9\n\n            pip.move_to(center)\n            for _ in range(reps):\n                pip.aspirate(vol, aspbot)\n                pip.dispense(vol, distop)\n                pip.aspirate(vol, asptop)\n                pip.dispense(vol, disbot)\n    # PROTOCOL\n    etoh_wash_vol = 200\n    for dest in sample_plate_dest:\n        m300.flow_rate.aspirate /= 4\n        m300.flow_rate.dispense /= 4\n        m300.pick_up_tip()\n        m300.aspirate(30, beads_1)\n        m300.dispense(30, dest)\n        m300.flow_rate.aspirate *= 2\n        m300.flow_rate.dispense *= 2\n        bead_mixing(dest, m300, 30, reps=10)\n        m300.flow_rate.aspirate *= 2\n        m300.flow_rate.dispense *= 2\n        m300.drop_tip()\n\n    ctx.delay(minutes=10)\n    mag_module.engage()\n    ctx.delay(minutes=5)\n\n    ctx.comment('''discarding supernatant''')\n    ctx.max_speeds['Z'] = 50\n    ctx.max_speeds['A'] = 50\n    num_times = 1\n    mag_module.engage()\n    ctx.delay(minutes=3)\n    for source in sample_plate_dest:\n        side = 1 if num_times % 2 == 0 else -1\n        m300.pick_up_tip()\n        m300.flow_rate.aspirate /= 5\n        m300.move_to(source.top())\n        ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n        m300.aspirate(\n            50, source.bottom().move(types.Point(x=side,\n                                                 y=0, z=0.5)))\n        m300.move_to(source.top())\n        m300.flow_rate.aspirate *= 5\n        ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n        m300.dispense(50, liquid_trash_1)\n        m300.drop_tip()\n        num_times += 1\n        print(side)\n\n        # etoh wash needs the multi-source well function to work!\n    ctx.comment(\"Ethanol Wash\")\n    for _ in range(2):\n        for dest in sample_plate_dest:\n            m300.pick_up_tip()\n            m300.aspirate(200, etoh_1)\n            m300.dispense(200, dest)\n            m300.drop_tip()\n        ctx.delay(minutes=1)\n        for source in sample_plate_dest:\n            side = 1 if num_times % 2 == 0 else -1\n            m300.pick_up_tip()\n            m300.flow_rate.aspirate /= 5\n            m300.move_to(source.top())\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            m300.aspirate(\n                50, source.bottom().move(types.Point(x=side,\n                                                     y=0, z=0.5)))\n            m300.move_to(source.top())\n            m300.flow_rate.aspirate *= 5\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(50, liquid_trash_1)\n            m300.drop_tip()\n            num_times += 1\n            print(side)\n\n    ctx.delay(minutes=3)\n    mag_module.disengage()\n    ctx.comment('Adding IDTE')\n    for dest in sample_plate_dest:\n        m20.pick_up_tip()\n        m20.aspirate(15, idte)\n        m20.dispense(15, idte)\n        m20.drop_tip()\n\n    ctx.pause(\"Please vortex and centrifuge sample plate, return to slot 1\")\n\n    ctx.delay(minutes=3)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of Samples (max 288)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "P20 Multi GEN2 mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 15,
            "label": "Overage Percent",
            "name": "overage_percent",
            "type": "float"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "rhAmpSeq Library Prep Part 1 - PCR 1",
        "source": "Custom Protocol Request"
    },
    "modules": []
}