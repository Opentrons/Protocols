{
    "content": "\"\"\"OPENTRONS.\"\"\"\nimport math\nimport threading\nfrom time import sleep\nfrom opentrons import types\n\nmetadata = {\n    'protocolName': 'rhAmpSeq Library Prep Part 2 - Cleanup 1',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\nTEST_MODE = False\n\n\nclass CancellationToken:\n    \"\"\"flash_setup.\"\"\"\n\n    def __init__(self):\n        \"\"\"init.\"\"\"\n        self.is_continued = False\n\n    def set_true(self):\n        \"\"\"set_true.\"\"\"\n        self.is_continued = True\n\n    def set_false(self):\n        \"\"\"set_false.\"\"\"\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    \"\"\"Turn on blinking.\"\"\"\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    \"\"\"Create thread.\"\"\"\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\ndef run(ctx):\n    \"\"\"PROTOCOL.\"\"\"\n    [\n     num_samples, m20_mount, flash\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n        \"num_samples\", \"m20_mount\", \"flash\")\n\n    # define all custom variables above here with descriptions:\n    cancellationToken = CancellationToken()\n    if m20_mount == 'right':\n        m300_mount = 'left'\n    else:\n        m300_mount = 'right'\n    num_cols = math.ceil(num_samples/8)\n    # num_etoh_wells = math.ceil((0.4*num_samples)/15)\n    # m20_speed_mod = 4\n    # airgap_library = 5\n    etoh_res_vol = 15000\n    # load modules\n    mag_module = ctx.load_module('magnetic module gen2', '1')\n\n    # load labware\n    sample_plate = mag_module.load_labware('nest_96_wellplate'\n                                           '_100ul_pcr_full_skirt')\n    reagent_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '2', 'reagent plate')\n    elution_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '5', 'elution plate')\n    reagent_resv = ctx.load_labware('nest_12_reservoir_15ml', '4')\n    # load tipracks\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul',\n                                  str(slot))\n                 for slot in [3, 6][:math.ceil(num_samples/48)]]\n    tiprack300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul',\n                                   str(slot))\n                  for slot in [7, 8, 10, 11][:math.ceil(num_samples/16)]]\n    # load instrument\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount, tip_racks=tiprack20)\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount,\n                               tip_racks=tiprack300)\n    # reagents\n    sample_plate_dest = sample_plate.rows()[0][:num_cols]\n    elution_dest = elution_plate.rows()[0][:num_cols]\n    # library_mix = reagent_plate.rows()[0][0]\n    # pcr_forward = reagent_plate.rows()[0][1]\n    # pcr_reverse = reagent_plate.rows()[0][2]\n    beads = reagent_plate.rows()[0][3:6]\n    idte = reagent_plate.rows()[0][6]\n    etoh_1 = reagent_resv.wells()[0]\n    etoh_2 = reagent_resv.wells()[1]\n    etoh_3 = reagent_resv.wells()[2]\n    etoh_4 = reagent_resv.wells()[3]\n    liquid_trash_1 = reagent_resv.wells()[8]\n    liquid_trash_2 = reagent_resv.wells()[9]\n    liquid_trash_3 = reagent_resv.wells()[10]\n    liquid_trash_4 = reagent_resv.wells()[11]\n\n    etoh_total = [etoh_1, etoh_2, etoh_3, etoh_4]\n    trash_total = [liquid_trash_1, liquid_trash_2, liquid_trash_3,\n                   liquid_trash_4]\n    etoh_volumes = dict.fromkeys(reagent_resv.wells()[:4], 0)\n    # etoh_wash_vol = 200\n    supernatant_headspeed_modulator = 5\n\n    def liquid_tracker(vol):\n        \"\"\"liquid_tracker.\"\"\"\n        '''liquid_tracker() will track how much liquid\n        was used up per well. If the volume of\n        a given well is greater than 'liquid'_res_vol\n        it will remove it from the dictionary and iterate\n        to the next well which will act as the reservoir.'''\n        well = next(iter(etoh_volumes))\n        if etoh_volumes[well] > etoh_res_vol:\n            del etoh_volumes[well]\n            well = next(iter(etoh_volumes))\n        etoh_volumes[well] = etoh_volumes[well] + vol\n        ctx.comment(f'{int(etoh_volumes[well])} uL of water used from {well}')\n        return well\n\n    def bead_mixing(well, pip, mvol, reps=10):\n        \"\"\"bead_mixing.\"\"\"\n        \"\"\"\n        'bead_mixing' will mix liquid that contains beads. This will be done by\n        aspirating from the bottom of the well and dispensing from the top to\n        mix the beads with the other liquids as much as possible. Aspiration &\n        dispensing will also be reversed to ensure proper mixing.\n        param well: The current well that the mixing will occur in.\n        param pip: The pipet that is currently attached/ being used.\n        param mvol: The volume that is transferred before the mixing steps.\n        param reps: The number of mix repetitions that should occur. Note~\n        During each mix rep, there are 2 cycles of aspirating from bottom,\n        dispensing at the top and 2 cycles of aspirating from middle,\n        dispensing at the bottom\n        \"\"\"\n        vol = mvol * .9\n\n        pip.move_to(well.center())\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(1))\n            pip.dispense(vol, well.bottom(5))\n\n    # PROTOCOL\n    for i, dest in enumerate(sample_plate_dest):\n        m300.flow_rate.aspirate /= 4\n        m300.flow_rate.dispense /= 4\n        m300.pick_up_tip()\n        m300.aspirate(30, beads[i//4])\n        m300.dispense(30, dest)\n        m300.flow_rate.aspirate *= 2\n        m300.flow_rate.dispense *= 2\n        bead_mixing(dest, m300, 30, reps=10)\n        m300.flow_rate.aspirate *= 2\n        m300.flow_rate.dispense *= 2\n        m300.drop_tip()\n\n    if not TEST_MODE:\n        ctx.delay(minutes=10, msg='Incubating off magnet')\n    mag_module.engage()\n    if not TEST_MODE:\n        ctx.delay(minutes=5, msg='Incubating on magnet')\n\n    ctx.comment('''discarding supernatant''')\n    ctx.max_speeds['Z'] = 50\n    ctx.max_speeds['A'] = 50\n    for i, source in enumerate(sample_plate_dest):\n        trash_dest = trash_total[i//3]\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip()\n        m300.flow_rate.aspirate /= 5\n        m300.move_to(source.top())\n        ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n        m300.aspirate(\n            70, source.bottom().move(types.Point(x=side,\n                                                 y=0, z=0.2)))\n        m300.move_to(source.top())\n        m300.air_gap(20)\n        m300.flow_rate.aspirate *= 5\n        ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n        m300.dispense(m300.current_volume, trash_dest)\n        m300.drop_tip()\n\n    # etoh wash needs the multi-source well function to work!\n    ctx.comment(\"Ethanol Wash\")\n    num_times = 0\n    for _ in range(2):\n        m300.pick_up_tip()\n        for i, dest in enumerate(sample_plate_dest):\n            etoh_source = etoh_total[i//4]\n            m300.aspirate(200, etoh_source)\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            m300.move_to(etoh_source.top())\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(200, dest.top(1))\n        m300.move_to(etoh_1.top())\n        if not TEST_MODE:\n            ctx.delay(minutes=1)\n        if num_times == 0:\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            m300.home()\n            ctx.pause('Please Empty Trash')\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n            ctx.pause()\n        for i, source in enumerate(sample_plate_dest):\n            side = -1 if i % 2 == 0 else 1\n            if not m300.has_tip:\n                m300.pick_up_tip()\n            m300.flow_rate.aspirate /= 5\n            m300.move_to(source.top())\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            for asp_num in reversed(range(4)):\n                asp_height = source.depth/4*asp_num+0.2\n                m300.aspirate(\n                    50, source.bottom(asp_height))\n            m300.move_to(source.top())\n            m300.flow_rate.aspirate *= 5\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, trash_total[i//3])\n            m300.drop_tip()\n        if num_times == 0:\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            m300.home()\n            ctx.pause('Please Empty Trash')\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n            ctx.pause()\n        num_times += 1\n    if not TEST_MODE:\n        ctx.delay(minutes=3, msg='Air drying.')\n    mag_module.disengage()\n    ctx.comment('Adding IDTE')\n    for i, dest in enumerate(sample_plate_dest):\n        side = 1 if i % 2 == 0 else -1\n        bead_loc = dest.bottom().move(types.Point(x=side*2, z=5))\n        m20.pick_up_tip()\n        m20.aspirate(15, idte)\n        m20.move_to(dest.center())\n        m20.dispense(15, bead_loc)\n        m20.mix(10, 10, dest.bottom(1))\n        m20.move_to(dest.bottom().move(types.Point(x=-2, z=3)))\n        m20.drop_tip()\n\n    # ctx.pause(\"Please vortex and centrifuge sample plate, return to slot 1\")\n\n    if not TEST_MODE:\n        ctx.delay(minutes=3, msg='Incubating off magnet')\n    mag_module.engage()\n    if not TEST_MODE:\n        ctx.delay(minutes=3, msg='Incubating on magnet')\n\n    m20.flow_rate.aspirate /= 5\n    for s, d in zip(sample_plate_dest, elution_dest):\n        m20.pick_up_tip()\n        m20.move_to(s.top())\n        ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n        m20.aspirate(11, s.bottom(0.2))\n        m20.move_to(s.top())\n        ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n        m20.dispense(m20.current_volume, d.bottom(0.5))\n        m20.move_to(d.bottom().move(types.Point(x=-2, z=3)))\n        m20.drop_tip()\n\n    mag_module.disengage()\n\n    if flash:\n        if not ctx._hw_manager.hardware.is_simulator:\n            cancellationToken.set_true()\n        thread = create_thread(ctx, cancellationToken)\n    m300.home()\n    ctx.pause('Protocol Complete.')\n    ctx.home()  # home before continuing with protocol\n    if flash:\n        cancellationToken.set_false()  # stop light flashing after home\n        thread.join()\n    ctx.pause()\n\n    for c in ctx.commands():\n        print(c)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of Samples (max 288)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "P20 Multi GEN2 mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flash on Protocol Completion?",
            "name": "flash",
            "options": [
                {
                    "label": "Yes",
                    "value": "True"
                },
                {
                    "label": "No",
                    "value": "False"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "reagent plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 4",
            "share": false,
            "slot": "4",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "elution plate on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "rhAmpSeq Library Prep Part 2 - Cleanup 1",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 1 lw NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "magdeck"
        }
    ]
}