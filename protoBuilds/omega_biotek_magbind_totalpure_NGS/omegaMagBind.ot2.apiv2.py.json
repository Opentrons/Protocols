{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Omega Bio-tek Mag-Bind TotalPure NGS',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Protocol Library',\n    'apiLevel': '2.2'\n}\n\n\ndef run(protocol_context):\n    [pipette_type, pipette_mount, sample_number, PCR_volume, bead_ratio,\n     elution_buffer_volume, incubation_time, settling_time,\n     drying_time] = get_values(  # noqa: F821\n        \"pipette_type\", \"pipette_mount\", \"sample_number\", \"PCR_volume\",\n        \"bead_ratio\", \"elution_buffer_volume\", \"incubation_time\",\n        \"settling_time\", \"drying_time\")\n\n    mag_deck = protocol_context.load_module('magdeck', '1')\n    mag_plate = mag_deck.load_labware(\n        'biorad_96_wellplate_200ul_pcr')\n    output_plate = protocol_context.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '2', 'output plate')\n    total_tips = sample_number*8\n    tiprack_num = math.ceil(total_tips/96)\n    slots = ['3', '5', '6', '8', '9', '10', '11'][:tiprack_num]\n\n    pip_range = pipette_type.split('_')[0]\n    if pip_range == 'p1000':\n        tip_name = 'opentrons_96_tiprack_1000ul'\n    elif pip_range == 'p300' or range == 'p50':\n        tip_name = 'opentrons_96_tiprack_300ul'\n    elif pip_range == 'p20':\n        tip_name = 'opentrons_96_tiprack_20ul'\n    else:\n        tip_name = 'opentrons_96_tiprack_10ul'\n\n    tipracks = [\n        protocol_context.load_labware(tip_name, slot, pip_range + ' tiprack')\n        for slot in slots\n    ]\n    pipette = protocol_context.load_instrument(\n        pipette_type, pipette_mount, tip_racks=tipracks)\n\n    mode = pipette_type.split('_')[1]\n    if mode == 'single':\n        if sample_number <= 5:\n            reagent_container = protocol_context.load_labware(\n                'opentrons_24_tuberack_generic_2ml_screwcap',\n                '7',\n                'reagent rack'\n            )\n            liquid_waste = protocol_context.load_labware(\n                'usascientific_12_reservoir_22ml',\n                '5',\n                'reservoir for waste').wells()[-1]\n\n        else:\n            reagent_container = protocol_context.load_labware(\n                'usascientific_12_reservoir_22ml', '7', 'reagent reservoir')\n            liquid_waste = reagent_container.wells()[-1]\n        samples = [well for well in mag_plate.wells()[:sample_number]]\n        samples_top = [well.top() for well in samples]\n        output = [well for well in output_plate.wells()[:sample_number]]\n\n    else:\n        reagent_container = protocol_context.load_labware(\n            'usascientific_12_reservoir_22ml', '7', 'reagent reservoir')\n        liquid_waste = reagent_container.wells()[-1]\n        col_num = math.ceil(sample_number/8)\n        samples = [col for col in mag_plate.rows()[0][:col_num]]\n        samples_top = [well.top() for well in mag_plate.rows()[0][:col_num]]\n        output = [col for col in output_plate.rows()[0][:col_num]]\n\n    # Define reagents and liquid waste\n    beads = reagent_container.wells()[0]\n    ethanol = reagent_container.wells()[0]\n    elution_buffer = reagent_container.wells()[0]\n\n    # Define bead and mix volume to resuspend beads\n    bead_volume = PCR_volume*bead_ratio\n    if mode == 'single':\n        if bead_volume*sample_number > pipette.max_volume:\n            mix_vol = pipette.max_volume\n        else:\n            mix_vol = bead_volume*sample_number\n    else:\n        if bead_volume*col_num > pipette.max_volume:\n            mix_vol = pipette.max_volume\n        else:\n            mix_vol = bead_volume*col_num\n    total_vol = bead_volume + PCR_volume + 15\n    mix_voltarget = PCR_volume + 10\n\n    # Disengage MagDeck\n    mag_deck.disengage()\n\n    # Mix beads and PCR samples\n    for target in samples:\n        pipette.flow_rate.aspirate = 180\n        pipette.flow_rate.dispense = 180\n        pipette.pick_up_tip()\n        # Slow down head speed 0.5X for bead handling\n        pipette.mix(25, mix_vol, beads)\n        protocol_context.default_speed = 200\n        pipette.flow_rate.aspirate = 10\n        pipette.flow_rate.dispense = 10\n        pipette.transfer(\n            bead_volume, beads, target, new_tip='never')\n        pipette.flow_rate.aspirate = 50\n        pipette.flow_rate.dispense = 50\n        pipette.mix(40, mix_voltarget, target)\n        pipette.blow_out()\n        protocol_context.default_speed = 400\n\n        pipette.drop_tip()\n\n    # Incubate beads and PCR product at RT for 5 minutes\n    protocol_context.comment(\"Incubating the beads and PCR products at room \\\ntemperature for 5 minutes. Protocol will resume automatically.\")\n    protocol_context.delay(seconds=incubation_time)\n\n    # Engage MagDeck and Magnetize\n    mag_deck.engage()\n    protocol_context.comment(\"Delaying for \"+str(settling_time)+\" seconds for \\\nbeads to settle.\")\n    protocol_context.delay(seconds=settling_time)\n\n    # Remove supernatant from magnetic beads\n    pipette.flow_rate.aspirate = 25\n    pipette.flow_rate.dispense = 120\n    for target in samples:\n        pipette.transfer(\n            total_vol, target, liquid_waste.top(), blow_out=True)\n\n    # Wash beads twice with 70% ethanol\n    air_vol = pipette.max_volume*0.1\n\n    for _ in range(2):\n        pipette.pick_up_tip()\n        for target in samples_top:\n            pipette.transfer(\n                185, ethanol, target, air_gap=air_vol, new_tip='never')\n        msg = \"Delaying for 17 seconds.\"\n        protocol_context.delay(seconds=17, msg=msg)\n        for target in samples:\n            if not pipette.hw_pipette['has_tip']:\n                pipette.pick_up_tip()\n            pipette.transfer(195, target.bottom(z=0.7), liquid_waste.top(),\n                             air_gap=air_vol, new_tip='never')\n            pipette.drop_tip()\n\n    # Dry at RT\n    msg = \"Drying the beads for \" + str(drying_time) + \" minutes. Protocol \\\nwill resume automatically.\"\n    protocol_context.delay(minutes=drying_time, msg=msg)\n\n    # Disengage MagDeck\n    mag_deck.disengage()\n\n    # Mix beads with elution buffer\n    if elution_buffer_volume/2 > pipette.max_volume:\n        mix_vol = pipette.max_volume\n    else:\n        mix_vol = elution_buffer_volume/2\n    for target in samples:\n        pipette.transfer(\n            elution_buffer_volume,\n            elution_buffer,\n            target,\n            mix_after=(45, mix_vol)\n        )\n\n    # Incubate at RT for 3 minutes\n    protocol_context.comment(\"Incubating at room temperature for 3 minutes. \\\nProtocol will resume automatically.\")\n    protocol_context.delay(minutes=3)\n\n    # Engage MagDeck for 1 minute and remain engaged for DNA elution\n    mag_deck.engage()\n    protocol_context.comment(\"Delaying for \"+str(settling_time)+\" seconds for \\\nbeads to settle.\")\n    protocol_context.delay(seconds=settling_time)\n\n    # Transfer clean PCR product to a new well\n    for target, dest in zip(samples, output):\n        pipette.transfer(elution_buffer_volume, target.bottom(z=1), dest.top(),\n                         blow_out=True)\n\n    # Disengage MagDeck\n    mag_deck.disengage()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "pipette type",
            "name": "pipette_type",
            "options": [
                {
                    "label": "GEN2 P1000 Single",
                    "value": "p1000_single_gen2"
                },
                {
                    "label": "GEN2 P300 Single",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "GEN2 P20 Single",
                    "value": "p10_single_gen2"
                },
                {
                    "label": "GEN2 P300 Multi",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "GEN2 P20 Multi",
                    "value": "p20_multi_gen2"
                },
                {
                    "label": "GEN1 P1000 Single",
                    "value": "p1000_single"
                },
                {
                    "label": "GEN1 P300 Single",
                    "value": "p300_single"
                },
                {
                    "label": "GEN1 P50 Single",
                    "value": "p50_single"
                },
                {
                    "label": "GEN1 P10 Single",
                    "value": "p10_single"
                },
                {
                    "label": "GEN1 P300 Multi",
                    "value": "p300_multi"
                },
                {
                    "label": "GEN1 P50 Multi",
                    "value": "p50_multi"
                },
                {
                    "label": "GEN1 P10 Multi",
                    "value": "p10_multi"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "pipette mount",
            "name": "pipette_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 24,
            "label": "number of samples",
            "name": "sample_number",
            "type": "int"
        },
        {
            "default": 20,
            "label": "PCR volume (in uL)",
            "name": "PCR_volume",
            "type": "float"
        },
        {
            "default": 1.8,
            "label": "bead ratio",
            "name": "bead_ratio",
            "type": "float"
        },
        {
            "default": 20,
            "label": "elution buffer volume (in uL)",
            "name": "elution_buffer_volume",
            "type": "float"
        },
        {
            "default": 1,
            "label": "incubation time (in minutes)",
            "name": "incubation_time",
            "type": "float"
        },
        {
            "default": 1,
            "label": "settling time (in minutes)",
            "name": "settling_time",
            "type": "float"
        },
        {
            "default": 5,
            "label": "drying time (in minutes)",
            "name": "drying_time",
            "type": "float"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Bio-Rad 96 Well Plate 200 \u00b5L PCR on Magnetic Module on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "output plate on 2",
            "share": false,
            "slot": "2",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "p1000 tiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "p1000 tiprack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "reagent reservoir on 7",
            "share": false,
            "slot": "7",
            "type": "usascientific_12_reservoir_22ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.2",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Omega Bio-tek Mag-Bind TotalPure NGS",
        "source": "Protocol Library"
    },
    "modules": []
}