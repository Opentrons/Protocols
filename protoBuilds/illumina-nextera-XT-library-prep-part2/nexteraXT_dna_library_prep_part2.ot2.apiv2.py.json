{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Illumina Nextera XT NGS Prep 2: Clean-Up Libraries',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Protocol Library',\n    'apiLevel': '2.2'\n    }\n\n\ndef run(protocol):\n    [pip_type, pip_mount, mag_gen, no_of_samps, init_vol,\n     bead_ratio, rsb_vol, final_vol, dry_time] = get_values(  # noqa: F821\n     'pip_type', 'pip_mount', 'mag_gen', 'no_of_samps', 'init_vol',\n     'bead_ratio', 'rsb_vol', 'final_vol', 'dry_time')\n\n    # labware setup\n    mag_deck = protocol.load_module(mag_gen, '4')\n    mag_plate = mag_deck.load_labware('biorad_96_wellplate_200ul_pcr')\n    in_plate = protocol.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '5', 'Load Plate'\n    )\n    out_plate = protocol.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '1', 'Final Plate (empty)'\n    )\n    trough = protocol.load_labware(\n        'usascientific_12_reservoir_22ml', '2', 'Reservoir, 12-channel'\n    )\n    tip_no = no_of_samps * 4 + 3\n    no_racks = tip_no//96 + (1 if tip_no % 96 > 0 else 0)\n    tips = [\n        protocol.load_labware('opentrons_96_tiprack_300ul', str(slot))\n        for slot in range(6, 7+no_racks)\n    ]\n\n    pip = protocol.load_instrument(pip_type, pip_mount, tip_racks=tips)\n    pipC = pip_type.split('_')[1]\n\n    # Volume Tracking - adapted from Sakib\n    class VolTracker:\n        def __init__(self, labware, well_vol, pip_type='single',\n                     mode='reagent', start=0, end=12, msg='Reset Labware'):\n            try:\n                self.labware_wells = dict.fromkeys(\n                    labware.wells()[start:end], 0)\n            except Exception:\n                self.labware_wells = dict.fromkeys(\n                    labware, 0)\n            self.labware_wells_backup = self.labware_wells.copy()\n            self.well_vol = well_vol\n            self.pip_type = pip_type\n            self.mode = mode\n            self.start = start\n            self.end = end\n            self.msg = msg\n\n        def tracker(self, vol):\n            '''tracker() will track how much liquid\n            was used up per well. If the volume of\n            a given well is greater than self.well_vol\n            it will remove it from the dictionary and iterate\n            to the next well which will act as the reservoir.'''\n            well = next(iter(self.labware_wells))\n            if self.labware_wells[well] + vol >= self.well_vol:\n                del self.labware_wells[well]\n                if len(self.labware_wells) < 1:\n                    protocol.pause(self.msg)\n                    self.labware_wells = self.labware_wells_backup.copy()\n                well = next(iter(self.labware_wells))\n            if self.pip_type == 'multi':\n                self.labware_wells[well] = self.labware_wells[well] + vol*8\n            elif self.pip_type == 'single':\n                self.labware_wells[well] = self.labware_wells[well] + vol\n            \"\"\"\n            Removed the display of comments\n            \"\"\"\n            # if self.mode == 'waste':\n            #     protocol.comment(f'''{well}: {int(self.labware_wells[well])}\n            #         uL of total waste''')\n            # else:\n            #     protocol.comment(f'''{int(self.labware_wells[well])}\n            #         uL of liquidused from {well}''')\n            return well\n\n    # reagent setup\n    rsb = trough['A1']  # resuspension buffer\n    beads = trough['A2']  # AMPure XP beads\n    # 80% ethanol\n    ethanol = VolTracker(\n        trough, 14000, pipC, start=2, end=6, msg='Out of Ethanol; replace')\n    # liquid waste\n    liquid_trash = VolTracker(\n        trough, 14500, pipC, start=8, end=12, msg='Empty liqud waste.')\n\n    if pipC == 'multi':\n        num_cols = math.ceil(no_of_samps/8)\n        inputs = in_plate.rows()[0][:num_cols]\n        mag = mag_plate.rows()[0][:num_cols]\n        outputs = out_plate.rows()[0][:num_cols]\n    else:\n        inputs = [well for well in in_plate.wells()][:no_of_samps]\n        mag = [well for well in mag_plate.wells()][:no_of_samps]\n        outputs = [well for well in out_plate.wells()][:no_of_samps]\n\n    bead_vol = init_vol*bead_ratio\n\n    # Transfer PCR Product\n    pip.transfer(init_vol, inputs, mag, new_tip='always')\n\n    # Transfer beads to each well\n    pip.distribute(bead_vol, beads, [well.top() for well in mag])\n\n    total_vol = bead_vol + init_vol + 5\n\n    protocol.pause(\"Shake at 1800 rpm for 2 minutes.\")\n\n    # Incubate at RT for 5 minutes\n    protocol.delay(minutes=5)\n\n    # Engage MagDeck for 2 minutes, remain engaged\n    mag_deck.engage()\n    protocol.delay(minutes=2)\n\n    # Remove supernatant\n    for well in mag:\n        pip.transfer(total_vol, well, liquid_trash.tracker(total_vol).top())\n\n    # Wash beads twice with 80% ethanol\n    for cycle in range(1, 3):\n        protocol.comment(f\"\\nBeginning ethanol wash {cycle}...\\n\")\n        pip.pick_up_tip()\n        for well in mag:\n            pip.transfer(\n                200, ethanol.tracker(200), well.top(), new_tip='never')\n        pip.drop_tip()\n        protocol.delay(seconds=30)\n        for well in mag:\n            pip.pick_up_tip()\n            pip.transfer(\n                220, well, liquid_trash.tracker(220).top(), new_tip='never')\n            pip.drop_tip()\n\n    # Air dry\n    protocol.delay(minutes=dry_time)\n\n    # Turn off MagDeck\n    mag_deck.disengage()\n\n    # Transfer RSB to well\n    pip.pick_up_tip()\n    pip.transfer(rsb_vol, rsb, [well.top() for well in mag], new_tip='never')\n    pip.drop_tip()\n\n    protocol.pause(\"Shake at 1800 rpm for 2 minutes.\")\n\n    # Turn on MagDeck for 2 minutes\n    mag_deck.engage()\n    protocol.delay(minutes=2)\n\n    # Transfer supernatant to new PCR plate\n    pip.transfer(final_vol, mag, outputs, new_tip='always')\n\n    # Disengage MagDeck\n    mag_deck.disengage()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Pipette Model",
            "name": "pip_type",
            "options": [
                {
                    "label": "P300 Single GEN2",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "P300 Multi GEN2",
                    "value": "p300_multi_gen2"
                },
                {
                    "label": "P300 Single GEN1",
                    "value": "p300_single"
                },
                {
                    "label": "P50 Single GEN1",
                    "value": "p50_single"
                },
                {
                    "label": "P300 Multi GEN1",
                    "value": "p300_multi"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Pipette Mount",
            "name": "pip_mount",
            "options": [
                {
                    "label": "Right side",
                    "value": "right"
                },
                {
                    "label": "Left side",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Magnetic Module Gen",
            "name": "mag_gen",
            "options": [
                {
                    "label": "GEN1",
                    "value": "magnetic module"
                },
                {
                    "label": "GEN2",
                    "value": "magnetic module gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 24,
            "label": "Number of Samples",
            "name": "no_of_samps",
            "type": "int"
        },
        {
            "default": 50,
            "label": "Initial Product Volume (\u00b5l)",
            "name": "init_vol",
            "type": "float"
        },
        {
            "default": 1.8,
            "label": "Bead Ratio",
            "name": "bead_ratio",
            "type": "float"
        },
        {
            "default": 52.5,
            "label": "Resuspension Buffer Volume (\u00b5l)",
            "name": "rsb_vol",
            "type": "float"
        },
        {
            "default": 50,
            "label": "Final PCR Product Volume (\u00b5l)",
            "name": "final_vol",
            "type": "float"
        },
        {
            "default": 15,
            "label": "Dry Time (minutes)",
            "name": "dry_time",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Final Plate (empty) on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Reservoir, 12-channel on 2",
            "share": false,
            "slot": "2",
            "type": "usascientific_12_reservoir_22ml"
        },
        {
            "name": "Bio-Rad 96 Well Plate 200 \u00b5L PCR on Magnetic Module on 4",
            "share": false,
            "slot": "4",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Load Plate on 5",
            "share": false,
            "slot": "5",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.2",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Illumina Nextera XT NGS Prep 2: Clean-Up Libraries",
        "source": "Protocol Library"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module on 4 lw Bio-Rad 96 Well Plate 200 \u00b5L PCR on Magnetic Module on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        }
    ]
}