{
    "content": "metadata = {\n    \"apiLevel\": \"2.5\",\n    \"protocolName\": \"Sarah Daley Protocol (check mesoscale.com link)\",\n    \"author\": \"\"}\n\n\ndef run(ctx):\n\n    step, test_plates = get_values(  # noqa: F821\n            'step', 'test_plates')\n\n    if step == 1:\n        tip_rack = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '1')]\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2', \"right\", tip_racks=tip_rack)\n\n        trough = ctx.load_labware(\n            'nest_1_reservoir_195ml',\n            '2',\n            label='Blocking solution').wells()[0]\n        plates = [ctx.load_labware('nest_96_wellplate_200ul_flat', str(\n            i), label='Plate {}'.format(i))\n            for i in range(3, 12)[:test_plates]]\n        for plate in plates:\n            p300m.pick_up_tip()\n            [p300m.transfer(150, trough, col, new_tip='never')\n             for col in plate.rows()[0]]\n            p300m.drop_tip()\n\n    if step == 2:\n        tip_rack = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '1')]\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2', \"right\", tip_racks=tip_rack)\n\n        reagents = ctx.load_labware(\n            'nest_12_reservoir_15ml', '2', label='Controls')\n        control_1 = reagents.wells_by_name()[\"A1\"]\n        control_2 = reagents.wells_by_name()[\"A2\"]\n\n        sample_plate = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat', '3', label='Sample plate')\n        test_plate_1 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat', '5', label='First test plate')\n        test_plate_2 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat',\n            '6',\n            label='Second test plate')\n\n        for control, well in [(control_1, \"A1\"), (control_2, \"A2\")]:\n            p300m.pick_up_tip()\n            for transfer_well in [\n                    test_plate_1.wells_by_name()[well],\n                    test_plate_2.wells_by_name()[well]]:\n                p300m.transfer(150, control, transfer_well, new_tip='never')\n            p300m.drop_tip()\n\n        for test_plate, well_list in [\n            (test_plate_1, [\n                \"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]), (test_plate_2, [\n                \"A8\", \"A9\", \"A10\", \"A11\", \"A12\"])]:\n            for i, from_well in enumerate(\n                    [sample_plate.wells_by_name()[well]\n                        for well in well_list]):\n                p300m.pick_up_tip()\n                for destination in [test_plate.columns()[col]\n                                    for col in\n                                    range(2 + (i * 2), 4 + (i * 2))]:\n                    p300m.transfer(\n                        150, from_well, destination, new_tip='never')\n                p300m.drop_tip()\n\n    if step == 3:\n        tip_racks = [\n            ctx.load_labware(\n                'opentrons_96_filtertiprack_200ul',\n                x) for x in [\n                '1',\n                '4']]\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2', \"right\", tip_racks=tip_racks)\n\n        test_plate_1 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat', '5', label='First test plate')\n        test_plate_2 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat',\n            '6',\n            label='Second test plate')\n\n        reagents = ctx.load_labware(\n            'nest_12_reservoir_15ml',\n            '2',\n            label='Detection Antibody')\n        detection_antibody = reagents.wells_by_name()[\"A3\"]\n\n        for plate in [test_plate_1, test_plate_2]:\n            for col in plate.rows()[0]:\n                p300m.transfer(25, detection_antibody, col)\n\n    if step == 4:\n        tip_racks = [\n            ctx.load_labware(\n                'opentrons_96_filtertiprack_200ul',\n                x) for x in [\n                '1',\n                '4']]\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2', \"right\", tip_racks=tip_racks)\n\n        test_plate_1 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat', '5', label='First test plate')\n        test_plate_2 = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat',\n            '6',\n            label='Second test plate')\n\n        trough = ctx.load_labware(\n            'nest_1_reservoir_195ml',\n            '2',\n            label='Read buffer').wells()[0]\n\n        for plate in [test_plate_1, test_plate_2]:\n            for col in plate.rows()[0]:\n                p300m.transfer(150, trough, col)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 1,
            "label": "Step",
            "name": "step",
            "type": "int"
        },
        {
            "default": 2,
            "label": "Number of test plates (Step 1 only)",
            "name": "test_plates",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Blocking solution on 2",
            "share": false,
            "slot": "2",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Plate 3 on 3",
            "share": false,
            "slot": "3",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "Plate 4 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_200ul_flat"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.5",
        "author": "",
        "protocolName": "Sarah Daley Protocol (check mesoscale.com link)"
    },
    "modules": []
}