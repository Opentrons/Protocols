{
    "content": "from opentrons.protocol_api.labware import OutOfTipsError\n\nmetadata = {\n    'protocolName': 'Bisulfite Conversion',\n    'author': 'Steve <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.9'\n}\n\n\ndef run(ctx):\n\n    ctx.set_rail_lights(True)\n\n    [labware_p300_tips, labware_pcr_plate, labware_reservoir,\n     labware_collect_plate, engage_time, clearance_reservoir,\n     clearance_pcr_plate, clearance_deep_well, clearance_eluate,\n     set_tip_max] = get_values(  # noqa: F821\n     \"labware_p300_tips\", \"labware_pcr_plate\", \"labware_reservoir\",\n     \"labware_collect_plate\", \"engage_time\", \"clearance_reservoir\",\n     \"clearance_pcr_plate\", \"clearance_deep_well\", \"clearance_eluate\",\n     \"set_tip_max\")\n\n    # tips (capacity 200 ul if filter tips, otherwise 300 ul)\n    tips300 = [\n     ctx.load_labware(labware_p300_tips, str(slot)) for slot in [6, 9]]\n\n    # keep tip useage between full and half volume capacity\n    tip_capacity = tips300[0].wells_by_name()['A1'].max_volume\n    tip_max = tip_capacity\n    if set_tip_max is not None:\n        if 0.5*tip_capacity < set_tip_max < tip_capacity:\n            tip_max = set_tip_max\n\n    # p300 multi\n    p300m = ctx.load_instrument(\n        \"p300_multi_gen2\", 'right', tip_racks=tips300)\n\n    # helper functions\n    def pause_attention(message):\n        ctx.set_rail_lights(False)\n        ctx.delay(seconds=10)\n        ctx.pause(message)\n        ctx.set_rail_lights(True)\n\n    def change_tips(current_pipette):\n        current_pipette.drop_tip()\n        pick_up_or_refill(current_pipette)\n\n    def change_every_n(current_pipette, j, change_freq):\n        if ((j % change_freq == 0) and (j != 0)):\n            change_tips(current_pipette)\n\n    def set_default_clearances(\n     current_pipette, aspirate_setting, dispense_setting):\n        if 0 < aspirate_setting < 5 and 0 < dispense_setting < 5:\n            current_pipette.well_bottom_clearance.aspirate = aspirate_setting\n            current_pipette.well_bottom_clearance.dispense = dispense_setting\n\n    def restore_default_clearances(current_pipette):\n        current_pipette.well_bottom_clearance.aspirate = 1\n        current_pipette.well_bottom_clearance.dispense = 1\n\n    def pick_up_or_refill(current_pipette):\n        try:\n            current_pipette.pick_up_tip()\n        except OutOfTipsError:\n            pause_attention(\n             \"Please Refill the {} Tip Boxes\".format(current_pipette))\n            current_pipette.reset_tipracks()\n            current_pipette.pick_up_tip()\n\n    def pre_wet(current_pipette, volume, location):\n        for rep in range(2):\n            current_pipette.aspirate(volume, location)\n            current_pipette.dispense(volume, location)\n\n    def etoh_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 92.86\n            current_pipette.flow_rate.dispense = 300\n            current_pipette.flow_rate.blow_out = 300\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 7.56\n            current_pipette.flow_rate.dispense = 22\n            current_pipette.flow_rate.blow_out = 22\n\n    def default_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 92.86\n            current_pipette.flow_rate.dispense = 92.86\n            current_pipette.flow_rate.blow_out = 92.86\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 7.56\n            current_pipette.flow_rate.dispense = 7.56\n            current_pipette.flow_rate.blow_out = 7.56\n\n    def viscous_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 60\n            current_pipette.flow_rate.dispense = 60\n            current_pipette.flow_rate.blow_out = 300\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 3.5\n            current_pipette.flow_rate.dispense = 3.5\n            current_pipette.flow_rate.blow_out = 3.5\n\n    def aqueous_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 60\n            current_pipette.flow_rate.dispense = 60\n            current_pipette.flow_rate.blow_out = 300\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 7.56\n            current_pipette.flow_rate.dispense = 7.56\n            current_pipette.flow_rate.blow_out = 7.56\n\n    def rep_max_transfer(\n     remaining, source, dest, tip_max_vol=tip_max, air=0, blow=0, touch=False,\n     asp_delay=0, disp_delay=0, blow_location=\"destination\", blow_delay=0):\n        vol = tip_max_vol - air\n        while remaining > vol:\n            p300m.aspirate(vol, source)\n            if air > 0:\n                p300m.air_gap(air)\n            else:\n                if asp_delay > 0:\n                    ctx.delay(seconds=asp_delay)\n            p300m.dispense(tip_max_vol, dest)\n            if disp_delay > 0:\n                ctx.delay(seconds=disp_delay)\n            if blow > 0:\n                for rep in range(blow):\n                    if rep > 0:\n                        p300m.aspirate(tip_max, dest)\n                    ctx.delay(seconds=blow_delay)\n                    if blow_location == \"destination\":\n                        p300m.blow_out(dest)\n                    else:\n                        p300m.blow_out(blow_location)\n            if touch is True:\n                p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n            remaining -= vol\n        p300m.aspirate(remaining, source)\n        if air > 0:\n            p300m.air_gap(air)\n        else:\n            if asp_delay > 0:\n                ctx.delay(seconds=asp_delay)\n        p300m.dispense(remaining + air, dest)\n        if disp_delay > 0:\n            ctx.delay(seconds=disp_delay)\n        if blow > 0:\n            for rep in range(blow):\n                if rep > 0:\n                    p300m.aspirate(tip_max, dest)\n                ctx.delay(seconds=blow_delay)\n                if blow_location == \"destination\":\n                    p300m.blow_out(dest)\n                else:\n                    p300m.blow_out(blow_location)\n        if touch is True:\n            p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n\n    pause_attention(\"\"\"\n    Deck set up for bisulfite conversion:\n\n    magnetic module in deck slot 7\n    with deep well plate (collection plate)\n\n    cf DNA in deck slot 1\n    CT rxn plate in deck slot 2\n    eluate plate in deck slot 10\n\n    reagent reservoir in deck slot 3:\n    A1 - CT conversion buffer\n    A2 - Beads\n    A3 - Water\n\n    wash reservoir in deck slot 5\n    desulph reservoir in deck slot 8\n    waste reservoir in deck slot 11\n\n    p300 tips in deck slots 6 and 9\n    \"\"\")\n\n    mag = ctx.load_module('magnetic module', '7')\n    mag.disengage()\n    mag_plate = mag.load_labware(labware_collect_plate, \"Collection Plate\")\n    mag_height = {\n        'omni_96_wellplate_2000ul': 8.5,\n        'nest_96_wellplate_2ml_deep': 8.5,\n        'usascientific_96_wellplate_2.4ml_deep': 8.5\n        }\n\n    cf_dna, pcr_plate, barcoded_pcr_plate = [\n     ctx.load_labware(labware_pcr_plate, str(slot), display_name) for slot,\n     display_name in zip([1, 2, 10], [\"CF DNA\", \"CT Rxn Plate\", \"Eluate\"])]\n\n    trough = ctx.load_labware(\n     \"nest_12_reservoir_15ml\", '3', 'Reagent Reservoir(CT conv,Beads,Water)')\n    ct_conv, beads_mm, water = [\n     trough.wells_by_name()[well_name] for well_name in ['A1', 'A2', 'A3']]\n\n    wash_reservoir, desulph_reservoir, waste_reservoir = [ctx.load_labware(\n     labware_reservoir, str(slot), display_name) for slot, display_name in zip(\n     [5, 8, 11], [\"Wash Buffer\", \"Desulph Buffer\", \"Waste\"])]\n    wash, desulph, waste = [labware.wells()[0] for labware in [\n     wash_reservoir, desulph_reservoir, waste_reservoir]]\n\n    ctx.comment(\"\"\"\n    add CT conversion buffer to pcr plate\n    add cf DNA\n    mix\n    \"\"\")\n    aqueous_flow_rates(p300m)\n    p300m.pick_up_tip()\n    p300m.transfer(\n     130, ct_conv.bottom(clearance_reservoir), [\n      column[0].bottom(clearance_pcr_plate) for column in pcr_plate.columns(\n      )], new_tip='never')\n    p300m.drop_tip()\n\n    p300m.transfer(\n     20, [column[0].bottom(clearance_pcr_plate) for column in cf_dna.columns(\n     )], [column[0].bottom(5) for column in pcr_plate.columns(\n     )], mix_after=(4, 75), new_tip='always')\n\n    pause_attention(\"\"\"\n    paused for thermocycler steps\n    when finished, return the pcr plate to its deck slot\n    replenish tip racks\n    resume\n    \"\"\")\n    p300m.reset_tipracks()\n\n    ctx.comment(\"\"\"\n    bead-buffer mix and cycler product to collect plate (on magnetic module)\n    \"\"\")\n    viscous_flow_rates(p300m)\n    for index, column in enumerate(pcr_plate.columns()):\n        p300m.pick_up_tip()\n        p300m.mix(10, tip_max, beads_mm.bottom(clearance_reservoir))\n        rep_max_transfer(610, beads_mm.bottom(\n         clearance_reservoir), mag_plate.columns()[index][0].bottom(\n         clearance_deep_well), asp_delay=1, disp_delay=1, blow=3,\n         blow_delay=1, touch=True)\n        p300m.transfer(150, column[0].bottom(\n         clearance_pcr_plate), mag_plate.columns()[index][0].bottom(\n         clearance_deep_well), mix_after=(5, tip_max), new_tip='never')\n        p300m.blow_out(mag_plate.columns()[index][0].top())\n        ctx.delay(seconds=1)\n        p300m.aspirate(tip_max, mag_plate.columns()[index][0].top())\n        p300m.blow_out(mag_plate.columns()[index][0].top())\n        p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n        p300m.drop_tip()\n    aqueous_flow_rates(p300m)\n\n    mag.engage(height=mag_height[labware_collect_plate])\n    ctx.delay(engage_time)\n\n    ctx.comment(\"\"\"\n    remove supernatant\n    \"\"\")\n    for column in mag_plate.columns():\n        p300m.pick_up_tip()\n        rep_max_transfer(760, column[0].bottom(\n         clearance_deep_well), waste.top(), blow=3, blow_delay=1)\n        p300m.drop_tip()\n\n    mag.disengage()\n\n    for rep in range(3):\n        ctx.comment(\"\"\"\n        add wash (contains ethanol)\n        \"\"\")\n        etoh_flow_rates(p300m)\n        change_freq = 1  # tip change frequency for this code section\n        for index, column in enumerate(mag_plate.columns()):\n            if index == 0:\n                pick_up_or_refill(p300m)\n            change_every_n(p300m, index, change_freq)\n            pre_wet(p300m, tip_max, wash.bottom(clearance_reservoir))\n            rep_max_transfer(400, wash.bottom(\n             clearance_reservoir), column[0].top(), air=15,\n             blow=3, blow_delay=1)\n            if change_freq == 1:\n                p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n        p300m.drop_tip()\n        ctx.comment(\"\"\"\n        mix\n        \"\"\")\n        for column in mag_plate.columns():\n            pick_up_or_refill(p300m)\n            p300m.mix(4, tip_max, column[0].bottom(clearance_deep_well))\n            p300m.blow_out(column[0].top())\n            ctx.delay(seconds=1)\n            p300m.aspirate(tip_max, column[0].top())\n            p300m.blow_out(column[0].top())\n            p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n            p300m.drop_tip()\n\n        mag.engage(height=mag_height[labware_collect_plate])\n        ctx.delay(engage_time)\n        ctx.comment(\"\"\"\n        remove sup\n        \"\"\")\n        for column in mag_plate.columns():\n            pick_up_or_refill(p300m)\n            rep_max_transfer(400, column[0].bottom(\n             clearance_deep_well), waste.top(), air=15, blow=3, blow_delay=1)\n            p300m.drop_tip()\n\n        mag.disengage()\n\n        if rep == 0:\n            ctx.comment(\"\"\"\n            add desulphonation buffer\n            \"\"\")\n            aqueous_flow_rates(p300m)\n            pick_up_or_refill(p300m)\n            for column in mag_plate.columns():\n                rep_max_transfer(200, desulph.bottom(\n                 clearance_reservoir), column[0].bottom(clearance_deep_well),\n                 blow=3, blow_delay=1)\n                p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n            p300m.drop_tip()\n            ctx.comment(\"\"\"\n            mix\n            \"\"\")\n            for column in mag_plate.columns():\n                pick_up_or_refill(p300m)\n                p300m.mix(4, 100, column[0].bottom(clearance_deep_well))\n                p300m.blow_out(column[0].top())\n                ctx.delay(seconds=1)\n                p300m.aspirate(tip_max, column[0].top())\n                p300m.blow_out(column[0].top())\n                p300m.touch_tip(radius=0.75, v_offset=-2, speed=20)\n                p300m.drop_tip()\n\n            ctx.delay(minutes=11)\n\n            mag.engage(\n             height=mag_height[labware_collect_plate])\n            ctx.delay(engage_time)\n            ctx.comment(\"\"\"\n            remove sup\n            \"\"\")\n            for column in mag_plate.columns():\n                pick_up_or_refill(p300m)\n                rep_max_transfer(200, column[0].bottom(\n                 clearance_deep_well), waste.top(), blow=3, blow_delay=1)\n                p300m.drop_tip()\n\n            mag.disengage()\n\n    pause_attention(\"\"\"\n    Please dry the magnetic module plate for 20 min at 55 C.\n    Replenish tip racks.\n    Then return the plate to the magnetic module\n    and click resume.\"\"\")\n\n    ctx.comment(\"\"\"\n    add water to dried beads\n    \"\"\")\n    p300m.reset_tipracks()\n    p300m.transfer(25, water.bottom(\n     clearance_reservoir), [column[0].bottom(\n      clearance_deep_well) for column in mag_plate.columns()],\n      new_tip='always')\n\n    pause_attention(\"\"\"\n    Please incubate the magnetic module plate for 4 min at 55 C\n    to elute. Then place it back on the magnetic module. Please\n    replace the used tip boxes with fresh tips to transfer the\n    eluate.\"\"\")\n\n    mag.engage(height=mag_height[labware_collect_plate])\n    ctx.delay(engage_time)\n    ctx.comment(\"\"\"\n    transfer eluate to barcoded PCR plate\n    \"\"\")\n    p300m.transfer(25, [column[0].bottom(\n     clearance_eluate) for column in mag_plate.columns()], [column[0].bottom(\n      clearance_pcr_plate) for column in barcoded_pcr_plate.columns()],\n      new_tip='always')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Choose Filtered or Standard Tips for P300 multi",
            "name": "labware_p300_tips",
            "options": [
                {
                    "label": "Filtered Tips",
                    "value": "opentrons_96_filtertiprack_200ul"
                },
                {
                    "label": "Standard Tips",
                    "value": "opentrons_96_tiprack_300ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for PCR Plate",
            "name": "labware_pcr_plate",
            "options": [
                {
                    "label": "nest_96_wellplate_100ul_pcr_full_skirt",
                    "value": "nest_96_wellplate_100ul_pcr_full_skirt"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Reservoir",
            "name": "labware_reservoir",
            "options": [
                {
                    "label": "agilent_1_reservoir_290ml",
                    "value": "agilent_1_reservoir_290ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Collect Plate (on Magnetic Module)",
            "name": "labware_collect_plate",
            "options": [
                {
                    "label": "usascientific_96_wellplate_2.4ml_deep",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 7,
            "label": "Engage Time for Magnetic Module (min)",
            "name": "engage_time",
            "type": "int"
        },
        {
            "default": 4,
            "label": "Default Well Bottom Clearance for Reservoirs (mm)",
            "name": "clearance_reservoir",
            "type": "float"
        },
        {
            "default": 2,
            "label": "Default Well Bottom Clearance for PCR Plates (mm)",
            "name": "clearance_pcr_plate",
            "type": "float"
        },
        {
            "default": 3,
            "label": "Default Well Bottom Clearance for Collect Plate (mm)",
            "name": "clearance_deep_well",
            "type": "float"
        },
        {
            "default": 2,
            "label": "Clearance to Aspirate Eluate and Avoid Bead Pellet (mm)",
            "name": "clearance_eluate",
            "type": "float"
        },
        {
            "default": 150,
            "label": "Set Max Aspirate Volume for p300 Tips (ul)",
            "name": "set_tip_max",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "CF DNA on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "CT Rxn Plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Reagent Reservoir(CT conv,Beads,Water) on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Wash Buffer on 5",
            "share": false,
            "slot": "5",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Collection Plate on Magnetic Module GEN1 on 7",
            "share": false,
            "slot": "7",
            "type": "usascientific_96_wellplate_2.4ml_deep"
        },
        {
            "name": "Desulph Buffer on 8",
            "share": false,
            "slot": "8",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Eluate on 10",
            "share": false,
            "slot": "10",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Waste on 11",
            "share": false,
            "slot": "11",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Steve <protocols@opentrons.com>",
        "protocolName": "Bisulfite Conversion",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN1 on 7 lw Collection Plate on Magnetic Module GEN1 on 7",
            "share": false,
            "slot": "7",
            "type": "magdeck"
        }
    ]
}