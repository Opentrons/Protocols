{
    "content": "\"\"\"OPENTRONS.\"\"\"\nfrom opentrons.types import Point\nimport json\nimport os\nimport math\nimport threading\nfrom time import sleep\nfrom opentrons import types\n\n\nmetadata = {\n    'protocolName': 'Mag-Bind\u00ae Blood & Tissue DNA HDQ 96 Kit',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.11'\n}\n\n\n\"\"\"\nHere is where you can modify the magnetic module engage height:\n\"\"\"\nTEST_MODE = False\nmag_height = 3.5  # this is from bottom of deep well plate! Default is too high\n\n# Definitions for deck light flashing\nclass CancellationToken:\n    \"\"\"FLASH SETUP.\"\"\"\n\n    def __init__(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = False\n\n    def set_true(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = True\n\n    def set_false(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    \"\"\"FLASH SETUP.\"\"\"\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    \"\"\"FLASH SETUP.\"\"\"\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\n# Start protocol\ndef run(ctx):\n    \"\"\"PROTOCOL.\"\"\"\n    # Setup for flashing lights notification to empty trash\n    cancellationToken = CancellationToken()\n\n    # [num_samples, deepwell_type, res_type, starting_vol, binding_buffer_vol,\n    #  wash1_vol, wash2_vol, wash3_vol, elution_vol, mix_reps, settling_time,\n    #  park_tips, tip_track, flash, p300_mount] = get_values(  # noqa: F821\n    #     'num_samples', 'deepwell_type', 'res_type', 'starting_vol',\n    #     'binding_buffer_vol', 'wash1_vol', 'wash2_vol', 'wash3_vol',\n    #     'elution_vol', 'mix_reps', 'settling_time', 'park_tips', 'tip_track',\n    #     'flash', 'p300_mount')\n\n    num_samples = 8\n    deepwell_type = 'nest_96_wellplate_2ml_deep'\n    res_type = 'nest_12_reservoir_15ml'\n    starting_vol = 400\n    binding_buffer_vol = 370\n    wash1_vol = 600\n    wash2_vol = 500\n    wash3_vol = 500\n    elution_vol = 50\n    mix_reps = 15\n    settling_time = 7\n    park_tips = False\n    tip_track = False\n    flash = True\n    p300_mount = 'left'\n\n    sample_vol = 560\n    bead_delay_time = 7\n    supernatant_headspeed_modulator = 10\n    num_trans_super_1 = math.ceil((sample_vol+420)/180)\n    num_trans_super_2 = math.ceil(wash1_vol/150)\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    magdeck = ctx.load_module('magnetic module gen2', '7')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep',\n                                    'deepwell plate')\n#    tempdeck = ctx.load_module('Temperature Module Gen2', '1')\n#   elutionplate will be random plate from Sanofi on Al block\n    elutionplate = ctx.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul',\n                '3')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '4',\n                             'Liquid Waste').wells()[0].top()\n    res2 = ctx.load_labware(res_type, '2', 'reagent reservoir 2')\n    res1 = ctx.load_labware(res_type, '5', 'reagent reservoir 1')\n    num_cols = math.ceil(num_samples/8)\n    tips300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['1', '6', '9', '8', '10', '11']]\n\n    parking_spots = [column for column in tips300[0].rows()[0][:num_cols]]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', p300_mount, tip_racks=tips300)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    binding_buffer = res1.wells()[:4]\n    elution_solution = res2.wells()[-1]\n    wash1 = res1.wells()[4:8]  # VHB, first time\n    wash2 = res1.wells()[8:]  # VHB second time\n    wash3 = res2.wells()[:4]  # SPM wash\n    wash4 = res2.wells()[4:8]  # NFW wash\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n\n#    magdeck.disengage()  # just in case\n#    tempdeck.set_temperature(4)\n\n    m300.flow_rate.aspirate = 150\n    m300.flow_rate.dispense = 300\n    m300.flow_rate.blow_out = 300\n\n    def bead_mixing(well, pip, mvol, reps=10):\n        \"\"\"bead_mixing.\"\"\"\n        \"\"\"\n        'bead_mixing' will mix liquid that contains beads. This will be done by\n        aspirating from the middle of the well and dispensing from the bottom to\n        mix the beads with the other liquids as much as possible. Aspiration &\n        dispensing will also be reversed to ensure proper mixing.\n        param well: The current well that the mixing will occur in.\n        param pip: The pipet that is currently attached/ being used.\n        param mvol: The volume that is transferred before the mixing steps.\n        param reps: The number of mix repetitions that should occur. Note~\n        During each mix rep, there are 2 cycles of aspirating from bottom,\n        dispensing at the top and 2 cycles of aspirating from middle,\n        dispensing at the bottom\n        \"\"\"\n        vol = mvol * .9\n\n        pip.move_to(well.center())\n        pip.flow_rate.aspirate = 200\n        pip.flow_rate.dispense = 300\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(1))\n            pip.dispense(vol, well.bottom(5))\n            pip.aspirate(vol, well.bottom(5))\n            pip.dispense(vol, well.bottom(1))\n        pip.flow_rate.aspirate = 150\n        pip.flow_rate.aspirate = 300\n\n    # Begin Protocol\n    # pre-mix bead/binding buffer mix\n\n    # add binding buffer/bead mix\n    m300.flow_rate.dispense = 60\n    for i, dest in enumerate(mag_samples_m):\n        m300.pick_up_tip()\n        if i % 4 == 0:\n            bead_mixing(binding_buffer[i//4], m300, 150, reps=20)\n        for _ in range(3):\n            if _ == 0:\n                m300.aspirate(40, binding_buffer[i//4].top())\n            m300.aspirate(140, binding_buffer[i//4])\n            m300.dispense(180, dest.top(-2))\n            m300.aspirate(40, dest.top(-2))\n            m300.move_to(dest.top(2))\n        m300.drop_tip()\n    m300.flow_rate.dispense = 96\n    # Mix 30 seconds, move to next sample 30 seconds mix\n    for dest in mag_samples_m:\n        m300.pick_up_tip()\n        bead_mixing(dest, m300, 200, reps=10)\n        # for _ in range(8):\n        #     m300.aspirate(200, dest)\n        #     m300.dispense(200, dest.top(-5))\n        m300.drop_tip(home_after=False)\n\n    # Mag module engage\n    magdeck.engage(height_from_base=mag_height)\n    if TEST_MODE:\n        ctx.delay(seconds=bead_delay_time)\n    else:\n        ctx.delay(minutes=bead_delay_time)\n\n    # discard supernatant\n    ctx.max_speeds['Z'] = 400\n    ctx.max_speeds['A'] = 400\n    m300.flow_rate.aspirate /= 5\n    for i, (source, park_loc) in enumerate(zip(mag_samples_m, parking_spots)):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip()\n        m300.move_to(source.top())\n        for _ in range(num_trans_super_1):\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            if _ == 0:\n                m300.aspirate(10, source.top())\n            m300.aspirate(\n                180, source.bottom().move(types.Point(x=side,\n                                                      y=0, z=0.2)))\n            m300.move_to(source.top())\n            m300.air_gap(10)\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, waste)\n            m300.aspirate(10, waste)  # waste defaults to waste.top()\n        m300.drop_tip(park_loc)\n    m300.flow_rate.aspirate *= 5\n    magdeck.disengage()\n\n    # Add 600uL VHB Buffer, mix well to resuspend beads\n    for i, dest in enumerate(mag_samples_m):\n        m300.pick_up_tip()\n        for _ in range(4):\n            if _ == 0:\n                m300.aspirate(20, wash1[i//3])\n            m300.aspirate(150, wash1[i//3])\n            m300.dispense(m300.current_volume, dest.top(-2))\n            m300.aspirate(20, dest.top())\n        bead_mixing(dest, m300, 200, reps=5)\n        m300.drop_tip()\n\n    # engage mag module\n    magdeck.engage(height_from_base=mag_height)\n    if TEST_MODE:\n        ctx.delay(seconds=bead_delay_time)\n    else:\n        ctx.delay(minutes=bead_delay_time)\n\n    # discard supernatant\n    m300.flow_rate.aspirate /= 5\n    for i, (source, park_loc) in enumerate(zip(mag_samples_m, parking_spots)):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip(park_loc)\n        m300.move_to(source.top())\n        for _ in range(num_trans_super_2):\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            if _ == 0:\n                m300.aspirate(20, source.top())\n            m300.aspirate(\n                150, source.bottom().move(types.Point(x=side,\n                                                      y=0, z=0.2)))\n            m300.move_to(source.top())\n            m300.air_gap(20)\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, waste)\n            m300.aspirate(20, waste)\n        m300.drop_tip(park_loc)\n    m300.flow_rate.aspirate *= 5\n    magdeck.disengage()\n\n    # Wash 2, same as above\n\n    # Add 600uL VHB Buffer, mix well to resuspend beads\n    for i, dest in enumerate(mag_samples_m):\n        m300.pick_up_tip()\n        for _ in range(4):\n            if _ == 0:\n                m300.aspirate(20, wash2[i//3])\n            m300.aspirate(150, wash2[i//3])\n            m300.dispense(m300.current_volume, dest.top(-2))\n            m300.aspirate(20, dest.top())\n        bead_mixing(dest, m300, 200, reps=10)\n        m300.drop_tip()\n\n    # engage mag module\n    magdeck.engage(height_from_base=mag_height)\n    if TEST_MODE:\n        ctx.delay(seconds=bead_delay_time)\n    else:\n        ctx.delay(minutes=bead_delay_time)\n\n    # discard supernatant\n    m300.flow_rate.aspirate /= 5\n    for i, (source, park_loc) in enumerate(zip(mag_samples_m, parking_spots)):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip(park_loc)\n        m300.move_to(source.top())\n        for _ in range(num_trans_super_2):\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            if _ == 0:\n                m300.aspirate(20, source.top())\n            m300.aspirate(\n                150, source.bottom().move(types.Point(x=side,\n                                                      y=0, z=0.2)))\n            m300.move_to(source.top())\n            m300.air_gap(20)\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, waste)\n            m300.aspirate(20, waste)\n    m300.flow_rate.aspirate *= 5\n    m300.drop_tip(park_loc)\n    magdeck.disengage()\n\n    # SPM Buffer Wash\n    for i, dest in enumerate(mag_samples_m):\n        m300.pick_up_tip()\n        for _ in range(4):\n            if _ == 0:\n                m300.aspirate(20, wash3[i//3].top())\n            m300.aspirate(150, wash3[i//3])\n            m300.dispense(m300.current_volume, dest.top(-2))\n            m300.aspirate(20, dest.top())\n        bead_mixing(dest, m300, 200, reps=5)\n        m300.drop_tip()\n\n    # engage mag module\n    magdeck.engage(height_from_base=mag_height)\n    if TEST_MODE:\n        ctx.delay(seconds=bead_delay_time)\n    else:\n        ctx.delay(minutes=bead_delay_time)\n\n    # discard supernatant, N.B. Trash tips here\n    m300.flow_rate.aspirate /= 5\n    for i, (source, park_loc) in enumerate(zip(mag_samples_m, parking_spots)):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip(park_loc)\n        m300.move_to(source.top())\n        for _ in range(num_trans_super_2):\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            if _ == 0:\n                m300.aspirate(20, source.top())\n            m300.aspirate(\n                150, source.bottom().move(types.Point(x=side,\n                                                      y=0, z=0.2)))\n            m300.move_to(source.top())\n            m300.air_gap(20)\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, waste)\n            m300.aspirate(20, waste)\n        m300.drop_tip()\n    m300.flow_rate.aspirate *= 5\n\n    # NFW wash to remove EtOH twice\n    for i, dest in enumerate(mag_samples_m):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip()\n        magdeck.engage(height_from_base=mag_height)\n        for _ in range(2):\n            m300.aspirate(200, wash4[i//3])\n            m300.dispense(200, dest.top(-2))\n            m300.aspirate(20, dest.top())\n            m300.dispense(20, wash4[i//3])\n        ctx.delay(seconds=20)\n        for _ in range(2):\n            m300.aspirate(200, dest.bottom().move(types.Point(x=side,\n                                                  y=0, z=0.2)))\n            m300.dispense(200, waste)\n            m300.aspirate(20, waste)\n            m300.dispense(20, dest.top())\n        magdeck.disengage()\n        m300.aspirate(20, dest.top())\n        m300.drop_tip()\n        m300.pick_up_tip()\n        m300.aspirate(50, elution_solution)\n        m300.dispense(50, dest)\n        m300.mix(4, 50, dest)\n        m300.drop_tip()\n\n    # N.B. previous approach to NFW wash\n    \"\"\"for _ in range(2):\n        if not m300.has_tip:\n            m300.pick_up_tip()\n        for i, dest in enumerate(mag_samples_m):\n            src = wash3[i//6] if _ == 0 else wash3[(i//6)+2]\n            m300.aspirate(200, src)\n            m300.dispense(200, dest.top(-2))\n        m300.drop_tip()\n\n        for i, (source, park_loc) in enumerate(zip(mag_samples_m, parking_spots)):\n            side = -1 if i % 2 == 0 else 1\n            if not m300.has_tip:\n                m300.pick_up_tip(park_loc) if _ == 1 else m300.pick_up_tip()\n            m300.move_to(source.top())\n            ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n            m300.aspirate(\n                200, source.bottom().move(types.Point(x=side,\n                                                      y=0, z=0.2)))\n            m300.move_to(source.top())\n            ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n            ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n            m300.dispense(m300.current_volume, waste)\n            m300.drop_tip(park_loc, home_after=False)\n\n    magdeck.disengage()\n\n    # Elution buffer addition\n    for dest in mag_samples_m:\n        m300.pick_up_tip()\n        m300.aspirate(50, elution_solution)\n        m300.dispense(50, dest)\n        bead_mixing(dest, m300, 50, reps=10)\n        m300.drop_tip()\"\"\"\n    magdeck.engage(height_from_base=mag_height)\n\n    if TEST_MODE:\n        ctx.delay(seconds=bead_delay_time)\n    else:\n        ctx.delay(minutes=bead_delay_time)\n\n    # Transfer super to 96 well plate\n    for i, (source, dest) in enumerate(zip(mag_samples_m, elution_samples_m)):\n        side = -1 if i % 2 == 0 else 1\n        m300.pick_up_tip()\n        m300.move_to(source.top())\n        ctx.max_speeds['Z'] /= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] /= supernatant_headspeed_modulator\n        m300.aspirate(\n            50, source.bottom().move(types.Point(x=side,\n                                                 y=0, z=0.2)))\n        m300.move_to(source.top())\n        m300.aspirate(20, source.top())\n        ctx.max_speeds['Z'] *= supernatant_headspeed_modulator\n        ctx.max_speeds['A'] *= supernatant_headspeed_modulator\n        m300.dispense(20, dest.top())\n        m300.dispense(m300.current_volume, dest)\n        m300.drop_tip()\n\n#     folder_path = '/data/B'\n#     tip_file_path = folder_path + '/tip_log.json'\n#     tip_log = {'count': {}}\n#     if tip_track and not ctx.is_simulating():\n#         if os.path.isfile(tip_file_path):\n#             with open(tip_file_path) as json_file:\n#                 data = json.load(json_file)\n#                 if 'tips300' in data:\n#                     tip_log['count'][m300] = data['tips300']\n#                 else:\n#                     tip_log['count'][m300] = 0\n#         else:\n#             tip_log['count'][m300] = 0\n#     else:\n#         tip_log['count'] = {m300: 0}\n#\n#     tip_log['tips'] = {\n#         m300: [tip for rack in tips300 for tip in rack.rows()[0]]}\n#     tip_log['max'] = {m300: len(tip_log['tips'][m300])}\n#\n#     def _pick_up(pip, loc=None):\n#         nonlocal tip_log\n#         if tip_log['count'][pip] == tip_log['max'][pip] and not loc:\n#             ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\n# resuming.')\n#             pip.reset_tipracks()\n#             tip_log['count'][pip] = 0\n#         if loc:\n#             pip.pick_up_tip(loc)\n#         else:\n#             pip.pick_up_tip(tip_log['tips'][pip][tip_log['count'][pip]])\n#             tip_log['count'][pip] += 1\n#\n#     switch = True\n#     drop_count = 0\n#     # number of tips trash will accommodate before prompting user to empty\n#     drop_threshold = 120\n#\n#     def _drop(pip):\n#         nonlocal switch\n#         nonlocal drop_count\n#         side = 30 if switch else -18\n#         drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n#             Point(x=side))\n#         pip.drop_tip(drop_loc)\n#         switch = not switch\n#         if pip.type == 'multi':\n#             drop_count += 8\n#         else:\n#             drop_count += 1\n#         if drop_count >= drop_threshold:\n#             # Setup for flashing lights notification to empty trash\n#             if flash:\n#                 if not ctx._hw_manager.hardware.is_simulator:\n#                     cancellationToken.set_true()\n#                 thread = create_thread(ctx, cancellationToken)\n#             m300.home()\n#             ctx.pause('Please empty tips from waste before resuming.')\n#             ctx.home()  # home before continuing with protocol\n#             if flash:\n#                 cancellationToken.set_false()  # stop light flashing after home\n#                 thread.join()\n#             drop_count = 0\n#\n#     waste_vol = 0\n#     waste_threshold = 185000\n#\n#     def remove_supernatant(vol, park=False):\n#         \"\"\"REMOVE SUPER.\"\"\"\n#         \"\"\"\n#         `remove_supernatant` will transfer supernatant from the deepwell\n#         extraction plate to the liquid waste reservoir.\n#         :param vol (float): The amount of volume to aspirate from all deepwell\n#                             sample wells and dispense in the liquid waste.\n#         :param park (boolean): Whether to pick up sample-corresponding tips\n#                                in the 'parking rack' or to pick up new tips.\n#         \"\"\"\n#\n#         def _waste_track(vol):\n#             nonlocal waste_vol\n#             if waste_vol + vol >= waste_threshold:\n#                 # Setup for flashing lights notification to empty liquid waste\n#                 if flash:\n#                     if not ctx._hw_manager.hardware.is_simulator:\n#                         cancellationToken.set_true()\n#                     thread = create_thread(ctx, cancellationToken)\n#                 m300.home()\n#                 ctx.pause('Please empty liquid waste (slot 11) before \\\n# resuming.')\n#\n#                 ctx.home()  # home before continuing with protocol\n#                 if flash:\n#                     # stop light flashing after home\n#                     cancellationToken.set_false()\n#                     thread.join()\n#\n#                 waste_vol = 0\n#             waste_vol += vol\n#\n#         m300.flow_rate.aspirate = 30\n#         num_trans = math.ceil(vol/200)\n#         vol_per_trans = vol/num_trans\n#         for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n#             if park:\n#                 _pick_up(m300, spot)\n#             else:\n#                 _pick_up(m300)\n#             side = -1 if i % 2 == 0 else 1\n#             loc = m.bottom(0.5).move(Point(x=side*2))\n#             for _ in range(num_trans):\n#                 _waste_track(vol_per_trans)\n#                 if m300.current_volume > 0:\n#                     # void air gap if necessary\n#                     m300.dispense(m300.current_volume, m.top())\n#                 # WIP add slower descend into well, break out transfer function\n#                 m300.move_to(m.center())\n#                 m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n#                               air_gap=20)\n#                 m300.blow_out(waste)\n#                 m300.air_gap(20)\n#             _drop(m300)\n#         m300.flow_rate.aspirate = 150\n#\n#     def resuspend_pellet(well, pip, mvol, reps=5):\n#         \"\"\"PELLET SUSPEND.\"\"\"\n#         \"\"\"\n#         'resuspend_pellet' will forcefully dispense liquid over the pellet\n#         after the magdeck engage in order to more thoroughly resuspend the\n#         pellet. param well: The current well that the resuspension will occur\n#         in. param pip: The pipet that is currently attached/ being used.\n#         param mvol: The volume that is transferred before the mixing steps.\n#         param reps: The number of mix repetitions that should occur. Note~\n#         During each mix rep, there are 2 cycles of aspirating from center,\n#         dispensing at the top and 2 cycles of aspirating from center,\n#         dispensing at the bottom (5 mixes total)\n#         \"\"\"\n#\n#         rightLeft = int(str(well).split(' ')[0][1:]) % 2\n#         \"\"\"\n#         'rightLeft' will determine which value to use in the list of 'top' and\n#         'bottom' (below), based on the column of the 'well' used.\n#         In the case that an Even column is used, the first value of 'top' and\n#         'bottom' will be used, otherwise, the second value of each will be\n#         used.\n#         \"\"\"\n#         # N.B. waaaaay too much, change offsets\n#         center = well.bottom().move(types.Point(x=0, y=0, z=1))\n#         top = [\n#             well.bottom().move(types.Point(x=-1, y=1, z=1)),\n#             well.bottom().move(types.Point(x=1, y=1, z=1))\n#         ]\n#         bottom = [\n#             well.bottom().move(types.Point(x=-1, y=-1, z=1)),\n#             well.bottom().move(types.Point(x=1, y=-1, z=1))\n#         ]\n#\n#         pip.flow_rate.dispense = 500\n#         pip.flow_rate.aspirate = 150\n#\n#         mix_vol = 0.9 * mvol\n#\n#         pip.move_to(center)\n#         for _ in range(reps):\n#             for _ in range(2):\n#                 pip.aspirate(mix_vol, center)\n#                 pip.dispense(mix_vol, top[rightLeft])\n#             for _ in range(2):\n#                 pip.aspirate(mix_vol, center)\n#                 pip.dispense(mix_vol, bottom[rightLeft])\n#\n#     def bind(vol, park=True):\n#         \"\"\"BIND.\"\"\"\n#         \"\"\"\n#         `bind` will perform magnetic bead binding on each sample in the\n#         deepwell plate. Each channel of binding beads will be mixed before\n#         transfer, and the samples will be mixed with the binding beads after\n#         the transfer. The magnetic deck activates after the addition to all\n#         samples, and the supernatant is removed after bead bining.\n#         :param vol (float): The amount of volume to aspirate from the elution\n#                             buffer source and dispense to each well containing\n#                             beads.\n#         :param park (boolean): Whether to save sample-corresponding tips\n#                                between adding elution buffer and transferring\n#                                supernatant to the final clean elutions PCR\n#                                plate.\n#         \"\"\"\n#         latest_chan = -1\n#         for i, (well, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n#             if park:\n#                 _pick_up(m300, spot)\n#             else:\n#                 _pick_up(m300)\n#             num_trans = math.ceil(vol/200)\n#             vol_per_trans = vol/num_trans\n#             asp_per_chan = (0.95*res1.wells()[0].max_volume)//(vol_per_trans*8)\n#             for t in range(num_trans):\n#                 chan_ind = int((i*num_trans + t)//asp_per_chan)\n#                 source = binding_buffer[chan_ind]\n#                 if m300.current_volume > 0:\n#                     # void air gap if necessary\n#                     m300.dispense(m300.current_volume, source.top())\n#                 if chan_ind > latest_chan:  # mix if accessing new channel\n#                     for _ in range(5):\n#                         m300.aspirate(180, source.bottom(0.5))\n#                         m300.dispense(180, source.bottom(5))\n#                     latest_chan = chan_ind\n#                 m300.transfer(vol_per_trans, source, well.top(), air_gap=20,\n#                               new_tip='never')\n#                 if t < num_trans - 1:\n#                     m300.air_gap(20)\n#             m300.mix(5, 200, well)\n#\n#             m300.blow_out(well.top(-2))\n#             m300.air_gap(20)\n#             if park:\n#                 m300.drop_tip(spot)\n#             else:\n#                 _drop(m300)\n#         if TEST_MODE:\n#             ctx.delay(seconds=3, msg='Bind off-deck on a heater/shaker')\n#             ctx.delay(seconds=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#         else:\n#             ctx.delay(minutes=10, msg='Bind off-deck on a heater/shaker')\n#             magdeck.engage()\n#             ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#\n#         # remove initial supernatant\n#         remove_supernatant(vol+starting_vol, park=park)\n#\n#     def wash(vol, source, mix_reps=15, park=True, resuspend=True):\n#         \"\"\"WASH.\"\"\"\n#         \"\"\"\n#         `wash` will perform bead washing for the extraction protocol.\n#         :param vol (float): The amount of volume to aspirate from each\n#                             source and dispense to each well containing beads.\n#         :param source (List[Well]): A list of wells from where liquid will be\n#                                     aspirated. If the length of the source list\n#                                     > 1, `wash` automatically calculates\n#                                     the index of the source that should be\n#                                     accessed.\n#         :param mix_reps (int): The number of repititions to mix the beads with\n#                                specified wash buffer (ignored if resuspend is\n#                                False).\n#         :param park (boolean): Whether to save sample-corresponding tips\n#                                between adding wash buffer and removing\n#                                supernatant.\n#         :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n#         \"\"\"\n#\n#         if resuspend and magdeck.status == 'engaged':\n#             magdeck.disengage()\n#\n#         num_trans = math.ceil(vol/200)\n#         vol_per_trans = vol/num_trans\n#         for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n#             _pick_up(m300)\n#             # side = 1 if i % 2 == 0 else -1\n#             # loc = m.bottom(0.5).move(Point(x=side*2))\n#             src = source[i//(12//len(source))]\n#             for n in range(num_trans):\n#                 if m300.current_volume > 0:\n#                     m300.dispense(m300.current_volume, src.top())\n#                 m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n#                               new_tip='never')\n#                 if n < num_trans - 1:  # only air_gap if going back to source\n#                     m300.air_gap(20)\n#             if resuspend:\n#                 # m300.mix(mix_reps, 150, loc)\n#                 resuspend_pellet(m, m300, 180)\n#\n#             m300.blow_out(m.top())\n#             m300.air_gap(20)\n#             if park:\n#                 m300.drop_tip(spot)\n#             else:\n#                 _drop(m300)\n#\n#         if magdeck.status == 'disengaged':\n#             magdeck.engage()\n#\n#         if TEST_MODE:\n#             ctx.delay(seconds=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#         else:\n#             ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#\n#         remove_supernatant(vol, park=park)\n#\n#     def elute(vol, park=True):\n#         \"\"\"ELUTE.\"\"\"\n#         \"\"\"\n#         `elute` will perform elution from the deepwell extraciton plate to the\n#         final clean elutions PCR plate to complete the extraction protocol.\n#         :param vol (float): The amount of volume to aspirate from the elution\n#                             buffer source and dispense to each well containing\n#                             beads.\n#         :param park (boolean): Whether to save sample-corresponding tips\n#                                between adding elution buffer and transferring\n#                                supernatant to the final clean elutions PCR\n#                                plate.\n#         \"\"\"\n#\n#         # resuspend beads in elution\n#         if magdeck.status == 'enagaged':\n#             magdeck.disengage()\n#         for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n#             _pick_up(m300)\n#             side = 1 if i % 2 == 0 else -1\n#             loc = m.bottom(0.5).move(Point(x=side*2))\n#             m300.aspirate(vol, elution_solution)\n#             m300.move_to(m.center())\n#             m300.dispense(vol, loc)\n#             m300.mix(mix_reps, 0.8*vol, loc)\n#             m300.blow_out(m.bottom(5))\n#             m300.air_gap(20)\n#             if park:\n#                 m300.drop_tip(spot)\n#             else:\n#                 _drop(m300)\n#         if TEST_MODE:\n#             ctx.delay(seconds=5, msg='Delay for 5 minutes for elution')\n#             magdeck.engage()\n#             ctx.delay(seconds=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#         else:\n#             ctx.delay(minutes=5, msg='Delay for 5 minutes for elution')\n#             magdeck.engage()\n#             ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n#             ' + str(settling_time) + ' minutes.')\n#\n#         for i, (m, e, spot) in enumerate(\n#                 zip(mag_samples_m, elution_samples_m, parking_spots)):\n#             if park:\n#                 _pick_up(m300, spot)\n#             else:\n#                 _pick_up(m300)\n#             side = -1 if i % 2 == 0 else 1\n#             loc = m.bottom(0.5).move(Point(x=side*2))\n#             m300.transfer(vol, loc, e.bottom(5), air_gap=20, new_tip='never')\n#             m300.blow_out(e.top(-2))\n#             m300.air_gap(20)\n#             m300.drop_tip()\n#\n#     \"\"\"\n#     Here is where you can call the methods defined above to fit your specific\n#     protocol. The normal sequence is:\n#     \"\"\"\n#     bind(binding_buffer_vol, park=park_tips)\n#     wash(wash1_vol, wash1, park=park_tips)\n#     wash(wash2_vol, wash2, park=park_tips)\n#     wash(wash3_vol, wash3, park=park_tips)\n#     if TEST_MODE:\n#         ctx.delay(seconds=5, msg='Incubate for 5 minutes to dry beads')\n#         elute(elution_vol, park=park_tips)\n#     else:\n#         ctx.delay(minutes=5, msg='Incubate for 5 minutes to dry beads')\n#         elute(elution_vol, park=park_tips)\n#\n#     # track final used tip\n#     if tip_track and not ctx.is_simulating():\n#         if not os.path.isdir(folder_path):\n#             os.mkdir(folder_path)\n#         data = {'tips300': tip_log['count'][m300]}\n#         with open(tip_file_path, 'w') as outfile:\n#             json.dump(data, outfile)\n    for c in ctx.commands():\n        print(c)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 8,
            "label": "number of samples + controls (1-96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "96-deepwell plate type",
            "name": "deepwell_type",
            "options": [
                {
                    "label": "NEST",
                    "value": "nest_96_wellplate_2ml_deep"
                },
                {
                    "label": "USA Scientific",
                    "value": "usascientific_96_wellplate_2.4ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "12-well reservoir type",
            "name": "res_type",
            "options": [
                {
                    "label": "NEST",
                    "value": "nest_12_reservoir_15ml"
                },
                {
                    "label": "USA Scientific",
                    "value": "usascientific_12_reservoir_22ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 430,
            "label": "intitial volume (sample + lysis buffer, in ul)",
            "name": "starting_vol",
            "type": "float"
        },
        {
            "default": 370,
            "label": "binding buffer volume (in ul)",
            "name": "binding_buffer_vol",
            "type": "float"
        },
        {
            "default": 500.0,
            "label": "wash 1 volume (in ul, up to 500ul)",
            "name": "wash1_vol",
            "type": "float"
        },
        {
            "default": 500.0,
            "label": "wash 2 volume (in ul, up to 500ul)",
            "name": "wash2_vol",
            "type": "float"
        },
        {
            "default": 500.0,
            "label": "wash 3 volume (in ul, up to 500ul)",
            "name": "wash3_vol",
            "type": "float"
        },
        {
            "default": 50.0,
            "label": "final elution volume (in ul)",
            "name": "elution_vol",
            "type": "float"
        },
        {
            "default": 15,
            "label": "mix repetitions for bead resuspension",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 7,
            "label": "bead settling time (in minutes)",
            "name": "settling_time",
            "type": "float"
        },
        {
            "label": "park tips",
            "name": "park_tips",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "flash robot on pause",
            "name": "flash",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi Channel Pipette Mount",
            "name": "p300_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "200\u00b5l filtertiprack on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "reagent reservoir 2 on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "Liquid Waste on 4",
            "share": false,
            "slot": "4",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "reagent reservoir 1 on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "deepwell plate on Magnetic Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Mag-Bind\u00ae Blood & Tissue DNA HDQ 96 Kit"
    },
    "modules": []
}