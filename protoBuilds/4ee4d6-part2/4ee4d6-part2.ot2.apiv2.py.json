{
    "content": "metadata = {\n    'protocolName': '''Illumina DNA Prep with Enrichment:\n     Part 2 - Clean Up and Pool Libraries, Hybridize and Capture Probes,\n     Amplify Enriched Library, Clean Up Enriched Library''',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'apiLevel': '2.9'\n}\n\n\ndef run(ctx):\n\n    # bring in constant values from json string above\n    [sample_count, engage_time\n     ] = get_values(  # noqa: F821\n      'sample_count', 'engage_time')\n\n    ctx.set_rail_lights(True)\n\n    if sample_count < 1 or sample_count > 12:\n        raise Exception('Invalid number of samples (must be 1-12).')\n\n    # tips and pipettes\n    tips300 = [ctx.load_labware(\"opentrons_96_filtertiprack_200ul\", '5')]\n    p300s = ctx.load_instrument(\n        \"p300_single_gen2\", 'right', tip_racks=tips300)\n    tips20 = [ctx.load_labware(\"opentrons_96_filtertiprack_20ul\", '4')]\n    p20s = ctx.load_instrument(\n        \"p20_single_gen2\", 'left', tip_racks=tips20)\n\n    # temperature module\n    temp = ctx.load_module('Temperature Module', '9')\n    temp_block = temp.load_labware(\n        \"opentrons_24_aluminumblock_nest_2ml_snapcap\")\n    reagents_temp = {}\n    for reagent, well in zip(\n     ['smb', 'eew', 'empty 1', 'empty 2', 'empty 3', 'empty 4', 'empty 5'],\n     ['A1', 'B1', 'A2', 'A3', 'A4', 'A5', 'A6']):\n        reagents_temp[reagent] = temp_block.wells_by_name()[well]\n\n    # helper function to avoid edge wells during thermocycling steps\n    def no_edges(plate):\n        return [\n         well for column in [\n          column for column in plate.columns()[1:11]] for well in column[1:7]]\n\n    # thermocycler module\n    tc = ctx.load_module('thermocycler')\n    tc.open_lid()\n    tc.set_block_temperature(10)\n    tc_plate = tc.load_labware(\"nest_96_wellplate_100ul_pcr_full_skirt\")\n    [pcr_wells] = [no_edges(tc_plate)[\n     start_index:sample_count + start_index] for start_index in [12]]\n\n    # magnetic module\n    mag = ctx.load_module('magnetic module gen2', '6')\n    mag_plate = mag.load_labware(\"nest_96_wellplate_100ul_pcr_full_skirt\")\n    mag.disengage()\n    [mag_wells, post_pcr_mag_wells, clean_mag_wells, sup_mag_wells,\n     final_mag_wells] = [mag_plate.wells()[\n      start_index:sample_count + start_index] for start_index in [\n      0, 16, 32, 48, 64]]\n\n    # block\n    block = ctx.load_labware(\n     \"opentrons_24_aluminumblock_nest_2ml_snapcap\", '3')\n    reagents_block = {}\n    for reagent, well in zip(\n     ['eblt', 'tbs', 'empty 1', 'st2', 'epm', 'empty 2', 'rsb', 'nhb2',\n      'enrich', 'ehb2'],\n     ['A1', 'B1', 'C1', 'D1', 'A2', 'B2', 'C2', 'D2', 'A3', 'B3']):\n        reagents_block[reagent] = block.wells_by_name()[well]\n\n    # reservoir\n    reservoir = ctx.load_labware(\"nest_12_reservoir_15ml\", '2')\n    reagents_res = {}\n    for reagent, well in zip(['twb', 'water', 'beads', 'waste', 'etoh'],\n                             ['A1', 'A2', 'A3', 'A4', 'A5']):\n        reagents_res[reagent] = reservoir.wells_by_name()[well]\n\n    # mix, transfer to magnetic module, engage magnets, transfer to new wells\n    for well in pcr_wells:\n        p300s.pick_up_tip()\n        p300s.mix(10, 40, well.bottom())\n        p300s.drop_tip()\n    p300s.transfer(45, pcr_wells, post_pcr_mag_wells, new_tip='always')\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n    p300s.transfer(45, post_pcr_mag_wells, clean_mag_wells, new_tip='always')\n    mag.disengage()\n\n    # mix beads, add 88 ul, add 20 ul water, mix, engage magnets\n    p300s.pick_up_tip()\n    p300s.mix(10, 200, reagents_res['beads'])\n    p300s.transfer(\n     88, reagents_res['beads'], [well.top() for well in clean_mag_wells],\n     new_tip='never')\n    p300s.drop_tip()\n    p300s.distribute(\n     20, reagents_res['water'], [well.top() for well in clean_mag_wells])\n    for well in clean_mag_wells:\n        p300s.pick_up_tip()\n        p300s.mix(10, 100, well.bottom())\n        p300s.drop_tip()\n    ctx.delay(minutes=5)\n    mag.engage()\n    ctx.delay(minutes=engage_time + 2)\n\n    # mix beads, distribute, transfer sup, apply magnets, remove sup\n    p300s.pick_up_tip()\n    p300s.mix(10, 200, reagents_res['beads'])\n    p300s.distribute(\n     20, reagents_res['beads'], [well for well in sup_mag_wells],\n     new_tip='never')\n    p300s.drop_tip()\n    p300s.transfer(\n     150, [well for well in clean_mag_wells], [well for well in sup_mag_wells],\n     mix_after=(10, 100), new_tip='always')\n    ctx.delay(minutes=5)\n    mag.engage()\n    ctx.delay(minutes=engage_time + 2)\n    p300s.transfer(\n     150, [well for well in sup_mag_wells], reagents_res['waste'].top(),\n     new_tip='always')\n\n    ctx.set_rail_lights(False)\n    ctx.pause('Please refill the tip boxes.')\n    ctx.set_rail_lights(True)\n    p300s.reset_tipracks()\n\n    # add etoh, 30 sec, remove, repeat\n    for rep in range(2):\n        p300s.pick_up_tip()\n        p300s.transfer(\n         100, reagents_res['etoh'], [well.top() for well in sup_mag_wells],\n         air_gap=20, new_tip='never')\n        p300s.drop_tip()\n        ctx.delay(seconds=30)\n        p300s.transfer(\n         100, [well.top() for well in sup_mag_wells],\n         reagents_res['waste'].top(), air_gap=20, new_tip='always')\n\n    # air dry\n    ctx.delay(minutes=5)\n\n    # add 17 ul RSB\n    p20s.pick_up_tip()\n    p20s.transfer(\n     17, reagents_block['rsb'], [well.top() for well in sup_mag_wells],\n     new_tip='never')\n    p20s.drop_tip()\n\n    ctx.pause('''Please remove the plate from the magnetic module, seal and\n                 vortex (1800 rpm 2 min). Then, return plate to magnetic module\n                 and wait 2 minutes. Spin the plate briefly. Then return plate\n                 again to magnetic module and click resume.''')\n\n    ctx.delay(minutes=2)\n\n    # 15 ul to clean mag mod wells, 2.5 ul to A5 on thermocycler module\n    p20s.transfer(\n     15, [well for well in sup_mag_wells], [well for well in final_mag_wells],\n     new_tip='always')\n    p20s.transfer(\n     2.5, [well for well in sup_mag_wells], tc_plate.wells_by_name()['A5'],\n     new_tip='always')\n    p20s.pick_up_tip()\n    p20s.mix(10, 20, tc_plate.wells_by_name()['A5'])\n    p20s.drop_tip()\n\n    ctx.pause('''Please remove plate from magnetic module to perform analysis.\n                 Then resume''')\n\n    p300s.transfer(50, reagents_block['nhb2'], tc_plate.wells_by_name()['A5'])\n    p20s.transfer(10, reagents_block['enrich'], tc_plate.wells_by_name()['A5'])\n    p20s.pick_up_tip()\n    p20s.transfer(\n     10, reagents_block['ehb2'], tc_plate.wells_by_name()['A5'],\n     new_tip='never')\n    p20s.drop_tip()\n    p300s.pick_up_tip()\n    p300s.mix(10, 90, tc_plate.wells_by_name()['A5'])\n    p300s.drop_tip()\n\n    tc.close_lid()\n\n    ctx.pause(\"\"\"Please remove reagents from the 24-well aluminum block\n                 and place the block on the temperature module.\n                 Allow the block to pre-heat to 62 degrees Celsius. Please\n                 remove the thermocycler plate, spin, and place it back\n                 on the thermocycler.\"\"\")\n\n    temp.set_temperature(62)\n\n    # temperature profiles\n    profiles = [\n     [{'temperature': 95, 'hold_time_seconds': 300}],\n     [{'temperature': temp, 'hold_time_seconds': sec} for temp,\n      sec in zip([94 - (num*2) for num in range(16)], [60]*16)],\n     [{'temperature': 62, 'hold_time_seconds': 5400}]]\n\n    # cycling\n    tc.close_lid()\n    tc.set_lid_temperature(105)\n    for profile in profiles:\n        tc.execute_profile(\n         steps=profile, repetitions=1, block_max_volume=70)\n\n    ctx.pause(\"\"\"Please place 300 ul SMB in A1, 2 mL EEW in B1,\n                 empty tubes in A2 and A3 of the temperature module.\"\"\")\n\n    tc.open_lid()\n    tc.deactivate_lid()\n\n    # 100 ul from cycler A5 to tube on temp mod, mix smb, add smb to tube\n    p300s.transfer(\n     100, tc_plate.wells_by_name()['A5'], reagents_temp['empty 1'])\n    p300s.pick_up_tip()\n    p300s.mix(10, 200, reagents_temp['smb'])\n    p300s.transfer(\n     [125, 125], reagents_temp['smb'], [\n      reagents_temp['empty 1'], reagents_temp['empty 1']], new_tip='never')\n    p300s.mix(10, 200, reagents_temp['empty 1'])\n    ctx.delay(minutes=15)\n\n    ctx.pause(\"Please place new 96-well plate on the magnetic module.\")\n    p300s.mix(10, 200, reagents_temp['empty 1'])  # step 90\n    p300s.transfer(\n     [175, 175], reagents_temp['empty 1'], [\n      mag_plate.wells_by_name()['A1'], mag_plate.wells_by_name()['A2']],\n     new_tip='never')\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n\n    for (w1, w2, w3, w4), tube in zip(\n     [('A1', 'A2', 'B1', 'B2'), ('B1', 'B2', 'D1', 'D2'),\n      ('D1', 'D2', 'E1', 'E2')], ['empty 2', 'empty 3', 'empty 4']):\n        # remove sup\n        p300s.transfer([175, 175], [\n         mag_plate.wells_by_name()[w1], mag_plate.wells_by_name()[w2]],\n         reagents_res['waste'], new_tip='never')\n        p300s.drop_tip()\n        mag.disengage()\n        # add eew, mix, 62 degrees 5 min\n        p300s.pick_up_tip()\n        p300s.transfer(\n         100, reagents_temp['eew'],\n         [mag_plate.wells_by_name()[w1], mag_plate.wells_by_name()[w2]],\n         new_tip='never')\n        for well in [w1, w2]:\n            p300s.mix(10, 90, mag_plate.wells_by_name()[well])\n            p300s.transfer(\n             100, mag_plate.wells_by_name()[well], reagents_temp[tube],\n             new_tip='never')\n        p300s.mix(10, 100, reagents_temp[tube])\n        ctx.delay(minutes=5)\n        # transfer to magnetic module, apply magnets\n        p300s.transfer(\n         100, reagents_temp[tube],\n         [mag_plate.wells_by_name()[w3], mag_plate.wells_by_name()[w4]],\n         new_tip='never')\n        mag.engage()\n        ctx.delay(minutes=engage_time)\n\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n    p300s.transfer(\n     175, [mag_plate.wells_by_name()['E1'], mag_plate.wells_by_name()['E2']],\n     reagents_res['waste'], new_tip='never')\n    p300s.drop_tip()\n    mag.disengage()\n    p300s.transfer(\n     100, reagents_temp['eew'],\n     [mag_plate.wells_by_name()['E1'], mag_plate.wells_by_name()['E2']],\n     mix_after=(10, 90), new_tip='always')\n    p300s.pick_up_tip()\n    for well in ['E1', 'E2']:\n        p300s.mix(10, 90, mag_plate.wells_by_name()[well])\n    # remove sup\n    p300s.transfer(\n     200, [mag_plate.wells_by_name()['E1'], mag_plate.wells_by_name()['E2']],\n     reagents_res['waste'], new_tip='never')\n    p300s.drop_tip()\n    mag.disengage()\n\n    ctx.pause('''Please remove the magnetic module plate, spin briefly,\n                 and return the plate to the magnetic module.''')\n\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n    p20s.pick_up_tip()\n    # remove residual supernatant\n    p20s.transfer(\n     20, [mag_plate.wells_by_name()['E1'], mag_plate.wells_by_name()['E2']],\n     reagents_res['waste'], new_tip='never')\n    p20s.drop_tip()\n\n    mag.disengage()\n\n    ctx.pause('''Please remove the plate from the magnetic module,\n                 add elution to wells E1 and E2, vortex, spin,\n                 and return the plate to the magnetic module.''')\n\n    tc.open_lid()\n\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n\n    p20s.pick_up_tip()\n    p20s.transfer(\n     [10, 10],\n     [mag_plate.wells_by_name()['E1'], mag_plate.wells_by_name()['E2']],\n     tc_plate.wells_by_name()['A6'], new_tip='never')\n\n    ctx.pause('''Please add 4 ul of ET2, 5 ul of EPM and 20 ul PPM\n                 to well A6 on thermal cycler.''')\n\n    # set slow aspiration and dispense rates\n    p20s.flow_rate.aspirate = 3\n    p20s.flow_rate.dispense = 3\n    p20s.mix(10, 20, tc_plate.wells_by_name()['A6'])\n    p20s.drop_tip()\n    p20s.flow_rate.aspirate = 7.56\n    p20s.flow_rate.dispense = 7.56\n\n    # temperature profiles\n    profiles = [\n     [{'temperature': 98, 'hold_time_seconds': 30}],\n     [{'temperature': temp, 'hold_time_seconds': sec} for temp,\n      sec in zip([98, 60, 72], [10, 30, 30])]]\n\n    # cycling\n    tc.close_lid()\n    tc.set_lid_temperature(105)\n    for profile, reps in zip(profiles, [1, 12]):\n        tc.execute_profile(\n         steps=profile, repetitions=reps, block_max_volume=50)\n\n    tc.open_lid()\n    tc.deactivate_lid()\n\n    p300s.transfer(\n     50, tc_plate.wells_by_name()['A6'], mag_plate.wells_by_name()['A3'])\n    p300s.pick_up_tip()\n    p300s.mix(10, 200, reagents_res['beads'])\n    p300s.transfer(\n     45, reagents_res['beads'], mag_plate.wells_by_name()['A3'],\n     mix_after=(10, 70), new_tip='never')\n    p300s.drop_tip()\n    ctx.delay(minutes=5)\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n\n    for rep in range(3):\n        p300s.transfer(\n         100, mag_plate.wells_by_name()['A3'], reagents_res['waste'].top(),\n         air_gap=20)\n        if rep != 2:\n            p300s.transfer(\n             100, reagents_res['etoh'], mag_plate.wells_by_name()['A3'],\n             air_gap=20)\n            ctx.delay(seconds=30)\n\n    # air dry\n    ctx.delay(minutes=5)\n    mag.disengage()\n\n    ctx.pause('''Please remove the plate from the magnetic module,\n                 add 32 ul RSB, wait 5 min, vortex, spin.\n                 Then place the plate back on the magnetic module.''')\n\n    mag.engage()\n    ctx.delay(minutes=engage_time)\n\n    p300s.transfer(\n     30, mag_plate.wells_by_name()['A3'], mag_plate.wells_by_name()['A12'])\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 12,
            "label": "Sample Count (between 1 and 12)",
            "name": "sample_count",
            "type": "int"
        },
        {
            "default": 5,
            "label": "Engage Time (minutes) for Magnetic Module",
            "name": "engage_time",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 12 Well Reservoir 15 mL on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with NEST 2 mL Snapcap on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_24_aluminumblock_nest_2ml_snapcap"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Magnetic Module GEN2 on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on Thermocycler Module on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with NEST 2 mL Snapcap on Temperature Module GEN1 on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_24_aluminumblock_nest_2ml_snapcap"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "protocolName": "Illumina DNA Prep with Enrichment:\n     Part 2 - Clean Up and Pool Libraries, Hybridize and Capture Probes,\n     Amplify Enriched Library, Clean Up Enriched Library"
    },
    "modules": []
}