{
    "content": "import os\nimport csv\n\nmetadata = {\n    'protocolName': 'Swift 2S Turbo DNA Library Kit Protocol: Part 2/3 - \\\n    Ligation Clean-Up & PCR Prep',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'source': 'Protocol Library',\n    'apiLevel': '2.1'\n}\n\n\ndef run(protocol):\n    [pip_type, tip_name, p300tips, samps] = get_values(  # noqa: F821\n    'pip_type', 'tip_name', 'p300tips', 'samps')\n\n    # Labware Setup\n    small_tips = protocol.load_labware(tip_name, '5')\n    big_tips1 = protocol.load_labware(p300tips, '3')\n    big_tips2 = protocol.load_labware(p300tips, '6')\n\n    small_pip = protocol.load_instrument(pip_type, 'left')\n    p300 = protocol.load_instrument('p300_multi', 'right')\n\n    rt_reagents = protocol.load_labware(\n        'nest_12_reservoir_15ml', '2')\n\n    tempdeck = protocol.load_module('Temperature Module', '7')\n\n    cool_reagents = tempdeck.load_labware(\n        'opentrons_24_aluminumblock_generic_2ml_screwcap',\n        'Opentrons 24-Well Aluminum Block')\n\n    magdeck = protocol.load_module('Magnetic Module', '4')\n    mag_plate = magdeck.load_labware(\n        'nest_96_wellplate_100ul_pcr_full_skirt', 'NEST 96-Well Plate')\n\n    reaction_plate = protocol.load_labware(\n        'opentrons_96_aluminumblock_nest_wellplate_100ul', '1')\n\n    # Tip tracking between runs\n    if not protocol.is_simulating():\n        file_path = '/data/csv/tiptracking.csv'\n        file_dir = os.path.dirname(file_path)\n        # check for file directory\n        if not os.path.exists(file_dir):\n            os.makedirs(file_dir)\n        # check for file; if not there, create initial tip count tracking\n        if not os.path.isfile(file_path):\n            with open(file_path, 'w') as outfile:\n                outfile.write(\"0, 0\\n\")\n\n    tip_count_list = []\n    if protocol.is_simulating():\n        tip_count_list = [0, 0]\n    else:\n        with open(file_path) as csv_file:\n            csv_reader = csv.reader(csv_file, delimiter=',')\n            tip_count_list = next(csv_reader)\n\n    spip_count = int(tip_count_list[0])\n    bpip_count = int(tip_count_list[1])\n\n    def small_pick_up():\n        nonlocal spip_count\n\n        if spip_count == 96:\n            small_pip.home()\n            protocol.pause('Out of tips. Please replace tips in slot 5 and \\\n            click RESUME.')\n            small_tips.reset()\n            spip_count = 0\n\n        small_pip.pick_up_tip(small_tips.wells()[spip_count])\n\n        spip_count += 1\n\n    def big_pick_up():\n        nonlocal bpip_count\n\n        if bpip_count == 24:\n            p300.home()\n            protocol.pause('Out of tips. Please replace tips in slot 5 and \\\n            click RESUME.')\n            big_tips1.reset()\n            big_tips2.reset()\n            bpip_count = 0\n\n        if bpip_count <= 11:\n            p300.pick_up_tip(big_tips1.columns()[bpip_count][0])\n        else:\n            p300.pick_up_tip(big_tips2.columns()[bpip_count-12][0])\n\n        bpip_count += 1\n\n    # if using the P20, change the aspirate/dispense/blow out rates\n    if pip_type == 'p20_single_gen2':\n        small_pip.flow_rate.aspirate = 25\n        small_pip.flow_rate.dispense = 50\n        small_pip.flow_rate.blow_out = 1000\n\n    # Reagent Setup\n\n    pcr_mm = cool_reagents.wells_by_name()['A3']\n\n    beads = rt_reagents.wells_by_name()['A1']\n    ethanol = rt_reagents.wells_by_name()['A3']\n    te = rt_reagents.wells_by_name()['A6']\n    waste = rt_reagents.wells_by_name()['A11']\n\n    ezp = 0\n    pps = 2\n    ms = 0\n\n    enzymatic_prep_samples = reaction_plate.columns()[ezp]\n    pcr_prep_samples = reaction_plate.columns()[pps]\n    mag_samples = mag_plate.columns()[ms]\n\n    enzymatic_300 = [enzymatic_prep_samples[0]]\n    pcr_300 = [pcr_prep_samples[0]]\n    mag_300 = [mag_samples[0]]\n\n    samp_l = [enzymatic_prep_samples, pcr_prep_samples, mag_samples]\n    samp_pl = [reaction_plate, reaction_plate, mag_plate]\n    samp_300 = [enzymatic_300, pcr_300, mag_300]\n\n    if samps == '16':\n        for s, t, plate, n in zip(samp_l, samp_300, samp_pl, [ezp, pps, ms]):\n            s += plate.columns()[n+1]\n            t.append(plate.columns()[n+1][0])\n\n    # Actively cool the samples and enzymes\n    tempdeck.set_temperature(4)\n\n    # Ligation Purification\n    # Transfer samples to the Magnetic Module\n    p300.flow_rate.aspirate = 10\n    for enz_samp, mag_samp in zip(enzymatic_300, mag_300):\n        big_pick_up()\n        p300.aspirate(60, enz_samp)\n        p300.dispense(60, mag_samp.top(-4))\n        p300.blow_out(mag_samp.top(-4))\n        p300.drop_tip()\n\n    # Transfer beads to the samples on the Magnetic Module\n    p300.flow_rate.aspirate = 75\n    big_pick_up()\n    p300.mix(10, 200, beads)\n\n    for mag_samp in mag_300:\n        if not p300.hw_pipette['has_tip']:\n            big_pick_up()\n        p300.flow_rate.aspirate = 10\n        p300.flow_rate.dispense = 10\n        p300.aspirate(48, beads)\n        p300.default_speed = 50\n        p300.move_to(mag_samp.top(-2))\n        p300.default_speed = 400\n        p300.dispense(48, mag_samp.top(-5))\n        p300.blow_out()\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 50\n        p300.mix(10, 80, mag_samp.top(-13.5))\n        p300.blow_out(mag_samp.top(-5))\n        p300.drop_tip()\n\n    # Incubating for 5 minutes\n    protocol.comment(\"Incubating for 5 minutes.\")\n    protocol.delay(minutes=5)\n\n    # Engage Magnetic Module\n    magdeck.engage()\n    protocol.comment(\"Engaging Magnetic Module and incubating for 6 minutes.\")\n    protocol.delay(minutes=6)\n\n    # Remove supernatant\n    p300.flow_rate.aspirate = 20\n    p300.flow_rate.dispense = 50\n\n    for mag_samp in mag_300:\n        big_pick_up()\n        p300.aspirate(108, mag_samp.bottom(2))\n        p300.dispense(108, waste.bottom(1.5))\n        p300.drop_tip()\n\n    # Wash samples 2X with 180uL of 80% EtOH\n    p300.default_speed = 200\n    p300.flow_rate.aspirate = 75\n    p300.flow_rate.dispense = 50\n\n    for _ in range(2):\n        for mag_samp in mag_300:\n            if not p300.hw_pipette['has_tip']:\n                big_pick_up()\n            p300.air_gap(10)\n            p300.aspirate(180, ethanol)\n            p300.air_gap(5)\n            p300.dispense(210, mag_samp.top(-2))\n        if samps == '8':\n            protocol.delay(seconds=15)\n        for mag_samp in mag_300:\n            if not p300.hw_pipette['has_tip']:\n                p300.pick_up_tip()\n            p300.air_gap(10)\n            p300.aspirate(190, mag_samp)\n            p300.air_gap(5)\n            p300.dispense(210, waste.bottom(1.5))\n            p300.drop_tip()\n\n    # remove residual ethanol\n    for mag_samp in mag_300:\n        big_pick_up()\n        p300.aspirate(30, mag_samp.bottom(-0.5))\n        p300.air_gap(5)\n        p300.drop_tip()\n\n    protocol.comment(\"Letting beads dry for 3 minutes.\")\n    protocol.delay(minutes=3)\n    magdeck.disengage()\n\n    # Elute clean ligation product\n    for mag_samp in mag_300:\n        big_pick_up()\n        p300.aspirate(22, te)\n        p300.dispense(22, mag_samp.top(-12))\n        p300.blow_out(mag_samp.top())\n        p300.flow_rate.aspirate = 100\n        p300.flow_rate.dispense = 200\n        p300.mix(10, 20, mag_samp.top(-13.5))\n        p300.blow_out(mag_samp.top())\n        p300.flow_rate.aspirate = 75\n        p300.flow_rate.dispense = 50\n        p300.drop_tip()\n\n    # Incubate for 2 minutes\n    protocol.comment(\"Incubating for 2 minutes.\")\n    protocol.delay(minutes=2)\n\n    # Engage Magnetic Module\n    protocol.comment(\"Engaging Magnetic Module and incubating for 6 minutes.\")\n    magdeck.engage()\n    protocol.delay(minutes=6)\n\n    # Transfer clean samples to aluminum block plate.\n    for mag_samp, pcr_samp in zip(mag_300, pcr_300):\n        big_pick_up()\n        p300.aspirate(22, mag_samp.bottom(0.25))\n        p300.dispense(22, pcr_samp)\n        p300.blow_out(pcr_samp.top())\n        p300.drop_tip()\n\n    # Disengage Magnetic Module ofr PCR purification protocol\n    magdeck.disengage()\n\n    # PCR Prep\n    # Transfer Dual Indexes to the samples\n    primers = [well for row in cool_reagents.rows()[1:] for well in row]\n\n    for primer, well in zip(primers, pcr_prep_samples):\n        small_pick_up()\n        small_pip.aspirate(5, primer.top(-24))\n        small_pip.dispense(5, well)\n        small_pip.drop_tip()\n\n    # Transfer PCR Master Mix to the samples\n    small_pick_up()\n\n    if tip_name == 'opentrons_96_filtertiprack_10ul':\n        mix_vol = 10\n    else:\n        mix_vol = small_pip.max_volume\n\n    small_pip.mix(6, mix_vol, pcr_mm)\n    small_pip.blow_out()\n\n    def small_pip_trans(vol, src, dest):\n        if vol > small_pip.max_volume:\n            while vol > mix_vol:\n                if not small_pip.hw_pipette['has_tip']:\n                    small_pick_up()\n                small_pip.aspirate(mix_vol*0.9, src)\n                small_pip.dispense(mix_vol*0.9, dest)\n                small_pip.blow_out()\n                small_pip.drop_tip()\n                vol -= mix_vol*0.9\n            small_pip.pick_up_tip()\n            small_pip.aspirate(vol, src)\n            small_pip.dispense(vol, dest)\n        else:\n            small_pip.aspirate(vol, src)\n            small_pip.dispense(vol, dest)\n\n    for well in pcr_prep_samples:\n        if not small_pip.hw_pipette['has_tip']:\n            small_pick_up()\n        small_pip_trans(25, pcr_mm, well.top(-12))\n        small_pip.blow_out()\n        small_pip.mix(10, 10, well.top(-13.5))\n        small_pip.blow_out(well.top(-12))\n        small_pip.drop_tip()\n\n    tempdeck.deactivate()\n    protocol.comment(\"Place samples in thermocycler for PCR. \\\n    Temp deck is turned off. Put reagents on temp deck back in the -20\")\n\n    # write updated tipcount to CSV\n    new_tip_count = str(spip_count)+\", \"+str(bpip_count)+\"\\n\"\n    if not protocol.is_simulating():\n        with open(file_path, 'w') as outfile:\n            outfile.write(new_tip_count)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Single-Channel Pipette",
            "name": "pip_type",
            "options": [
                {
                    "label": "P50 Single",
                    "value": "p50_single"
                },
                {
                    "label": "P20 Single",
                    "value": "p20_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Single-Channel Pipette Tip Type",
            "name": "tip_name",
            "options": [
                {
                    "label": "[P50] Opentrons 50\u00b5L/300\u00b5L Tips",
                    "value": "opentrons_96_tiprack_300ul"
                },
                {
                    "label": "[P50] Opentrons 200\u00b5L Filter Tips",
                    "value": "opentrons_96_filtertiprack_200ul"
                },
                {
                    "label": "[P20] Opentrons 10\u00b5L/20\u00b5L Tips",
                    "value": "opentrons_96_tiprack_20ul"
                },
                {
                    "label": "[P20] Opentrons 20\u00b5L Filter Tips",
                    "value": "opentrons_96_filtertiprack_20ul"
                },
                {
                    "label": "[P20] Opentrons 10\u00b5L Filter Tips",
                    "value": "opentrons_96_filtertiprack_10ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi-Channel Pipette Tip Type",
            "name": "p300tips",
            "options": [
                {
                    "label": "Opentrons 50\u00b5L/300\u00b5L Tips",
                    "value": "opentrons_96_tiprack_300ul"
                },
                {
                    "label": "Opentrons 200\u00b5L Filter Tips",
                    "value": "opentrons_96_filtertiprack_200ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Number of Samples",
            "name": "samps",
            "options": [
                {
                    "label": "8",
                    "value": "8"
                },
                {
                    "label": "16",
                    "value": "16"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p50_single"
        },
        {
            "mount": "right",
            "name": "p300_multi"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "NEST 96-Well Plate on Magnetic Module on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 24-Well Aluminum Block on Temperature Module on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_24_aluminumblock_generic_2ml_screwcap"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.1",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Swift 2S Turbo DNA Library Kit Protocol: Part 2/3 -     Ligation Clean-Up & PCR Prep",
        "source": "Protocol Library"
    },
    "modules": []
}