{
    "content": "import math\nfrom opentrons import protocol_api\n\nmetadata = {\n    'protocolName': 'Extraction Prep for Kingfisher Flex Extractor',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.7'\n}\n\n\ndef run(ctx):\n\n    [num_samp, overage_percent, mix_reps,\n        p20_mount, p300_mount] = get_values(  # noqa: F821\n        \"num_samp\", \"overage_percent\",\n        \"mix_reps\", \"p20_mount\", \"p300_mount\")\n\n    if not 0 <= num_samp <= 384:\n        raise Exception(\"Enter a sample number between 1-384\")\n\n    num_plates = math.ceil(num_samp/96)\n    plates = [str(num+1) for num in range(0, num_plates)]\n    overage = 1+overage_percent/100\n\n    if not 0 <= num_samp <= 384:\n        raise Exception(\"Enter a sample number between 1-384\")\n\n    # load labware\n    sample_plates = [ctx.load_labware('nest_96_wellplate_2ml_deep', slot)\n                     for slot in plates]\n    tuberack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '5')\n    pcr_plate_384 = ctx.load_labware('corning_384_wellplate_112ul_flat', '6')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', slot)\n                 for slot in ['8', '9', '11']]\n    tiprack300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot)\n                  for slot in ['7', '10']]\n\n    # load instrument\n    p300 = ctx.load_instrument('p300_multi_gen2', p300_mount,\n                               tip_racks=tiprack300)\n    p20 = ctx.load_instrument('p20_multi_gen2', p20_mount,\n                              tip_racks=tiprack20)\n\n    num_channels_per_pickup = 1  # (only pickup tips on front-most channel)\n    tips_ordered = [\n        tip for rack in tiprack300\n        for row in rack.rows()[\n         len(rack.rows())-num_channels_per_pickup::-1*num_channels_per_pickup]\n        for tip in row]\n    tip_count = 0\n\n    def pick_up_300():\n        nonlocal tip_count\n        p300.pick_up_tip(tips_ordered[tip_count])\n        tip_count += 1\n\n    def pick_up_20():\n        try:\n            p20.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace empty tip racks\")\n            p20.reset_tipracks()\n            pick_up_20()\n\n    # protocol\n    sample_wells = [well for plate in sample_plates\n                    for well in plate.wells()][:num_samp]\n\n    # reagents\n    rp_blue = tuberack.rows()[0][0]\n    n1_pink = tuberack.rows()[0][1]\n    reagents = [rp_blue, n1_pink]\n    n1_pink_vol = (0.39*num_samp*overage)/6  # divide by 6 for number of tube\n    rp_blue_vol = n1_pink_vol\n    vols = [rp_blue_vol, n1_pink_vol]\n\n    one_step_buffer = tuberack.rows()[1][:6]\n    one_step_buffer_vol = (6.25*num_samp*overage)/6\n    mastermix_tube = tuberack.rows()[2][:6]\n    positive_control = tuberack.rows()[3][5]\n\n    total_mix_vol = (n1_pink_vol+rp_blue_vol+one_step_buffer_vol)*6\n\n    # make mastermix pt. 1\n    for tube, vol in zip(reagents, vols):\n        if vol > 20:\n            pip = p300\n            pick_up_300()\n        else:\n            pip = p20\n            pick_up_20()\n        for mix_tubes in mastermix_tube:\n            pip.aspirate(vol, tube)\n            pip.dispense(vol, mix_tubes.top())\n        pip.drop_tip()\n\n    # make mastermix pt.2\n    remainder = one_step_buffer_vol % 300\n    number_transfers = math.floor(one_step_buffer_vol/300)\n    for source_tube, dest_tube in zip(one_step_buffer, mastermix_tube):\n        if one_step_buffer_vol > 20:\n            pip = p300\n            if not pip.has_tip:\n                pick_up_300()\n        else:\n            pip = p20\n            if not pip.has_tip:\n                pick_up_20()\n        for _ in range(number_transfers):\n            pip.aspirate(300, source_tube)\n            pip.dispense(300, dest_tube)\n        if remainder > 20:\n            pip = p300\n            if not pip.has_tip:\n                pick_up_300()\n        else:\n            pip = p20\n            if not pip.has_tip:\n                pick_up_20()\n        pip.aspirate(remainder, source_tube)\n        pip.dispense(remainder, dest_tube)\n    if p20.has_tip:\n        p20.drop_tip()\n    if p300.has_tip:\n        p300.drop_tip()\n\n    # mix mastermix solution\n    pick_up_300()\n    for tube in mastermix_tube:\n        p300.mix(mix_reps,\n                 total_mix_vol if total_mix_vol < 300 else 300,\n                 tube)\n    p300.drop_tip()\n\n    # plate mapping\n    plate1_to_384 = [well for column in pcr_plate_384.columns()[::2]\n                     for well in column[::2]][:96 if\n                                              num_samp > 96 else num_samp]\n    plate2_to_384 = [well for column in pcr_plate_384.columns()[1::2]\n                     for well in column[::2]][:96 if num_samp > 192\n                                              else num_samp-96]\n    plate3_to_384 = [well for column in pcr_plate_384.columns()[::2]\n                     for well in column[1::2]][:96 if\n                                               num_samp > 288\n                                               else num_samp-192]\n    plate4_to_384 = [well for column in pcr_plate_384.columns()[1::2]\n                     for well in column[1::2]][:num_samp-289]  # 289 for ctrl\n    plates = {\n                0: plate1_to_384,\n                1: plate2_to_384,\n                2: plate3_to_384,\n                3: plate4_to_384\n            }\n\n    # add positive control\n    airgap = 5\n    ctx.comment('Adding Positive Control')\n    pick_up_20()\n    p20.aspirate(5.5, positive_control)\n    p20.air_gap(airgap)\n    p20.dispense(7+airgap, pcr_plate_384.wells()[-1].top())\n    p20.drop_tip()\n\n    # distribute mastermix\n    ctx.comment('Distributing Mastermix')\n    pick_up_20()\n    p20.aspirate(7, mastermix_tube[0])\n    p20.air_gap(airgap)\n    p20.dispense(7+airgap, pcr_plate_384.wells()[-1].top())\n    for i, plate in enumerate(sample_plates):\n        for tube, well in zip((num_samp*mastermix_tube)[1:], plates[i]):\n            p20.aspirate(7, tube)\n            p20.air_gap(airgap)\n            p20.dispense(7+airgap, well.top())\n        ctx.comment('\\n\\n\\n\\n\\n\\n')\n    p20.drop_tip()\n\n    # add sample and mix\n    ctx.comment('Adding Sample')\n    for i, plate in enumerate(sample_plates):\n        for s, d in zip(sample_wells, plates[i]):\n            pick_up_20()\n            p20.aspirate(5.5, s)\n            p20.air_gap(airgap)\n            p20.dispense(5.5+airgap, d)\n            p20.mix(mix_reps, 12.5, d)\n            p20.blow_out()\n            p20.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of Populated wells (1-384)",
            "name": "num_samp",
            "type": "int"
        },
        {
            "default": 10,
            "label": "Overage Percent",
            "name": "overage_percent",
            "type": "int"
        },
        {
            "default": 15,
            "label": "Mix Repetitions",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "label": "P20 Single Channel Mount (GEN2)",
            "name": "p20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Single Channel Mount (GEN2)",
            "name": "p300_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Deepwell Plate 2mL on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 1.5 mL Safe-Lock Snapcap on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Corning 384 Well Plate 112 \u00b5L Flat on 6",
            "share": false,
            "slot": "6",
            "type": "corning_384_wellplate_112ul_flat"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.7",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protocolName": "Extraction Prep for Kingfisher Flex Extractor",
        "source": "Custom Protocol Request"
    },
    "modules": []
}