{"instruments": [{"mount": "left", "name": "p10_multi"}], "labware": [{"slot": "1", "type": "10ul tiprack", "name": "10ul tiprack on 1", "share": false}, {"slot": "2", "type": "10ul tiprack", "name": "10ul tiprack on 2", "share": false}, {"slot": "3", "type": "10ul tiprack", "name": "10ul tiprack on 3", "share": false}, {"slot": "4", "type": "copy (daughter) plate 1", "name": "copy (daughter) plate 1 on 4", "share": false}, {"slot": "10", "type": "10ul tiprack", "name": "10ul tiprack on 10", "share": false}, {"slot": "11", "type": "Prestwick (mother plate)", "name": "Prestwick (mother plate) on 11", "share": false}, {"slot": "12", "type": "opentrons_1_trash_1100ml_fixed", "name": "Opentrons Fixed Trash on 12", "share": false}], "fields": [{"type": "dropDown", "label": "P10 multi-channel mount", "name": "p10_multi_mount", "options": [{"label": "left", "value": "left"}, {"label": "right", "value": "right"}]}, {"type": "dropDown", "label": "number of daughter plates (1-6)", "name": "num_daughter_plates", "options": [{"label": "1", "value": 1}, {"label": "2", "value": 2}, {"label": "3", "value": 3}, {"label": "4", "value": 4}, {"label": "5", "value": 5}, {"label": "6", "value": 6}]}, {"type": "int", "label": "start column (inclusive)", "name": "start_col", "default": 3}, {"type": "int", "label": "end column (inclusive)", "name": "end_col", "default": 22}, {"type": "float", "label": "transfer volume (in \u00b5l)", "name": "transfer_volume", "default": 4.0}, {"type": "dropDown", "label": "dispense plan", "name": "dispense_plan", "options": [{"label": "one-to-one dispense", "value": "single"}, {"label": "multi dispense", "value": "multi"}]}], "modules": [], "metadata": {"protocolName": "Drug Screening", "author": "Nick <protocols@opentrons.com>", "source": "Custom Protocol Request", "apiLevel": "2.0"}, "content": "import math\n\n# metadata\nmetadata = {\n    'protocolName': 'Drug Screening',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.0'\n}\n\n\ndef run(ctx):\n    [p10_multi_mount, num_daughter_plates, start_col, end_col,\n        transfer_volume, dispense_plan] = get_values(  # noqa: F821\n            'p10_multi_mount', 'num_daughter_plates', 'start_col',\n            'end_col', 'transfer_volume', 'dispense_plan'\n        )\n\n    # checks\n    if num_daughter_plates > 6 or num_daughter_plates < 1:\n        raise Exception('Invalid number of daughter plates (must be 1-6)')\n    if start_col < 1 or end_col > 24 or start_col >= end_col:\n        raise Exception('Invaid columns (start and end must be 1-24), and \\\nend must be after start.')\n\n    # labware\n    tipracks10 = [\n        ctx.load_labware('opentrons_96_tiprack_10ul', slot, '10ul tiprack')\n        for slot in ['1', '2', '3', '10']\n    ]\n    daughters = [\n        ctx.load_labware(\n            'corning_384_wellplate_112ul_flat',\n            slot,\n            'copy (daughter) plate ' + str(i+1)\n        )\n        for i, slot in enumerate(range(4, 4+num_daughter_plates))\n        ]\n    mother = ctx.load_labware(\n        'corning_384_wellplate_112ul_flat', '11', 'Prestwick (mother plate)')\n\n    # pipette\n    p10 = ctx.load_instrument(\n        'p10_multi', p10_multi_mount, tip_racks=tipracks10)\n    p10.flow_rate.aspirate = 2\n    p10.flow_rate.dispense = 5\n\n    # sample setup\n    sources = [\n        well for col in mother.columns()[int(start_col)-1:int(end_col)]\n        for well in col[:2]\n    ]\n    dest_sets = [\n        [daughter.columns()[col][row] for daughter in daughters]\n        for col in range(int(start_col)-1, int(end_col))\n        for row in range(2)\n    ]\n\n    def split_dests(dest_list, num_elements):\n        num_splits = math.ceil(len(dest_list)/num_elements)\n        return [\n            dest_list[i*num_elements:i*num_elements+num_elements]\n            if i + num_elements <= len(dest_list) else dest_list[i:]\n            for i in range(num_splits)\n        ]\n\n    # transfers\n    for s, d_set in zip(sources, dest_sets):\n        p10.pick_up_tip()\n        if dispense_plan == 'single':\n            for d in d_set:\n                p10.transfer(\n                    transfer_volume,\n                    s.top(7-s._depth),\n                    d.top(2-d._depth),\n                    new_tip='never'\n                )\n                p10.touch_tip(d, v_offset=7-d._depth)\n        else:\n            num_trans_per_asp = int(9//transfer_volume)\n            disp_sets = split_dests(d_set, num_trans_per_asp)\n            for set in disp_sets:\n                asp_vol = len(set)*transfer_volume + 1\n                p10.aspirate(asp_vol, s.top(7-s._depth))\n                for well in set:\n                    p10.dispense(transfer_volume, well.top(2-well._depth))\n                    p10.touch_tip(well, v_offset=7-well._depth)\n                p10.blow_out(s.top(7-s._depth))\n        p10.drop_tip()\n", "custom_labware_defs": []}