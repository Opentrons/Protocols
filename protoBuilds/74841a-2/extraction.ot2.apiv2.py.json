{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\nimport contextlib\nimport threading\nfrom opentrons import protocol_api\n\nmetadata = {\n    'protocolName': 'Swift NormalaseTM Amplicon Panels (SNAP): Size Selection \\\nand Cleanup Part 2/2',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.10'\n}\n\n\n# Definitions for deck light flashing\n@contextlib.contextmanager\ndef flashing_rail_lights(\n    protocol: protocol_api.ProtocolContext, seconds_per_flash_cycle=1.0\n):\n    \"\"\"Flash the rail lights on and off in the background.\n\n    Source: https://github.com/Opentrons/opentrons/issues/7742\n\n    Example usage:\n\n        # While the robot is doing nothing for 2 minutes, flash lights quickly.\n        with flashing_rail_lights(protocol, seconds_per_flash_cycle=0.25):\n            protocol.delay(minutes=2)\n\n    When the ``with`` block exits, the rail lights are restored to their\n    original state.\n\n    Exclusive control of the rail lights is assumed. For example, within the\n    ``with`` block, you must not call `ProtocolContext.set_rail_lights`\n    yourself, inspect `ProtocolContext.rail_lights_on`, or nest additional\n    calls to `flashing_rail_lights`.\n    \"\"\"\n    original_light_status = protocol.rail_lights_on\n\n    stop_flashing_event = threading.Event()\n\n    def background_loop():\n        while True:\n            protocol.set_rail_lights(not protocol.rail_lights_on)\n            # Wait until it's time to toggle the lights for the next flash or\n            # we're told to stop flashing entirely, whichever comes first.\n            got_stop_flashing_event = stop_flashing_event.wait(\n                timeout=seconds_per_flash_cycle/2\n            )\n            if got_stop_flashing_event:\n                break\n\n    background_thread = threading.Thread(\n        target=background_loop, name=\"Background thread for flashing rail \\\nlights\"\n    )\n\n    try:\n        if not protocol.is_simulating():\n            background_thread.start()\n        yield\n\n    finally:\n        # The ``with`` block might be exiting normally, or it might be exiting\n        # because something inside it raised an exception.\n        #\n        # This accounts for user-issued cancelations because currently\n        # (2021-05-04), the Python Protocol API happens to implement user-\n        # issued cancellations by raising an exception from internal API code.\n        if not protocol.is_simulating():\n            stop_flashing_event.set()\n            background_thread.join()\n\n        # This is questionable: it may issue a command to the API while the API\n        # is in an inconsistent state after raising an exception.\n        protocol.set_rail_lights(original_light_status)\n\n\n# Start protocol\ndef run(ctx):\n    [num_samples, mag_height, z_offset, radial_offset, starting_vol,\n     wash1_vol, wash2_vol, elution_vol, mix_reps,\n     settling_time, park_tips, tip_track, flash] = get_values(  # noqa: F821\n        'num_samples', 'mag_height', 'z_offset', 'radial_offset',\n        'starting_vol', 'wash1_vol', 'wash2_vol',\n        'elution_vol', 'mix_reps', 'settling_time', 'park_tips', 'tip_track',\n        'flash')\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    elutionplate = ctx.load_labware('biorad_96_wellplate_200ul_pcr', '1',\n                                    'elution plate')\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('biorad_96_wellplate_200ul_pcr',\n                                    'PCR plate')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '11',\n                             'Liquid Waste').wells()[0].top()\n    res1 = ctx.load_labware('usascientific_12_reservoir_22ml', '5',\n                            'reagent reservoir')\n    num_cols = math.ceil(num_samples/8)\n    tips300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['8', '9', '10']]\n    tips20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', slot,\n                               '20\u00b5l filtertiprack') for slot in ['2', '3']]\n    if park_tips:\n        rack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '7', 'tiprack for parking')\n        parking_spots = rack.rows()[0][:num_cols]\n    else:\n        rack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '7', '200\u00b5l filtertiprack')\n        parking_spots = [None for none in range(12)]\n    tips300.insert(0, rack)\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n    m20 = ctx.load_instrument('p20_multi_gen2', 'right', tip_racks=tips20)\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    peg = res1.wells()[4:5]\n    etoh1 = res1.wells()[5:6]\n    etoh2 = res1.wells()[6:7]\n    post_pcr_te_buff = res1.wells()[7]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n    radius = mag_samples_m[0].diameter/2\n\n    magdeck.disengage()  # just in case\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def _pick_up(pip, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log[pip]['tips'][tip_log[pip]['count']])\n            tip_log[pip]['count'] += 1\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n    drop_threshold = 120\n\n    def _drop(pip):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        if pip.type == 'multi':\n            drop_count += 8\n        else:\n            drop_count += 1\n        if drop_count == drop_threshold:\n            # Setup for flashing lights notification to empty trash\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    with flashing_rail_lights(ctx, seconds_per_flash_cycle=1):\n                        ctx.pause('Please empty tips from waste before \\\nresuming.')\n            drop_count = 0\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                if flash:\n                    if not ctx._hw_manager.hardware.is_simulator:\n                        with flashing_rail_lights(ctx,\n                                                  seconds_per_flash_cycle=1):\n                            ctx.pause('Please empty liquid waste (slot 11) \\\nbefore resuming.')\n\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0).move(Point(x=side*radius*radial_offset,\n                                         z=z_offset))\n            for _ in range(num_trans):\n                _waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, m.top())\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=20)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            _drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def wash(vol, source, mix_reps=15, park=True, resuspend=True):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                m300.mix(mix_reps, 150, loc)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage(height=mag_height)\n\n        ctx.delay(seconds=30, msg='Incubating on MagDeck for 30 seconds.')\n\n        remove_supernatant(vol+2, park=park)\n\n    def elute(vol, park=True):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m20)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            m20.aspirate(vol, post_pcr_te_buff)\n            m20.move_to(m.center())\n            m20.dispense(vol, loc)\n            m20.mix(mix_reps, 0.8*vol, loc)\n            m20.blow_out(m.bottom(5))\n            m20.air_gap(20)\n            if park:\n                m20.drop_tip(spot)\n            else:\n                _drop(m20)\n\n        magdeck.engage(height=mag_height)\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            if park:\n                _pick_up(m20, spot)\n            else:\n                _pick_up(m20)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom().move(Point(x=side*radius*radial_offset,\n                                        z=z_offset))\n            m20.transfer(vol, loc, e.bottom(5), new_tip='never')\n            m20.blow_out(e.top(-2))\n            m20.air_gap(20)\n            m20.drop_tip()\n\n    \"\"\"function calls\"\"\"\n    wash(wash1_vol, peg, park=False)\n    wash(wash2_vol, etoh1, park=park_tips, resuspend=False)\n    wash(wash2_vol, etoh2, park=park_tips, resuspend=False)\n    elute(elution_vol, park=False)\n\n    # track final used tip\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples + controls (1-96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "default": 18,
            "label": "magnetic engage height (in mm)",
            "name": "mag_height",
            "type": "float"
        },
        {
            "default": 1.0,
            "label": "height offset from bottom of deepwell plate (in mm)",
            "name": "z_offset",
            "type": "float"
        },
        {
            "default": 0.8,
            "label": "lateral offset (as fraction of deepwell radius)",
            "name": "radial_offset",
            "type": "float"
        },
        {
            "default": 57.5,
            "label": "intitial volume (sample + lysis buffer, in ul)",
            "name": "starting_vol",
            "type": "float"
        },
        {
            "default": 32.5,
            "label": "PEG volume (in ul)",
            "name": "wash1_vol",
            "type": "float"
        },
        {
            "default": 180.0,
            "label": "EtOH volume (in ul)",
            "name": "wash2_vol",
            "type": "float"
        },
        {
            "default": 20.0,
            "label": "Post-PCR TE buffer elution volume (in ul)",
            "name": "elution_vol",
            "type": "float"
        },
        {
            "default": 10,
            "label": "mix repetitions for bead resuspension",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 2.0,
            "label": "bead settling time (in minutes)",
            "name": "settling_time",
            "type": "float"
        },
        {
            "label": "park tips",
            "name": "park_tips",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "track tips across protocol runs",
            "name": "tip_track",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "flash robot on pause",
            "name": "flash",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "elution plate on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "20\u00b5l filtertiprack on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "PCR plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "reagent reservoir on 5",
            "share": false,
            "slot": "5",
            "type": "usascientific_12_reservoir_22ml"
        },
        {
            "name": "tiprack for parking on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Liquid Waste on 11",
            "share": false,
            "slot": "11",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.10",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Swift NormalaseTM Amplicon Panels (SNAP): Size Selection and Cleanup Part 2/2"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 4 lw PCR plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        }
    ]
}