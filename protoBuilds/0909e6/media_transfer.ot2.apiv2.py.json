{
    "content": "from io import StringIO\nimport csv\nimport math\nfrom opentrons.protocol_api.labware import Well\n\nmetadata = {\n    'protocolName': 'Cell Culture',\n    'author': 'Nick <ndiehl@opentrons.com',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.12'\n}\n\n\ndef run(ctx):\n\n    [csv_factors] = get_values(  # noqa: F821\n        'csv_factors')\n\n    class WellH(Well):\n        def __init__(self, well, height=5, min_height=3,\n                     comp_coeff=1.15, current_volume=0, min_vol=1000):\n            super().__init__(well._impl)\n            self.well = well\n            self.height = height\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n            self.radius = self.diameter/2\n            self.current_volume = current_volume\n            self.min_vol = min_vol\n\n        def height_dec(self, vol):\n            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff\n            if self.height - dh > self.min_height:\n                self.height = self.height - dh\n            else:\n                self.height = self.min_height\n            if self.current_volume - vol > 0:\n                self.current_volume = self.current_volume - vol\n            else:\n                self.current_volume = 0\n            return(self.well.bottom(self.height))\n\n        def height_inc(self, vol):\n            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff\n            if self.height + dh < self.depth:\n                self.height = self.height + dh\n            else:\n                self.height = self.depth\n            self.current_volume += vol\n            return(self.well.bottom(self.height + 20))\n\n    # labware\n    tuberack50 = ctx.load_labware('opentrons_6_tuberack_falcon_50ml_conical',\n                                  '1', 'media tuberack')\n    tuberacks15 = [\n        ctx.load_labware('opentrons_15_tuberack_falcon_15ml_conical',\n                         slot, f'factor {factor_ids} tuberack')\n        for slot, factor_ids in zip(['4', '7'], ['1-15', '16-30'])]\n    plate = ctx.load_labware('usascientific_96_wellplate_2.4ml_deep', '2')\n    tiprack300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '3')]\n    tiprack1000 = [\n        ctx.load_labware('opentrons_96_filtertiprack_1000ul', slot)\n        for slot in ['6']]\n\n    # pipettes\n    p300 = ctx.load_instrument('p300_single_gen2', 'left',\n                               tip_racks=tiprack300)\n    p1000 = ctx.load_instrument('p1000_single_gen2', 'right',\n                                tip_racks=tiprack1000)\n\n    # reagents\n    media = [\n        WellH(well, current_volume=48000, height=well.depth*0.9)\n        for well in tuberack50.rows()[0]]\n\n    # parse data\n    f = StringIO(csv_factors)\n    reader = csv.reader(f, delimiter=',')\n    data = []\n    factor_volumes_ml = None\n    for i, row in enumerate(reader):\n        if i == 1:\n            factor_volumes_ml = [float(val) for val in row[1:] if val]\n        if i > 2:\n            content = [float(val) for val in row if val]\n            data.append(content)\n    num_factors = len(data[0]) - 3  # exclude total volume, media volume\n\n    factor_tubes = [\n        well for rack in tuberacks15 for well in rack.wells()][:num_factors]\n    factor_heights = [\n        # ensure tip is submerged\n        round(vol/15*tuberacks15[0].wells()[0].depth*0.9, 1)\n        for vol in factor_volumes_ml]\n    factors = [\n        WellH(well, current_volume=vol*1000, height=height)\n        for well, vol, height in zip(\n            factor_tubes, factor_volumes_ml, factor_heights)]\n\n    def slow_withdraw(well, pip=p1000):\n        ctx.max_speeds['A'] = 25\n        ctx.max_speeds['Z'] = 25\n        pip.move_to(well.top())\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n\n    def split_media_vol(vol):\n        num_transfers = math.ceil(vol/1000)\n        vol_per_transfer = round(vol/num_transfers, 1)\n        return [vol_per_transfer]*num_transfers\n\n    # iterate\n    iterator_media = iter(media)\n    current_media = next(iterator_media)\n\n    def check_media(vol):\n        nonlocal current_media\n        if current_media.current_volume - vol < current_media.min_vol:\n            current_media = next(iterator_media)\n\n    # transfer media\n    p1000.pick_up_tip()\n    for well, line in zip(plate.wells(), data):\n        vol_media_total = line[0]\n        vol_media_split = split_media_vol(vol_media_total)\n        for vol in vol_media_split:\n            check_media(vol)\n            p1000.aspirate(vol, current_media.height_dec(vol))\n            slow_withdraw(current_media, p1000)\n            p1000.dispense(vol, well.bottom(2))\n            slow_withdraw(well, p1000)\n    p1000.return_tip()\n    p1000.reset_tipracks()\n\n    # transfer factors\n    for i, factor in enumerate(factors):\n        p300.pick_up_tip()\n        for well, line in zip(plate.wells(), data):\n            factor_vol = line[3+i]\n            if factor_vol > 0:\n                p300.aspirate(factor_vol, factor.height_dec(factor_vol))\n                slow_withdraw(factor, p300)\n                p300.dispense(factor_vol, well.top(-2))\n        p300.drop_tip()\n\n    # mix\n    for well in plate.wells()[:len(data)]:\n        p1000.pick_up_tip()\n        p1000.mix(5, 800, well.bottom(2))\n        slow_withdraw(well, p1000)\n        p1000.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Media Total,Factor 1,Factor 2,Factor 3,Factor 4,Factor 5,Factor 6,Factor 7,Factor 8,Factor 9,Factor 10,Factor 11,Factor 12,\nfactor_volumes (in ml):,5,1.5,7,14,10.1,5,1.5,7,14,10.1,2,2,\n,,,,,,,,,,,,,\n1170,0,0,0,0,0,0,0,0,0,0,65,65,\n1235,0,65,0,0,0,0,0,0,0,0,0,0,\n1040,65,65,0,65,0,0,0,0,0,0,0,65,\n975,0,65,65,65,65,0,0,0,0,0,0,65,\n1053,0,0,65,65,0,52,0,0,0,0,65,0,\n988,0,65,65,0,65,52,0,0,0,0,65,0,\n845,65,65,65,65,0,0,65,0,0,0,65,65,\n910,0,65,0,65,65,0,65,0,0,0,65,65,\n858,65,65,65,0,65,52,65,0,0,0,0,65,\n988,0,0,0,65,65,52,65,0,0,0,0,65,\n1040,0,65,65,0,0,0,0,65,0,0,65,0,\n1105,0,0,0,65,0,0,0,65,0,0,0,65,\n1040,65,0,0,0,65,0,0,65,0,0,0,65,\n923,65,0,65,0,0,52,0,65,0,0,65,65,\n923,0,65,0,65,65,52,0,65,0,0,65,0,\n923,65,0,65,65,65,52,0,65,0,0,0,0,\n975,65,0,0,65,0,0,65,65,0,0,65,0,\n1040,0,0,0,0,65,0,65,65,0,0,65,0,\n910,65,65,65,0,65,0,65,65,0,0,0,0,\n1053,0,0,65,0,0,52,65,65,0,0,0,0,\n858,0,65,65,65,0,52,65,65,0,0,0,65,\n793,65,65,0,0,65,52,65,65,0,0,65,65,\n793,0,0,65,65,65,52,65,65,0,0,65,65,\n975,65,65,65,0,0,0,0,0,65,0,0,65,\n1040,65,0,65,65,0,0,0,0,65,0,0,0,\n910,65,0,0,65,65,0,0,0,65,0,65,65,\n1053,0,65,0,0,0,52,0,0,65,0,0,65,\n728,65,65,65,65,65,52,0,0,65,0,65,65,\n1040,0,0,0,65,0,0,65,0,65,0,0,65,\n910,65,65,0,0,65,0,65,0,65,0,65,0,\n1040,0,0,65,0,65,0,65,0,65,0,0,0,\n858,65,0,65,0,0,52,65,0,65,0,65,65,\n923,65,65,0,65,0,52,65,0,65,0,0,0,\n1105,65,0,0,0,0,0,0,65,65,0,0,0,\n910,65,65,0,65,65,0,0,65,65,0,0,0,\n910,0,0,65,65,65,0,0,65,65,0,65,0,\n923,65,65,0,0,0,52,0,65,65,0,65,0,\n923,0,0,0,0,65,52,0,65,65,0,65,65,\n793,65,65,65,0,65,52,0,65,65,0,0,65,\n910,0,65,65,65,0,0,65,65,65,0,0,0,\n780,0,65,65,0,65,0,65,65,65,0,65,65,\n793,0,65,0,65,0,52,65,65,65,0,65,65,\n793,65,0,65,65,0,52,65,65,65,0,0,65,\n923,0,65,0,0,65,52,65,65,65,0,0,0,\n793,65,0,65,0,65,52,65,65,65,0,65,0,\n1118,0,0,65,0,0,0,0,0,0,52,0,65,\n1118,0,0,0,65,65,0,0,0,0,52,0,0,\n858,65,65,65,65,65,0,0,0,0,52,65,0,\n1001,65,65,65,0,0,52,0,0,0,52,0,0,\n936,0,65,0,65,0,52,0,0,0,52,65,65,\n871,0,0,65,65,65,52,0,0,0,52,65,65,\n988,0,65,65,0,0,0,65,0,0,52,65,0,\n988,65,0,65,65,0,0,65,0,0,52,0,0,\n988,0,65,0,0,65,0,65,0,0,52,0,65,\n858,65,0,65,0,65,0,65,0,0,52,65,65,\n871,65,0,0,65,0,52,65,0,0,52,65,65,\n1001,65,0,0,0,65,52,65,0,0,52,0,0,\n871,0,65,65,65,65,52,65,0,0,52,0,0,\n923,65,65,0,0,0,0,0,65,0,52,65,65,\n988,0,65,65,65,0,0,0,65,0,52,0,0,\n1066,0,0,0,0,0,52,0,65,0,52,65,0,\n806,65,65,0,65,65,52,0,65,0,52,0,65,\n858,65,65,65,0,0,0,65,65,0,52,0,65,\n858,0,0,65,65,0,0,65,65,0,52,65,65,\n858,65,65,0,0,65,0,65,65,0,52,65,0,\n793,65,0,0,65,65,0,65,65,0,52,65,65,\n871,65,65,0,65,0,52,65,65,0,52,0,0,\n741,65,65,65,65,0,52,65,65,0,52,65,0,\n871,0,0,65,0,65,52,65,65,0,52,0,65,\n988,65,0,65,0,0,0,0,0,65,52,65,0,\n988,0,65,0,65,0,0,0,0,65,52,65,0,\n858,0,65,65,0,65,0,0,0,65,52,65,65,\n1001,65,0,0,0,0,52,0,0,65,52,0,65,\n806,65,65,0,0,65,52,0,0,65,52,65,65,\n871,65,0,65,65,65,52,0,0,65,52,0,0,\n858,65,65,0,65,65,0,65,0,65,52,0,0,\n858,0,0,65,65,65,0,65,0,65,52,65,0,\n1001,0,0,0,0,0,52,65,0,65,52,65,0,\n806,0,65,65,65,0,52,65,0,65,52,0,65,\n871,0,0,0,0,65,52,65,0,65,52,65,65,\n988,0,0,65,0,0,0,0,65,65,52,0,65,\n858,65,65,65,0,65,0,0,65,65,52,0,0,\n793,0,65,0,65,65,0,0,65,65,52,65,65,\n793,65,0,65,65,65,0,0,65,65,52,0,65,\n806,0,65,65,0,0,52,0,65,65,52,65,65,\n806,65,0,0,65,65,52,0,65,65,52,65,0,\n806,0,65,65,65,65,52,0,65,65,52,0,0,\n663,65,65,65,65,0,0,65,65,65,52,65,65,\n858,65,0,0,0,65,0,65,65,65,52,0,65,\n728,0,65,65,65,65,0,65,65,65,52,0,65,\n871,0,65,0,0,0,52,65,65,65,52,0,65,\n936,0,0,0,65,0,52,65,65,65,52,0,0,\n923,32.5,32.5,32.5,32.5,32.5,26,32.5,32.5,32.5,26,32.5,32.5,\n923,32.5,32.5,32.5,32.5,32.5,26,32.5,32.5,32.5,26,32.5,32.5,\n1300,0,0,0,0,0,0,0,0,0,0,0,0,\n1300,0,0,0,0,0,0,0,0,0,0,0,0,\n",
            "label": "factor .csv file",
            "name": "csv_factors",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "media tuberack on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_6_tuberack_falcon_50ml_conical"
        },
        {
            "name": "USA Scientific 96 Deep Well Plate 2.4 mL on 2",
            "share": false,
            "slot": "2",
            "type": "usascientific_96_wellplate_2.4ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "factor 1-15 tuberack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 1000 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_1000ul"
        },
        {
            "name": "factor 16-30 tuberack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Nick <ndiehl@opentrons.com",
        "protocolName": "Cell Culture",
        "source": "Custom Protocol Request"
    },
    "modules": []
}