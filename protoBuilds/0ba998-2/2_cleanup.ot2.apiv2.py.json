{
    "content": "from opentrons import protocol_api\nfrom opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': '5. Illumina DNA Prep - Post Tagmentation Clean Up',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.13'\n}\n\nTEST_MODE_BEADS = False\nTEST_MODE_BIND_INCUBATE = False\nTEST_MODE_TEMP = False\nTEST_MODE_DROP = False\n\n\ndef run(ctx):\n\n    [num_samples] = get_values(  # noqa: F821\n        \"num_samples\")\n\n    reps_mix = 1 if TEST_MODE_BEADS else 10\n    time_settling_minutes = 3.0\n    vol_mix = 70\n    z_offset = 3.0\n    radial_offset_fraction = 0.3  # fraction of radius\n\n    # tuning parameters\n    ctx.max_speeds['X'] = 200\n    ctx.max_speeds['Y'] = 200\n\n    # modules\n    tempdeck = ctx.load_module('temperature module gen2', '7')\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    if not TEST_MODE_TEMP:\n        tempdeck.set_temperature(4)\n    magdeck.disengage()\n\n    # labware\n    mag_plate = magdeck.load_labware(\n        'nest_96_wellplate_100ul_pcr_full_skirt', 'PCR plate')\n    reagent_plate = tempdeck.load_labware(\n        'nest_96_wellplate_100ul_pcr_full_skirt', 'reagent plate')\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '2', 'reservoir')\n    waste_res = ctx.load_labware('nest_1_reservoir_195ml', '5', 'waste')\n    tips20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', slot)\n        for slot in ['3', '6']]\n    tips200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n        for slot in ['8', '9', '10', '11']]\n\n    # load P300M pipette\n    m20 = ctx.load_instrument(\n        'p20_multi_gen2', 'right', tip_racks=tips20)\n    m300 = ctx.load_instrument(\n         'p300_multi_gen2', 'left', tip_racks=tips200)\n\n    # reagents and variables\n    num_cols = math.ceil(num_samples/8)\n    mag_samples = mag_plate.rows()[0][:num_cols]\n    tsb = reagent_plate.rows()[0][2]\n    twb = reservoir.rows()[0][1:1+(math.ceil(num_cols/6))]\n    liquid_trash = [\n        waste_res.wells()[0].top()\n        for _ in range(math.ceil(num_cols/6))]\n\n    vol_tsb = 10.0\n    vol_wash = 100.0\n    ref_well = mag_plate.wells()[0]\n    if ref_well.width:\n        radius = ref_well.width/2\n    else:\n        radius = ref_well.diameter/2\n\n    def wick(pip, well, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*radius*0.7, z=3)))\n\n    def slow_withdraw(pip, well):\n        ctx.max_speeds['A'] = 25\n        ctx.max_speeds['Z'] = 25\n        pip.move_to(well.top())\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n\n    def pick_up(pip, spot=None):\n        if spot:\n            pip.pick_up_tip(spot)\n        else:\n            try:\n                pip.pick_up_tip()\n            except protocol_api.labware.OutOfTipsError:\n                ctx.pause(\"\\n\\n\\n\\nReplace 200ul filtertipracks before \\\nresuming.\\n\\n\\n\\n\")\n                pip.reset_tipracks()\n                pip.pick_up_tip()\n\n    parked_tips = []\n\n    def remove_supernatant(vol, pip=None, z_asp=0.2, park=True):\n        nonlocal parked_tips\n        if not pip:\n            pip = m300 if vol >= 20 else m20\n        pip.flow_rate.aspirate /= 5\n        for i, s in enumerate(mag_samples):\n            if not pip.has_tip:\n                if park:\n                    pick_up(pip, parked_tips[i])\n                else:\n                    pick_up(pip)\n            pip.move_to(s.top())\n            ctx.max_speeds['A'] = 25\n            ctx.max_speeds['Z'] = 25\n            side = -1 if mag_samples.index(s) % 2 == 0 else 1\n            pip.aspirate(vol, s.bottom().move(Point(x=side, z=z_asp)))\n            pip.move_to(s.top())\n            del ctx.max_speeds['A']\n            del ctx.max_speeds['Z']\n            pip.dispense(vol, liquid_trash[i//6])\n            pip.blow_out(liquid_trash[i//6])\n            pip.air_gap(10)\n            if TEST_MODE_DROP:\n                pip.return_tip()\n            else:\n                pip.drop_tip()\n        parked_tips = []\n        pip.flow_rate.aspirate *= 5\n\n    def resuspend(location, reps=reps_mix, vol=vol_mix,\n                  samples=mag_samples, x_mix_fraction=radial_offset_fraction,\n                  z_mix=z_offset, dispense_height_rel=5.0, rate=1.0):\n        side_x = 1 if samples.index(location) % 2 == 0 else -1\n        m300.move_to(location.center())\n        for r_ind in range(reps):\n            bead_loc = location.bottom().move(\n                Point(x=side_x*radius*radial_offset_fraction,\n                      z=z_mix))\n            m300.aspirate(vol, bead_loc, rate=rate)\n            m300.dispense(vol, bead_loc.move(Point(z=dispense_height_rel)),\n                          rate=rate)\n        slow_withdraw(m300, location)\n\n    def wash(vol, reagent, time_incubation=0,\n             time_settling=0, premix=False,\n             do_discard_supernatant=True, do_resuspend=False,\n             vol_supernatant=0, park=True):\n        nonlocal parked_tips\n\n        columns_per_channel = 12//len(reagent)\n        num_transfers = math.ceil(vol/m300.tip_racks[0].wells()[0].max_volume)\n        vol_per_transfer = round(vol/num_transfers, 2)\n\n        last_source = None\n\n        for i, well in enumerate(mag_samples):\n            source = reagent[i//columns_per_channel]\n            pick_up(m300)\n            if park:\n                parked_tips.append(m300._last_tip_picked_up_from)\n            if premix and last_source != source:\n                m300.flow_rate.aspirate *= 4\n                m300.flow_rate.dispense *= 4\n                for _ in range(5):\n                    m300.aspirate(200, source.bottom(0.5))\n                    m300.dispense(200, source.bottom(5))\n                m300.flow_rate.aspirate /= 4\n                m300.flow_rate.dispense /= 4\n            last_source = source\n            for n in range(num_transfers):\n                m300.aspirate(vol_per_transfer, source)\n                slow_withdraw(m300, source)\n                if n < num_transfers - 1:\n                    loc_dispense = well.top\n                else:\n                    side = 1 if mag_plate.rows()[0].index(d) % 2 == 0 else -1\n                    loc_dispense = well.bottom().move(\n                        Point(x=side*radial_offset_fraction, z=z_offset))\n                m300.dispense(vol_per_transfer, loc_dispense, rate=0.2)\n            if do_resuspend:\n                magdeck.disengage()\n                resuspend(well, rate=0.5)\n            ctx.delay(seconds=2)\n            slow_withdraw(m300, well)\n            m300.air_gap(20)\n            if park or TEST_MODE_DROP:\n                m300.return_tip()\n            else:\n                m300.drop_tip()\n\n        if not TEST_MODE_BIND_INCUBATE:\n            ctx.delay(minutes=time_incubation,\n                      msg=f'Incubating off MagDeck for \\\n{time_incubation} minutes.')\n        if do_discard_supernatant:\n            magdeck.engage()\n            if not TEST_MODE_BEADS:\n                ctx.delay(minutes=time_settling, msg=f'Incubating on \\\nMagDeck for {time_settling} minutes.')\n\n            remove_supernatant(vol_supernatant)\n            magdeck.disengage()\n\n    for d in mag_samples:\n        pick_up(m20)\n        m20.aspirate(vol_tsb, tsb.bottom(0.5))\n        slow_withdraw(m20, tsb)\n        m20.dispense(m20.current_volume, d.bottom(2))\n        m20.mix(reps_mix, 20, d.bottom(2))\n        slow_withdraw(m20, d)\n        if TEST_MODE_DROP:\n            m20.return_tip()\n        else:\n            m20.drop_tip()\n\n    ctx.pause('Seal the plate with Microseal B, place on the preprogrammed \\\nthermal cycler, and run the PTC program. Replace on magnetic module when \\\nfinished.')\n\n    if not TEST_MODE_BEADS:\n        magdeck.engage()\n        ctx.delay(minutes=time_settling_minutes, msg=f'Incubating on \\\nMagDeck for {time_settling_minutes} minutes.')\n\n    remove_supernatant(60, pip=m300, park=False)\n\n    # wash\n    wash(vol_wash, twb, time_incubation=0, time_settling=time_settling_minutes,\n         premix=False, do_discard_supernatant=True, do_resuspend=True,\n         vol_supernatant=vol_wash)\n    wash(vol_wash, twb, time_incubation=0, time_settling=time_settling_minutes,\n         premix=False, do_discard_supernatant=True, do_resuspend=True,\n         vol_supernatant=vol_wash)\n    wash(vol_wash, twb, time_incubation=0, time_settling=time_settling_minutes,\n         premix=False, do_discard_supernatant=False, do_resuspend=True,\n         vol_supernatant=vol_wash, park=False)\n\n    magdeck.engage()\n    ctx.delay(minutes=3, msg='Incubating on MagDeck for 3 minutes.')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples (1-96)",
            "name": "num_samples",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "reservoir on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "PCR plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "waste on 5",
            "share": false,
            "slot": "5",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "reagent plate on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "5. Illumina DNA Prep - Post Tagmentation Clean Up"
    },
    "modules": [
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 7 lw reagent plate on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "tempdeck"
        },
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 4 lw PCR plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        }
    ]
}