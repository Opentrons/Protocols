{
    "content": "from opentrons import protocol_api\nfrom opentrons.types import Point\n# import csv\n# import os\n\nmetadata = {\n    'protocolName': 'Cell Culture Prep with CSV Input',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'\n}\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n\n    [csv, m300_mount, p300_mount, temp_mod_temp, pbs_dispense_rate,\n     incubation_time, first_media_x, second_media_y, track_tips\n     ] = get_values(  # noqa: F821\n        \"csv\", \"m300_mount\", \"p300_mount\", \"temp_mod_temp\",\n        \"pbs_dispense_rate\",\n        \"incubation_time\", \"first_media_x\", \"second_media_y\", \"track_tips\")\n\n    # LABWARE\n    temp_mod = ctx.load_module('temperature module gen2', '10')\n    reagents = ctx.load_labware('nest_12_reservoir_15ml', '11')\n    waste_res = ctx.load_labware('nest_12_reservoir_15ml', '7')\n    plate = temp_mod.load_labware(\n                'corning_96_wellplate_360ul_flat', '10')\n\n    # TIPRACKS\n    tipracks = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n                for slot in ['4', '5', '6']]\n\n    # INSTRUMENTS\n    p300 = ctx.load_instrument('p300_single_gen2',\n                               p300_mount,\n                               tip_racks=tipracks)\n    m300 = ctx.load_instrument('p300_multi_gen2',\n                               m300_mount,\n                               tip_racks=tipracks)\n    #\n    # \"\"\" TIP-TRACKING BETWEEN RUNS \"\"\"\n    # # Tip tracking between runs\n    # if not ctx.is_simulating():\n    #     file_path = '/data/csv/tiptracking.csv'\n    #     file_dir = os.path.dirname(file_path)\n    #     # check for file directory\n    #     if not os.path.exists(file_dir):\n    #         os.makedirs(file_dir)\n    #     # check for file; if not there, create initial tip count tracking\n    #     if not os.path.isfile(file_path):\n    #         with open(file_path, 'w') as outfile:\n    #             outfile.write(\"0, 0\\n\")\n\n    # if ctx.is_simulating():\n    #     tips_by_col =[tip for rack in tipracks\n    #     for col in rack.columns() for tip in col[::-1]]\n    #     tip_chunks = [tips_by_col[i:i+8]\n    # for i in range(0, len(tips_by_col), 8)]\n    # else:\n    #     if track_tips:\n    #         with open(file_path) as csv_file:\n    #             tip_chunks = list(new_tip_list)\n    #     else:\n    #         tip_chunks = []\n\n    \"\"\"PROTOCOL BEGINS \"\"\"\n\n    csv_rows = [[val.strip() for val in line.split(',')]\n                for line in csv.splitlines()\n                if line.split(',')[0].strip()][1:]\n\n    \"\"\"FIND INVOLVED WELLS\"\"\"\n    values_from_csv = []\n    wells_from_csv = []\n    for row in csv_rows:\n        well, value = row[:2]\n        value = int(value)\n        values_from_csv.append(value)\n        wells_from_csv.append(well)\n\n    value_chunk_cols = [values_from_csv[i:i+8]\n                        for i in range(0, len(values_from_csv), 8)]\n\n    list_well_tips = []\n\n    \"\"\"CREATE A LIST OF # TIPS FOR EACH WELL\"\"\"\n    start_point = 0\n    tip_count = 0\n    for i, chunk in enumerate(value_chunk_cols):\n        print(chunk)\n        start_point = 0\n\n        for j, value in enumerate(chunk[start_point:]):\n            if value >= 85:\n                for check_values in chunk[j:]:\n                    if check_values >= 85:\n                        tip_count += 1\n                    else:\n                        break\n\n                list_well_tips.append(tip_count)\n                tip_count = 0\n                continue\n\n            else:\n                list_well_tips.append(0)\n\n    print(list_well_tips)\n\n    dict_tips_per_well = {}\n    tip_ctr = 0\n    for j, (well, num_tips) in enumerate(zip(wells_from_csv,\n                                             list_well_tips)):\n        if tip_ctr > 0:\n            tip_ctr -= 1\n            continue\n\n        if num_tips > 0:\n            tip_ctr = num_tips - 1\n            dict_tips_per_well[well] = num_tips\n\n    print('\\n\\n', dict_tips_per_well, '\\n\\n')\n\n    \"\"\"CREATE NESTED LIST OF TIPS WHICH IS MANIPULATED TO MAKE MAP\"\"\"\n    # if not track_tips:\n    tips_by_col = [tip for rack in tipracks\n                   for col in rack.columns() for tip in col[::-1]]\n    tip_chunks = [tips_by_col[i:i+8] for i in range(0, len(tips_by_col), 8)]\n\n    \"\"\"PICKUP FUNCTION\"\"\"\n    def pick_up(num_channels_per_pickup):\n        nonlocal tip_chunks\n        if num_channels_per_pickup > 1:\n            pip = m300\n        else:\n            pip = p300\n        try:\n            col = 0\n            for _ in range(36):\n                if num_channels_per_pickup <= len(tip_chunks[col]):\n                    break\n                else:\n                    col += 1\n\n            pip.pick_up_tip(tip_chunks[col][num_channels_per_pickup-1])\n\n            for _ in range(num_channels_per_pickup):\n                tip_chunks[col].pop(0)\n\n                if len(tip_chunks[col]) == 0:\n                    tip_chunks.remove(tip_chunks[col])\n\n        except IndexError:\n            ctx.pause(\"Replace empty tip racks on slots 4, 5, and 6\")\n            pip.reset_tipracks()\n            tip_chunks = [tips_by_col[i:i+8] for i in range(0,\n                          len(tips_by_col), 8)]\n            col = 0\n            for _ in range(36):\n                if num_channels_per_pickup <= len(tip_chunks[col]):\n                    break\n                else:\n                    col += 1\n\n            pip.pick_up_tip(tip_chunks[col][num_channels_per_pickup-1])\n\n            for _ in range(num_channels_per_pickup):\n                tip_chunks[col].pop(0)\n\n                if len(tip_chunks[col]) == 0:\n                    tip_chunks.remove(tip_chunks[col])\n\n    # DUMP WASTE\n    vol_ctr = 0\n    waste_well = 0\n\n    def check_waste_vol(vol):\n        nonlocal vol_ctr\n        nonlocal waste_well\n        vol_ctr += vol\n        if vol_ctr > 12000:\n            waste_well += 1\n            vol_ctr = 0\n    waste = waste_res.wells()[waste_well]\n    temp_mod.set_temperature(temp_mod_temp)\n\n    ctx.pause(\"\"\"\n    Ensure temperature module is at correct temperature, then,\n    select \"Resume\" on the Opentrons app.\n    \"\"\")\n\n    # REAGENTS\n    pbs = reagents.wells()[0]\n    trypsin = reagents.wells()[1]\n    media = reagents.wells()[-1]\n\n    ctx.comment(\"MOVING INCLUDED WELLS TO WASTE\")\n    for i, well in enumerate(dict_tips_per_well):\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(200, plate_well)\n        pip.dispense(200, waste)\n        check_waste_vol(200)\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.comment(\"\\n\\n\\nMOVING PBS TO PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(150, pbs, rate=pbs_dispense_rate)\n        pip.dispense(150, plate_well.bottom(z=1).move(\n                Point(x=(plate_well.diameter/2-2))))\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.comment(\"\\n\\n\\nREMOVING PBS FROM PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(175, plate_well)\n        pip.dispense(175, waste)\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.comment(\"\\n\\n\\nMOVING TRYPSIN TO PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(25, trypsin)\n        pip.dispense(25, plate_well)\n        pip.blow_out()\n        pip.touch_tip()\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.delay(minutes=incubation_time)\n\n    ctx.comment(\"\\n\\n\\nMOVING MEDIA TO PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(140, media)\n        pip.dispense(140, plate_well)\n        pip.blow_out()\n        pip.touch_tip()\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.comment(\"\\n\\n\\nASPIRATE FIRST MEDIA FROM PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(first_media_x, plate_well)\n        pip.dispense(first_media_x, waste)\n        pip.drop_tip()\n        ctx.comment('\\n')\n\n    ctx.comment(\"\\n\\n\\nDISPENSE SECOND MEDIA TO PLATE\")\n    for i, well in enumerate(dict_tips_per_well):\n\n        num_tips = dict_tips_per_well[well]\n        plate_well = plate.wells_by_name()[well]\n        if num_tips > 1:\n            pip = m300\n        else:\n            pip = p300\n\n        pick_up(num_tips)\n        pip.aspirate(second_media_y, media)\n        pip.dispense(second_media_y, plate_well)\n        pip.drop_tip()\n        ctx.comment('\\n')\n    #\n    # # write updated tipcount to CSV\n    #\n    #\n    # tip_data = {well: well.has_tip for well in tipracks[0].wells()}\n    #\n    # print(tip_data)\n    #\n    #\n    #\n    # new_tip_list = tip_chunks\n    # if not ctx.is_simulating():\n    #     with open(file_path, 'w') as outfile:\n    #         outfile.write(new_tip_list)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Well,Confluency\nA1,95",
            "label": ".csv File",
            "name": "csv",
            "type": "textFile"
        },
        {
            "default": 37,
            "label": "Temperature module temperature (C)",
            "name": "temp_mod_temp",
            "type": "int"
        },
        {
            "default": 1.0,
            "label": "PBS Dispense Flow Rate",
            "name": "pbs_dispense_rate",
            "type": "float"
        },
        {
            "default": 15,
            "label": "Incubation Time (minutes)",
            "name": "incubation_time",
            "type": "int"
        },
        {
            "default": 160,
            "label": "Media Aspirate X (ul)",
            "name": "first_media_x",
            "type": "int"
        },
        {
            "default": 130,
            "label": "Media Dispense Y (ul)",
            "name": "second_media_y",
            "type": "int"
        },
        {
            "label": "Track tips?",
            "name": "track_tips",
            "options": [
                {
                    "label": "Yes",
                    "value": true
                },
                {
                    "label": "False",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Single-Channel Mount",
            "name": "p300_mount",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi-Channel Mount",
            "name": "m300_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 7",
            "share": false,
            "slot": "7",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "10 on Temperature Module GEN2 on 10",
            "share": false,
            "slot": "10",
            "type": "corning_96_wellplate_360ul_flat"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 11",
            "share": false,
            "slot": "11",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protocolName": "Cell Culture Prep with CSV Input",
        "source": "Custom Protocol Request"
    },
    "modules": []
}