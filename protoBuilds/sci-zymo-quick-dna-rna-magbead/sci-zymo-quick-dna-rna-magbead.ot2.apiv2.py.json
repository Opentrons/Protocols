{
    "content": "from opentrons.types import Point\nimport json\nimport os\nimport math\nimport threading\nfrom time import sleep\nfrom opentrons import types\n\nmetadata = {\n    'protocolName': 'Quick-DNA-RNA MagBead',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.4'\n}\n\n\n\"\"\"\nHere is where you can modify the magnetic module engage height:\n\"\"\"\nMAG_HEIGHT = 13.6\n\n\n# Definitions for deck light flashing\nclass CancellationToken:\n    def __init__(self):\n        self.is_continued = False\n\n    def set_true(self):\n        self.is_continued = True\n\n    def set_false(self):\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\n# Start protocol\ndef run(ctx):\n    # Setup for flashing lights notification to empty trash\n    cancellationToken = CancellationToken()\n\n    [num_samples, include_dnase, deepwell_type, res_type, starting_vol,\n     binding_buffer_vol, wash1_vol, wash2_vol, wash3_vol, elution_vol,\n     mix_reps, settling_time, park_tips, tip_track, flash, include_bind,\n     include_wash1, include_wash2, include_wash3, include_wash4, include_wash5,\n     include_wash6, include_dry,\n     include_elute] = get_values(  # noqa: F821\n        'num_samples', 'include_dnase', 'deepwell_type', 'res_type',\n        'starting_vol', 'binding_buffer_vol', 'wash1_vol', 'wash2_vol',\n        'wash3_vol', 'elution_vol', 'mix_reps', 'settling_time', 'park_tips',\n        'tip_track', 'flash', 'include_bind', 'include_wash1', 'include_wash2',\n        'include_wash3', 'include_wash4', 'include_wash5', 'include_wash6',\n        'include_dry', 'include_elute')\n\n    \"\"\"\n    Here is where you can change the locations of your labware and modules\n    (note that this is the recommended configuration)\n    \"\"\"\n    magdeck = ctx.load_module('magdeck', '6')\n    magdeck.disengage()\n    magplate = magdeck.load_labware(deepwell_type, 'deepwell plate')\n    tempdeck = ctx.load_module('Temperature Module Gen2', '1')\n    elutionplate = tempdeck.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '9',\n                             'Liquid Waste').wells()[0].top()\n    res2 = ctx.load_labware(res_type, '3', 'reagent reservoir 2')\n    res1 = ctx.load_labware(res_type, '2', 'reagent reservoir 1')\n    num_cols = math.ceil(num_samples/8)\n    tips300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot,\n                                '200\u00b5l filtertiprack')\n               for slot in ['5', '7', '8', '10', '11']]\n    if park_tips:\n        parkingrack = ctx.load_labware(\n            'opentrons_96_tiprack_300ul', '4', 'tiprack for parking')\n        parking_spots = parkingrack.rows()[0][:num_cols]\n    else:\n        tips300.insert(0, ctx.load_labware('opentrons_96_tiprack_300ul', '4',\n                                           '200\u00b5l filtertiprack'))\n        parking_spots = [None for none in range(12)]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n\n    tip_log = {val: {} for val in ctx.loaded_instruments.values()}\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    binding_buffer = res1.wells()[:2]\n    wash1 = res1.wells()[2:4]\n    wash2 = res1.wells()[4:6]\n    wash3 = res1.wells()[6:8]\n    wash4 = res1.wells()[8:10]\n    wash5 = res1.wells()[10:]\n    dnase1 = [res2.wells()[0]]\n    stopreaction = res2.wells()[1:3]\n    wash6 = res2.wells()[3:5]\n    elution_solution = res2.wells()[-1]\n\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n\n    # magdeck.disengage()  # just in case\n    tempdeck.set_temperature(4)\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    folder_path = '/data/B'\n    tip_file_path = folder_path + '/tip_log.json'\n    # if tip_track and ctx.is_simulating():    # reversed logic for simulation\n    if tip_track and not ctx.is_simulating():\n        if os.path.isfile(tip_file_path):\n            with open(tip_file_path) as json_file:\n                data = json.load(json_file)\n                for pip in tip_log:\n                    if pip.name in data:\n                        tip_log[pip]['count'] = data[pip.name]\n                    else:\n                        tip_log[pip]['count'] = 0\n        else:\n            for pip in tip_log:\n                tip_log[pip]['count'] = 0\n    else:\n        for pip in tip_log:\n            tip_log[pip]['count'] = 0\n\n    for pip in tip_log:\n        if pip.type == 'multi':\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.rows()[0]]\n        else:\n            tip_log[pip]['tips'] = [tip for rack in pip.tip_racks\n                                    for tip in rack.wells()]\n        tip_log[pip]['max'] = len(tip_log[pip]['tips'])\n\n    def _pick_up(pip, loc=None):\n        if tip_log[pip]['count'] == tip_log[pip]['max'] and not loc:\n            ctx.pause('Replace ' + str(pip.max_volume) + '\u00b5l tipracks before \\\nresuming.')\n            pip.reset_tipracks()\n            tip_log[pip]['count'] = 0\n        if loc:\n            pip.pick_up_tip(loc)\n        else:\n            pip.pick_up_tip(tip_log[pip]['tips'][tip_log[pip]['count']])\n            tip_log[pip]['count'] += 1\n\n    switch = True\n    drop_count = 0\n    # number of tips trash will accommodate before prompting user to empty\n    drop_threshold = 120\n\n    def _drop(pip):\n        nonlocal switch\n        nonlocal drop_count\n        side = 30 if switch else -18\n        drop_loc = ctx.loaded_labwares[12].wells()[0].top().move(\n            Point(x=side))\n        pip.drop_tip(drop_loc)\n        switch = not switch\n        if pip.type == 'multi':\n            drop_count += 8\n        else:\n            drop_count += 1\n        if drop_count >= drop_threshold:\n            # Setup for flashing lights notification to empty trash\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            m300.home()\n            ctx.pause('Please empty tips from waste before resuming.')\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n            drop_count = 0\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell.\n\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                if flash:\n                    if not ctx._hw_manager.hardware.is_simulator:\n                        cancellationToken.set_true()\n                    thread = create_thread(ctx, cancellationToken)\n                m300.home()\n                ctx.pause('Please empty liquid waste (slot 11) before \\\nresuming.')\n\n                ctx.home()  # home before continuing with protocol\n                if flash:\n                    # stop light flashing after home\n                    cancellationToken.set_false()\n                    thread.join()\n\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate = 30\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            for _ in range(num_trans):\n                _waste_track(vol_per_trans)\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, m.top())\n                m300.move_to(m.center())\n                m300.transfer(vol_per_trans, loc, waste, new_tip='never',\n                              air_gap=20)\n                m300.blow_out(waste)\n                m300.air_gap(20)\n            _drop(m300)\n        m300.flow_rate.aspirate = 150\n\n    def resuspend_pellet(well, pip, mvol, reps=5):\n        \"\"\"\n        'resuspend_pellet' will forcefully dispense liquid over the pellet.\n\n        after the magdeck engage in order to more thoroughly resuspend the\n        pellet.\n        param well: The current well that the resuspension will occur in.\n        param pip: The pipet that is currently attached/ being used.\n        param mvol: The volume that is transferred before the mixing steps.\n        param reps: The number of mix repetitions that should occur. Note~\n        During each mix rep, there are 2 cycles of aspirating from center,\n        dispensing at the top and 2 cycles of aspirating from center,\n        dispensing at the bottom (5 mixes total)\n        \"\"\"\n        rightLeft = int(str(well).split(' ')[0][1:]) % 2\n        \"\"\"\n        'rightLeft' will determine which value to use in the list of 'top' and\n        'bottom' (below), based on the column of the 'well' used.\n        In the case that an Even column is used, the first value of 'top' and\n        'bottom' will be used, otherwise, the second value of each will be \\\n        used.\n        \"\"\"\n        center = well.bottom().move(types.Point(x=0, y=0, z=0.1))\n        top = [\n            well.bottom().move(types.Point(x=-3.8, y=3.8, z=0.1)),\n            well.bottom().move(types.Point(x=3.8, y=3.8, z=0.1))\n        ]\n        bottom = [\n            well.bottom().move(types.Point(x=-3.8, y=-3.8, z=0.1)),\n            well.bottom().move(types.Point(x=3.8, y=-3.8, z=0.1))\n        ]\n\n        pip.flow_rate.dispense = 500\n        pip.flow_rate.aspirate = 150\n\n        mix_vol = 0.9 * mvol\n\n        pip.move_to(center)\n        for _ in range(reps):\n            for _ in range(2):\n                pip.aspirate(mix_vol, center)\n                pip.dispense(mix_vol, top[rightLeft])\n            for _ in range(2):\n                pip.aspirate(mix_vol, center)\n                pip.dispense(mix_vol, bottom[rightLeft])\n\n    def bind(vol, park=True):\n        \"\"\"\n        `bind` will perform magnetic bead binding on each sample in the.\n\n        deepwell plate. Each channel of binding beads will be mixed before\n        transfer, and the samples will be mixed with the binding beads after\n        the transfer. The magnetic deck activates after the addition to all\n        samples, and the supernatant is removed after bead bining.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n        latest_chan = -1\n        for i, (well, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            num_trans = math.ceil(vol/200)\n            vol_per_trans = vol/num_trans\n            for t in range(num_trans):\n                chan_ind = i//(12//len(binding_buffer))\n                source = binding_buffer[chan_ind]\n                if m300.current_volume > 0:\n                    # void air gap if necessary\n                    m300.dispense(m300.current_volume, source.top())\n                if chan_ind > latest_chan:  # mix if accessing new channel\n                    for _ in range(5):\n                        m300.aspirate(180, source.bottom(0.5))\n                        m300.dispense(180, source.bottom(5))\n                    latest_chan = chan_ind\n                m300.transfer(vol_per_trans, source, well.top(), air_gap=20,\n                              new_tip='never')\n                if t < num_trans - 1:\n                    m300.air_gap(20)\n            # m300.mix(5, 200, well)\n            m300.blow_out(well.top(-2))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n        ctx.pause('mix for 10 minutes off-deck in a heatershaker')\n        magdeck.engage(height=MAG_HEIGHT)\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        # remove initial supernatant\n        remove_supernatant(vol+starting_vol, park=park)\n\n    def wash(vol, source, mix_reps=15, park=True, resuspend=True):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            # currently unused variables side and loc\n            # side = 1 if i % 2 == 0 else -1\n            # loc = m.bottom(0.5).move(Point(x=side*2))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                # m300.mix(mix_reps, 150, loc)\n                resuspend_pellet(m, m300, 180)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage(height=MAG_HEIGHT)\n\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        remove_supernatant(vol, park=park)\n\n    def dnase(vol, source, mix_reps=6, park=True, resuspend=True):\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            # currently unused variables side and loc\n            # side = 1 if i % 2 == 0 else -1\n            # loc = m.bottom(0.5).move(Point(x=side*2))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                # m300.mix(mix_reps, 30, loc)\n                resuspend_pellet(m, m300, 50)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        ctx.pause('Incubating for 10 minutes for DNase 1 treatment with \\\n        occasional mixing.')\n\n    def stop_reaction(vol, source, mix_reps=6, park=True, resuspend=True):\n\n        if resuspend and magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        num_trans = math.ceil(vol/200)\n        vol_per_trans = vol/num_trans\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            # currently unused variables side and loc\n            # side = 1 if i % 2 == 0 else -1\n            # loc = m.bottom(0.5).move(Point(x=side*2))\n            src = source[i//(12//len(source))]\n            for n in range(num_trans):\n                if m300.current_volume > 0:\n                    m300.dispense(m300.current_volume, src.top())\n                m300.transfer(vol_per_trans, src, m.top(), air_gap=20,\n                              new_tip='never')\n                if n < num_trans - 1:  # only air_gap if going back to source\n                    m300.air_gap(20)\n            if resuspend:\n                # m300.mix(mix_reps, 50, loc)\n                resuspend_pellet(m, m300, 180)\n            m300.blow_out(m.top())\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        ctx.pause('Incubating for 10 minutes with occasional mixing for stop \\\n        reaction')\n\n        if magdeck.status == 'disengaged':\n            magdeck.engage(height=MAG_HEIGHT)\n\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        remove_supernatant(vol, park=park)\n\n    def elute(vol, park=True):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the.\n\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            _pick_up(m300)\n            side = 1 if i % 2 == 0 else -1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.aspirate(vol, elution_solution)\n            m300.move_to(m.center())\n            m300.dispense(vol, loc)\n            # m300.mix(mix_reps, 0.8*vol, loc)\n            resuspend_pellet(m, m300, 50)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(20)\n            if park:\n                m300.drop_tip(spot)\n            else:\n                _drop(m300)\n\n        magdeck.engage(height=MAG_HEIGHT)\n        ctx.delay(minutes=settling_time, msg='Incubating on MagDeck for \\\n' + str(settling_time) + ' minutes.')\n\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            if park:\n                _pick_up(m300, spot)\n            else:\n                _pick_up(m300)\n            side = -1 if i % 2 == 0 else 1\n            loc = m.bottom(0.5).move(Point(x=side*2))\n            m300.transfer(vol, loc, e.bottom(5), air_gap=20, new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(20)\n            m300.drop_tip()\n\n    \"\"\"\n    Here is where you can call the methods defined above to fit your specific\n    protocol. The normal sequence is:\n    \"\"\"\n\n    if include_bind:\n        bind(binding_buffer_vol, park=park_tips)\n    if include_wash1:\n        wash(wash1_vol, wash1, park=park_tips)\n    if include_wash2:\n        wash(wash2_vol, wash2, park=park_tips)\n    if include_wash3:\n        wash(wash3_vol, wash3, park=park_tips)\n    if include_wash4:\n        wash(500, wash4, park=park_tips)\n    # dnase1 treatment (for DNA-free RNA prep)\n    if include_dnase:\n        dnase(50, dnase1, park=park_tips)\n        stop_reaction(500, stopreaction, park=park_tips)\n\n    if include_wash5:\n        wash(500, wash5, park=park_tips)\n    if include_wash6:\n        wash(500, wash6, park=park_tips)\n\n    if include_dry:\n        ctx.delay(minutes=10, msg=\"dry beads for 10 minute\")\n    if include_elute:\n        elute(elution_vol, park=park_tips)\n\n    # track final used tip\n    # if tip_track and ctx.is_simulating():    # reversed logic for simulation\n    if tip_track and not ctx.is_simulating():\n        if not os.path.isdir(folder_path):\n            os.mkdir(folder_path)\n        data = {pip.name: tip_log[pip]['count'] for pip in tip_log}\n        with open(tip_file_path, 'w') as outfile:\n            json.dump(data, outfile)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "Number of Samples (up to 96)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "Include DNAseI Step? (yes or no, include only for Prep of DNA-free total RNA)",
            "name": "include_dnase",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Deep Well Plate on Magnetic Module",
            "name": "deepwell_type",
            "options": [
                {
                    "label": "nest_96_wellplate_2ml_deep",
                    "value": "nest_96_wellplate_2ml_deep"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Reagent Reservoirs",
            "name": "res_type",
            "options": [
                {
                    "label": "nest_12_reservoir_15ml",
                    "value": "nest_12_reservoir_15ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 400,
            "label": "Initial Volume (ul per sample)",
            "name": "starting_vol",
            "type": "int"
        },
        {
            "default": 430,
            "label": "Binding Buffer Volume (ul per sample)",
            "name": "binding_buffer_vol",
            "type": "int"
        },
        {
            "default": 500,
            "label": "Wash 1 Volume (ul per sample)",
            "name": "wash1_vol",
            "type": "int"
        },
        {
            "default": 500,
            "label": "Wash 2 Volume (ul per sample)",
            "name": "wash2_vol",
            "type": "int"
        },
        {
            "default": 500,
            "label": "Wash 3 Volume (ul per sample)",
            "name": "wash3_vol",
            "type": "int"
        },
        {
            "default": 50,
            "label": "Elution Volume (ul per sample)",
            "name": "elution_vol",
            "type": "int"
        },
        {
            "default": 15,
            "label": "Number of Mix Repetitions",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 7,
            "label": "Magnet Engagement Time (minutes)",
            "name": "settling_time",
            "type": "int"
        },
        {
            "label": "Park Tips? (yes or no)",
            "name": "park_tips",
            "options": [
                {
                    "label": "NO",
                    "value": false
                },
                {
                    "label": "YES",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Track Tips? (yes or no)",
            "name": "tip_track",
            "options": [
                {
                    "label": "NO",
                    "value": false
                },
                {
                    "label": "YES",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flash Deck Lights when Tip Waste is Full? (yes or no)",
            "name": "flash",
            "options": [
                {
                    "label": "NO",
                    "value": false
                },
                {
                    "label": "YES",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Bead-Binding Step? (yes or no)",
            "name": "include_bind",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 1 Step? (yes or no)",
            "name": "include_wash1",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 2 Step? (yes or no)",
            "name": "include_wash2",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 3 Step? (yes or no)",
            "name": "include_wash3",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 4 Step? (yes or no)",
            "name": "include_wash4",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 5 Step? (yes or no)",
            "name": "include_wash5",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Wash 6 Step? (yes or no)",
            "name": "include_wash6",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Air Dry Beads Step? (yes or no)",
            "name": "include_dry",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Elution Step? (yes or no)",
            "name": "include_elute",
            "options": [
                {
                    "label": "YES",
                    "value": true
                },
                {
                    "label": "NO",
                    "value": false
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "reagent reservoir 1 on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "reagent reservoir 2 on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "deepwell plate on Magnetic Module GEN1 on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "200\u00b5l filtertiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Liquid Waste on 9",
            "share": false,
            "slot": "9",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.4",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Quick-DNA-RNA MagBead"
    },
    "modules": []
}