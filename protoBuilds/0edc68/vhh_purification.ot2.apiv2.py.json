{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'VHH Purification Protocol',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    # modules\n    hs = ctx.load_module('heaterShakerModuleV1', '1')\n    tempdeck = ctx.load_module('temperature module gen2', '7')\n    magdeck = ctx.load_module('magnetic module gen2', '10')\n    magdeck.disengage()\n\n    # labware\n    hs_plate = hs.load_labware(\n        'opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep')\n    temp_block = tempdeck.load_labware(\n        'opentrons_24_aluminumblock_generic_2ml_screwcap')\n    mag_plate = magdeck.load_labware(\n        'opentrons_96_aluminumblock_nest_wellplate_100ul')\n    res = ctx.load_labware('nest_12_reservoir_15ml', '3')\n    tipracks200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n        for slot in ['5', '6']]\n\n    # pipettes\n    p300 = ctx.load_instrument('p300_single_gen2', 'left',\n                               tip_racks=tipracks200)\n\n    # initial positions\n    vhh_lib_cultures = hs_plate.wells()[0]\n    buffer_w = res.rows()[0][0]\n    terrific_broth = res.rows()[0][2]\n    magstrep_beads = temp_block.rows()[0][5:3:-1]\n    bsa_biotin = temp_block.wells_by_name()['B6']\n    samv_g1 = temp_block.wells_by_name()['C6']\n    mag_height = 8.0\n\n    tempdeck.set_temperature(10)\n    hs.close_labware_latch()\n\n    p300.flow_rate.aspirate = 50\n    p300.flow_rate.dispense = 300\n\n    def slow_withdraw(pip, well, delay_seconds=2):\n        ctx.delay(seconds=delay_seconds)\n        ctx.max_speeds['A'] = 25\n        ctx.max_speeds['Z'] = 25\n        pip.move_to(well.top())\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n\n    def separate(minutes=2.0):\n        magdeck.engage(height=mag_height)\n        ctx.delay(minutes=minutes)\n\n    def remove_supernatant(vol, sources, dest, z_dest=1.5):\n        p300.flow_rate.aspirate = 10\n        p300.flow_rate.dispense = 50\n        p300.pick_up_tip()\n        for s in sources:\n            p300.aspirate(vol, s.bottom(1.4))\n            p300.dispense(vol, dest.bottom(z_dest))\n            p300.blow_out(dest.bottom(z_dest))\n            slow_withdraw(p300, dest)\n        p300.drop_tip()\n\n    bead_dests = [\n        well\n        for col in mag_plate.columns()[:4]\n        for well in col[:3]]\n    p300.pick_up_tip()\n    last_source = None\n    for i, d in enumerate(bead_dests):\n        source = magstrep_beads[i//math.ceil(len(bead_dests)/2)]\n        if source != last_source:\n            p300.mix(10, 100, source)\n            last_source = source\n        p300.aspirate(100, source)\n        p300.dispense(100, d)\n        slow_withdraw(p300, d)\n    p300.drop_tip()\n\n    separate()\n\n    supernatant_dest = temp_block.wells_by_name()['A4']\n    remove_supernatant(100, bead_dests, supernatant_dest)\n\n    magdeck.disengage()\n\n    for _ in range(2):\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 50\n\n        p300.pick_up_tip()\n        p300.distribute(90, vhh_lib_cultures,\n                        [d.bottom(13) for d in bead_dests], disposal_vol=20,\n                        new_tip='never')\n        p300.flow_rate.dispense = 300\n        for d in bead_dests:\n            p300.mix(10, 50, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n        p300.drop_tip()\n\n        separate()\n\n        supernatant_dest = res.rows()[0][-1]\n        remove_supernatant(90, bead_dests, supernatant_dest, z_dest=23)\n\n        magdeck.disengage()\n\n    bsa_biotin_dests = [\n        well for col in mag_plate.columns()[:3:2]\n        for well in col[:3]]\n    g1_dests = [\n        well for col in mag_plate.columns()[1:4:2]\n        for well in col[:3]]\n\n    for source, dests in zip([bsa_biotin, samv_g1],\n                             [bsa_biotin_dests, g1_dests]):\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 50\n\n        p300.pick_up_tip()\n        for i, d in enumerate(dests):\n            if i == 0:\n                p300.mix(10, 100, source.bottom(1))\n            p300.aspirate(70, source.bottom(1))\n            p300.dispense(70, d.bottom(13))\n            p300.blow_out(d.bottom(13))\n            slow_withdraw(p300, d)\n\n        p300.flow_rate.aspirate = 300\n        for d in dests:\n            p300.mix(10, 50, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n        p300.drop_tip()\n\n    for _ in range(2):\n        ctx.delay(minutes=10,\n                  msg='Allow binding of biotin-BSA to MagStrep beads.')\n\n        for dests in [bsa_biotin_dests, g1_dests]:\n            p300.pick_up_tip()\n            p300.flow_rate.aspirate = 300\n            for d in dests:\n                p300.mix(10, 50, d.bottom(1.5))\n                p300.blow_out(d.bottom(1.5))\n                slow_withdraw(p300, d)\n            p300.drop_tip()\n\n    ctx.delay(minutes=10,\n              msg='Allow binding of biotin-BSA to MagStrep beads.')\n\n    separate()\n\n    remove_supernatant(60, bsa_biotin_dests, temp_block.wells_by_name()['B4'])\n    remove_supernatant(60, g1_dests, temp_block.wells_by_name()['C4'])\n\n    magdeck.disengage()\n\n    def wash(vol=100):\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 50\n\n        p300.pick_up_tip()\n        for d in bead_dests:\n            p300.aspirate(vol, buffer_w.bottom(1))\n            slow_withdraw(p300, buffer_w)\n            p300.dispense(vol, d.bottom(13))\n            p300.blow_out(d.bottom(13))\n\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 300\n\n        for dests in [bsa_biotin_dests, g1_dests]:\n            if not p300.has_tip:\n                p300.pick_up_tip()\n            for d in dests:\n                p300.mix(10, 50, d.bottom(1.5))\n                p300.blow_out(d.bottom(1.5))\n                slow_withdraw(p300, d)\n            p300.drop_tip()\n\n        separate()\n\n        remove_supernatant(100, bsa_biotin_dests, res.rows()[0][-1], z_dest=23)\n        remove_supernatant(100, g1_dests, res.rows()[0][-1], z_dest=23)\n\n    for _ in range(2):\n        wash()\n\n    magdeck.disengage()\n\n    p300.flow_rate.aspirate = 50\n    p300.flow_rate.dispense = 50\n\n    p300.pick_up_tip()\n    for d in bead_dests:\n        p300.aspirate(100, buffer_w.bottom(1))\n        slow_withdraw(p300, buffer_w)\n        p300.dispense(100, d.bottom(13))\n        p300.blow_out(d.bottom(13))\n    p300.drop_tip()\n\n    for vhh_set in range(2):\n        bead_columns = [\n            col[:3] for col in mag_plate.columns()[vhh_set*2:(vhh_set+1)*2]]\n\n        bead_col = bead_columns[0]\n        separate()\n        remove_supernatant(100, bead_col, res.rows()[0][10], z_dest=23)\n        magdeck.disengage()\n\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 300\n        for d in bead_col:\n            p300.pick_up_tip()\n            p300.mix(10, 100, vhh_lib_cultures.bottom(1))\n            p300.aspirate(100, vhh_lib_cultures.bottom(1))\n            slow_withdraw(p300, vhh_lib_cultures)\n            p300.dispense(100, d.bottom(1.5))\n            p300.mix(10, 100, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n            p300.drop_tip()\n\n        for _ in range(2):\n            ctx.delay(minutes=10,\n                      msg='Binding of VHH to BSA Magbeads for \\n    negative selection round 1.')\n            for d in bead_col:\n                p300.pick_up_tip()\n                p300.mix(10, 100, d.bottom(1.5))\n                p300.blow_out(d.bottom(1.5))\n                slow_withdraw(p300, d)\n                p300.drop_tip()\n\n        ctx.delay(minutes=10, msg='Binding of VHH to BSA Magbeads for \\n    negative selection round 1.')\n\n        separate()\n        remove_supernatant(100, bead_columns[1], res.rows()[0][10], z_dest=23)\n\n        for s, d in zip(bead_col, bead_columns[1]):\n            p300.pick_up_tip()\n            p300.aspirate(100, s.bottom(1.4))\n            slow_withdraw(p300, s)\n            p300.dispense(100, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n            p300.drop_tip()\n\n        magdeck.disengage()\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 300\n        for d in bead_columns[1]:\n            p300.pick_up_tip()\n            p300.mix(10, 100, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n            p300.drop_tip()\n\n        for _ in range(2):\n            ctx.delay(minutes=10)\n            for d in bead_columns[1]:\n                p300.pick_up_tip()\n                p300.mix(10, 100, d.bottom(1.5))\n                p300.blow_out(d.bottom(1.5))\n                slow_withdraw(p300, d)\n                p300.drop_tip()\n\n        ctx.delay(minutes=10)\n\n        separate()\n\n        p300.flow_rate.aspirate = 10\n        p300.flow_rate.dispense = 50\n        for d in bead_columns[1]:\n            p300.pick_up_tip()\n            p300.aspirate(100, d.bottom(1.4))\n            slow_withdraw(p300, d)\n            p300.dispense(100, temp_block.wells()[0].bottom(1.5))\n            p300.blow_out(temp_block.wells()[0].bottom(1.5))\n            slow_withdraw(p300, temp_block.wells()[0])\n            p300.drop_tip()\n\n        magdeck.disengage()\n\n        for dest in temp_block.rows()[0][1:3]:\n            p300.flow_rate.aspirate = 50\n            p300.flow_rate.dispense = 300\n\n            for d in bead_columns[1]:\n                p300.pick_up_tip()\n                p300.aspirate(100, buffer_w.bottom(1))\n                slow_withdraw(p300, buffer_w)\n                p300.dispense(100, d.bottom(1.5))\n                p300.mix(10, 100, d.bottom(1.5))\n                p300.blow_out(d.bottom(1.5))\n                p300.drop_tip()\n\n            separate()\n\n            remove_supernatant(100, bead_col, dest, z_dest=1.5)\n\n        magdeck.disengage()\n\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 50\n        p300.pick_up_tip()\n        for d in bead_columns[1]:\n            p300.aspirate(100, buffer_w.bottom(1))\n            slow_withdraw(p300, buffer_w)\n            p300.dispense(100, d.bottom(13))\n            p300.blow_out(d.bottom(13))\n        p300.drop_tip()\n\n        tb_dests = hs_plate.rows()[0][1:4]\n        p300.pick_up_tip()\n        num_trans = math.ceil(500/p300.tip_racks[0].wells()[0].max_volume)\n        vol_per_trans = round(500/num_trans)\n        for d in tb_dests:\n            for _ in range(num_trans):\n                p300.aspirate(vol_per_trans, terrific_broth.bottom(1))\n                slow_withdraw(p300, terrific_broth)\n                p300.dispense(vol_per_trans, d.bottom(1))\n                p300.blow_out(d.bottom(1))\n                slow_withdraw(p300, d)\n        p300.drop_tip()\n\n        hs.set_and_wait_for_temperature(37)\n        ctx.delay(minutes=10, msg='Pause to allow TB to heat up.')\n\n        p300.flow_rate.aspirate = 50\n        p300.flow_rate.dispense = 300\n        for s, d in zip(bead_columns[1], tb_dests):\n            p300.pick_up_tip()\n            p300.mix(10, 100, s.bottom(1))\n            p300.aspirate(100, s.bottom(1))\n            p300.dispense(100, d.bottom(1.5))\n            p300.blow_out(d.bottom(1.5))\n            slow_withdraw(p300, d)\n            p300.drop_tip()\n\n        p300.home()\n        hs.set_and_wait_for_shake_speed(694)\n        ctx.delay(minutes=120)\n        if vhh_set == 0:\n            hs.deactivate_shaker()\n",
    "custom_labware_defs": [],
    "fields": [],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Deep Well Adapter with NEST Deep Well Plate 2 mL Plate on Heater-Shaker Module GEN1 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_deep_well_adapter_nest_wellplate_2ml_deep"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with Generic 2 mL Screwcap on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_24_aluminumblock_generic_2ml_screwcap"
        },
        {
            "name": "Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on Magnetic Module GEN2 on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "VHH Purification Protocol",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "HeaterShakerContext at Heater-Shaker Module GEN1 on 1 lw Heater Shaker Plate on Heater-Shaker Module GEN1 on 1",
            "share": false,
            "slot": "1",
            "type": "heatershaker"
        },
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 7 lw Opentrons 24 Well Aluminum Block with Generic 2 mL Screwcap on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "tempdeck"
        },
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 10 lw Opentrons 96 Well Aluminum Block with NEST Well Plate 100 \u00b5L on Magnetic Module GEN2 on 10",
            "share": false,
            "slot": "10",
            "type": "magdeck"
        }
    ]
}