{
    "content": "import math\nfrom datetime import datetime\nimport csv\n\n\nmetadata = {\n    'protocolName': '''Custom Normalization''',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    # get parameter values from json above\n    [uploaded_csv] = get_values(  # noqa: F821\n      'uploaded_csv')\n\n    ctx.set_rail_lights(True)\n    ctx.delay(seconds=10)\n\n    csvrows = [line for line in csv.DictReader(uploaded_csv.splitlines())]\n\n    sample_count = len(csvrows)\n\n    if not 1 <= sample_count <= 96:\n        raise Exception('Number of samples must be 1-96.')\n\n    for sample in csvrows:\n        if not 30 <= float(sample['volume_target (ul)']) <= 100:\n            raise Exception('Target volume must be 30-100 uL')\n        if not 5 <= float(sample['dna_conc_target (ng/ul)']) <= 40:\n            raise Exception('Target concentration must be 5-40 ng/uL')\n\n        # convert data type\n        for key in [\n         'dna_conc_initial (ng/ul)',\n         'dna_conc_target (ng/ul)',\n         'volume_target (ul)']:\n            sample[key] = float(sample[key])\n\n        # add calculated fields\n        sample['fold dilution'] = sample[\n         'dna_conc_initial (ng/ul)'] / sample['dna_conc_target (ng/ul)']\n\n        sample['sample_transfer (ul)'] = sample[\n         'volume_target (ul)']*(1/sample['fold dilution'])\n\n        sample['water_transfer (ul)'] = sample[\n         'volume_target (ul)'] - sample['sample_transfer (ul)']\n\n        sample['processed'] = 'no'\n\n    # filter tips, p20 single, p300 single\n    tips20 = [\n     ctx.load_labware(\"opentrons_96_filtertiprack_20ul\", str(\n      slot)) for slot in [7]]\n    tips300 = [\n     ctx.load_labware(\"opentrons_96_filtertiprack_200ul\", str(\n      slot)) for slot in [10]]\n    p20s = ctx.load_instrument(\n        \"p20_single_gen2\", 'left', tip_racks=tips20)\n    p300s = ctx.load_instrument(\n        \"p300_single_gen2\", 'right', tip_racks=tips300)\n\n    # source tube for water\n    tentuberack = ctx.load_labware(\n     'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n     '1', '10-Tube Rack with Water Source Tube')\n    [water] = [tentuberack.wells_by_name()[well] for well in ['A4']]\n    water.liq_vol = 40000  # initial volume 40 mL\n\n    output_plate = ctx.load_labware(\n     'redefinedbiorad_96_wellplate_200ul', '5', 'ouput plate')\n\n    intermediate_plate = ctx.load_labware(\n     'redefinedbiorad_96_wellplate_200ul', '8', 'intermediate plate')\n\n    reservoir = ctx.load_labware(\n     'agilent_1_reservoir_290ml', '9', 'bleach reservoir')\n\n    input_plate = ctx.load_labware(\n     'nest_96_wellplate_2ml_deep', '11', 'input plate')\n\n    # return liquid height in a well\n    def liq_height(well, effective_diameter=None):\n        if well.diameter:\n            if effective_diameter:\n                radius = effective_diameter / 2\n            else:\n                radius = well.diameter / 2\n            csa = math.pi*(radius**2)\n        else:\n            csa = well.length*well.width\n        return well.liq_vol / csa\n\n    # apply speed limit to departing tip\n    def slow_tip_withdrawal(pipette, well_location, to_center=False):\n        if pipette.mount == 'right':\n            axis = 'A'\n        else:\n            axis = 'Z'\n        ctx.max_speeds[axis] = 10\n        if to_center is False:\n            pipette.move_to(well_location.top())\n        else:\n            pipette.move_to(well_location.center())\n        ctx.max_speeds[axis] = None\n\n    ctx.comment(\n     \"\\n***\\nSTEP 1 - water to output plate\\n***\\n\")\n\n    p20s.pick_up_tip()\n    p300s.pick_up_tip()\n\n    for index, sample, well in zip(\n     [*range(sample_count)], csvrows, input_plate.wells()[:sample_count]):\n\n        # skip and log samples that are too dilute\n        if sample['sample_transfer (ul)'] > 30:\n\n            sample['intermediate_dilution'] = 0\n            sample['processed'] = 0\n            ctx.comment(\"\\n***\\nSample {0} in well {1} skipped\\n***\\n\".format(\n             sample['sample_id'], well.well_name))\n            continue\n\n        # prepare 10-fold intermediate dilution if sample too concentrated\n        elif sample['sample_transfer (ul)'] < 2:\n\n            sample['intermediate_dilution'] = 1\n            sample['processed'] = 1\n            ctx.comment(\n             \"\"\"\\n***\\nProcessing sample {0} in well {1}\n             by intermediate dilution\\n***\\n\"\"\".format(\n              sample['sample_id'], well.well_name))\n\n        # otherwise transfer calculated vol of water and sample to output plate\n        else:\n\n            sample['intermediate_dilution'] = 0\n            sample['processed'] = 1\n            ctx.comment(\n             \"\\n***\\nProcessing sample {0} in well {1}\\n***\\n\".format(\n              sample['sample_id'], well.well_name))\n\n        # transfer less water when an intermediate dilution is required\n        vol_water = sample[\n         'water_transfer (ul)'] if not sample['intermediate_dilution'] else (\n         sample['water_transfer (ul)'] - (9*sample['sample_transfer (ul)']))\n\n        pipette = p20s if vol_water <= 20 else p300s\n\n        water.liq_vol -= vol_water\n\n        # tip height about 3 mm below surface of water\n        ht = liq_height(water) - 3 if liq_height(water) - 3 > 1 else 1\n\n        pipette.aspirate(vol_water, water.bottom(ht))\n        ctx.delay(seconds=0.5)\n        pipette.dispense(vol_water, output_plate.wells()[index].bottom(1))\n        ctx.delay(seconds=0.5)\n\n    p20s.return_tip()\n    p20s.reset_tipracks()\n\n    p300s.return_tip()\n    p300s.reset_tipracks()\n\n    ctx.comment(\n     \"\"\"\\n***\\nSTEP 2 - sample to output plates\n     (with intermediate dilution as needed)\\n***\\n\"\"\")\n\n    for index, sample, well in zip(\n     [*range(sample_count)], csvrows, input_plate.wells()[:sample_count]):\n\n        if sample['processed']:\n\n            vol_asp = 2 if sample[\n             'intermediate_dilution'] else sample['sample_transfer (ul)']\n\n            pipette = p20s if vol_asp <= 20 else p300s\n\n            pipette.pick_up_tip()\n\n            # if intermediate dilution - transfer 18 uL water\n            if sample['intermediate_dilution']:\n\n                water.liq_vol -= 18\n\n                ht = liq_height(water) - 3 if liq_height(water) - 3 > 1 else 1\n\n                pipette.aspirate(18, water.bottom(ht))\n                ctx.delay(seconds=0.5)\n\n                pipette.dispense(\n                 18, intermediate_plate.wells()[index].bottom(1))\n                ctx.delay(seconds=0.5)\n\n            pipette.aspirate(vol_asp, well.bottom(1), rate=0.5)\n            ctx.delay(seconds=0.5)\n            slow_tip_withdrawal(pipette, well, to_center=True)\n\n            if not sample['intermediate_dilution']:\n\n                pipette.dispense(\n                 vol_asp, output_plate.wells()[index].bottom(1), rate=0.5)\n                ctx.delay(seconds=0.5)\n                slow_tip_withdrawal(pipette, output_plate.wells()[index])\n\n            else:\n\n                pipette.dispense(\n                 vol_asp, intermediate_plate.wells()[index].bottom(1),\n                 rate=0.5)\n                ctx.delay(seconds=0.5)\n                pipette.mix(\n                 10, 16, intermediate_plate.wells()[index].bottom(1))\n                pipette.aspirate(\n                 10*sample['sample_transfer (ul)'],\n                 intermediate_plate.wells()[index].bottom(1))\n                ctx.delay(seconds=0.5)\n                slow_tip_withdrawal(pipette, intermediate_plate.wells()[index])\n\n                pipette.dispense(\n                 10*sample['sample_transfer (ul)'],\n                 output_plate.wells()[index].bottom(1), rate=0.5)\n                ctx.delay(seconds=0.5)\n                slow_tip_withdrawal(pipette, output_plate.wells()[index])\n\n            # rinse tip in 10 percent diluted bleach\n            v = 20 if pipette == p20s else 200\n\n            pipette.aspirate(v, reservoir.wells()[0].bottom(10))\n            pipette.dispense(v, reservoir.wells()[0].bottom(10))\n\n            pipette.drop_tip()\n\n    \"\"\"\n    write output to jupyter notebook directory on OT-2 raspberry pi\n    for file download via web browser [OT-2 IP address]:48888\n    \"\"\"\n\n    # unique filename to avoid accidental over writing\n    current = datetime.now()\n    file = 'var/lib/jupyter/notebooks/outputfile{}.csv'.format(\n     str(current.microsecond))\n\n    if not ctx.is_simulating():\n        with open(file, 'w', newline='') as outfile:\n            writer = csv.DictWriter(outfile, fieldnames=csvrows[0].keys())\n            writer.writeheader()\n            for row in csvrows:\n                writer.writerow(row)\n\n    ctx.comment(\"\"\"\\n***\\nfinished - use the Opentrons app (click jupyter link)\n    to locate and download the output csv file\\n***\\n\"\"\")\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "plate_id,sample_id,dna_conc_initial (ng/ul),dna_conc_target (ng/ul),volume_target (ul)\nplate27892,7185604408,108,10,60\nplate27892,9750144631,295,10,60\nplate27892,3790752256,295,10,60\nplate27892,9588428342,137,10,60\nplate27892,3723128892,255,10,60\nplate27892,7743392265,119,10,60\nplate27892,9668258027,276,10,60\nplate27892,1569982498,233,10,60\nplate27892,3574098701,246,10,60\nplate27892,4089968293,131,10,60\nplate27892,2487241086,40,10,60\nplate27892,2745770898,120,10,60\nplate27892,8389777766,199,10,60\nplate27892,4741658348,192,10,60\nplate27892,3244638904,286,10,60\nplate27892,6283700988,203,10,60\nplate27892,3290923967,298,10,60\nplate27892,9780289527,172,10,60\nplate27892,5597674122,109,10,60\nplate27892,3327030237,144,10,60\nplate27892,8496126534,31,10,60\nplate27892,1923343045,13,10,60\nplate27892,8783787756,221,10,60\nplate27892,2898120120,146,10,60\nplate27892,6435115632,48,10,60\nplate27892,3370001428,275,10,60\nplate27892,4992198642,92,10,60\nplate27892,2944348242,186,10,60\nplate27892,7882050911,38,10,60\nplate27892,3611734736,201,10,60\nplate27892,9865455914,158,10,60\nplate27892,4620010038,20,10,60\nplate27892,7183602544,285,10,60\nplate27892,6930063632,287,10,60\nplate27892,6276737848,247,10,60\nplate27892,9649015260,56,10,60\nplate27892,4535420402,217,10,60\nplate27892,2301840384,72,10,60\nplate27892,3914376634,98,10,60\nplate27892,2426457941,286,10,60\nplate27892,6895714555,220,10,60\nplate27892,9613132195,215,10,60\nplate27892,4404161573,217,10,60\nplate27892,8657633588,127,10,60\nplate27892,2461662472,73,10,60\nplate27892,8855796573,210,10,60\nplate27892,1960475171,120,10,60\nplate27892,4336695088,298,10,60\nplate27892,1738447446,73,10,60\nplate27892,7872907507,195,10,60\nplate27892,2521270805,233,10,60\nplate27892,3092131849,133,10,60\nplate27892,9176081193,229,10,60\nplate27892,1658682972,250,10,60\nplate27892,4850485269,190,10,60\nplate27892,1753274537,80,10,60\nplate27892,5516184871,266,10,60\nplate27892,8870916344,209,10,60\nplate27892,3272051480,47,10,60\nplate27892,9975727056,253,10,60\nplate27892,2574187066,220,10,60\nplate27892,1284045125,113,10,60\nplate27892,5631692835,269,10,60\nplate27892,8840050478,54,10,60\nplate27892,8281616825,296,10,60\nplate27892,6798112173,237,10,60\nplate27892,2680938424,5,10,60\nplate27892,2822502627,91,10,60\nplate27892,5090124255,179,10,60\nplate27892,2785229541,250,10,60\nplate27892,3006263184,175,10,60\nplate27892,4614191324,19,10,60\nplate27892,8518360869,249,10,60\nplate27892,3049706508,277,10,60\nplate27892,7181534169,161,10,60\nplate27892,6010873340,296,10,60\nplate27892,9201790759,162,10,60\nplate27892,7099220050,291,10,60\nplate27892,3127823297,193,10,60\nplate27892,7829909107,240,10,60\nplate27892,7799790804,269,10,60\nplate27892,7775551963,9,10,60\nplate27892,9928855709,195,10,60\nplate27892,4645927298,68,10,60\nplate27892,2485113063,50,10,60\nplate27892,9048221415,181,10,60\nplate27892,2322795958,166,10,60\nplate27892,9793960255,183,10,60\nplate27892,1286043434,189,10,60\nplate27892,3803505881,8,10,60\nplate27892,7185778098,18,10,60\nplate27892,4218603163,209,10,60\nplate27892,2840792884,43,10,60\nplate27892,8768349906,293,10,60\nplate27892,9894040552,114,10,60\nplate27892,6898003009,4,10,60\n",
            "label": "Upload CSV Input File (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "uploaded_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "10-Tube Rack with Water Source Tube on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical"
        },
        {
            "name": "ouput plate on 5",
            "share": false,
            "slot": "5",
            "type": "redefinedbiorad_96_wellplate_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "intermediate plate on 8",
            "share": false,
            "slot": "8",
            "type": "redefinedbiorad_96_wellplate_200ul"
        },
        {
            "name": "bleach reservoir on 9",
            "share": false,
            "slot": "9",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "input plate on 11",
            "share": false,
            "slot": "11",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "protocolName": "Custom Normalization"
    },
    "modules": []
}