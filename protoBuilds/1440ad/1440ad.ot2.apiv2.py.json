{
    "content": "from opentrons.types import Point\nfrom opentrons import protocol_api\n\nmetadata = {\n    'protocolName': 'Extraction with Mag-Bind TotalPure NGS kit',\n    'author': 'Rami Farawi <rami.farawi@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.9'\n}\n\n\ndef run(ctx):\n\n    [num_samp, num_mag_beads_tubes, mag_bead_mix_resuspend_vol,\n     mag_bead_mix_resuspend_reps, rr1, rr2, rr3, tr1, tr2, tr3, tr4, tr5,\n        tr6, tr7, tr8, tr9, tr10,\n        p20_mount, p300_mount] = get_values(  # noqa: F821\n        'num_samp', 'num_mag_beads_tubes', 'mag_bead_mix_resuspend_vol',\n        'mag_bead_mix_resuspend_reps',\n        'rr1', 'rr2', 'rr3', 'tr1',\n        'tr2', 'tr3', 'tr4', 'tr5',\n        'tr6', 'tr7', 'tr8', 'tr9', 'tr10', 'p20_mount', 'p300_mount')\n\n    if not 1 <= num_samp <= 24:\n        raise Exception(\"Enter a sample number between 1-24\")\n\n    # load labware\n    mag_mod = ctx.load_module('magnetic module gen2', '1')\n    mag_plate = mag_mod.load_labware('nest_96_wellplate_2ml_deep', 'MAG PLATE')\n\n    temp_mod_samp = ctx.load_module('temperature module gen2', '3')\n    samples = temp_mod_samp.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', 'SAMPLES')\n\n    temp_mod_reagent = ctx.load_module('temperature module gen2', '6')\n    cool_reagents = temp_mod_reagent.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', 'COOL REAGENTS')\n\n    hot_reagents = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '2',\n        'HOT REAGENTS')\n    waste_res = ctx.load_labware('nest_1_reservoir_195ml', '9')\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '5')\n\n    tiprack300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot)\n                  for slot in ['8', '11']]\n    tiprack20 = [ctx.load_labware('opentrons_96_tiprack_20ul', slot)\n                 for slot in ['7', '10']]\n    final_rack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '4',\n        'FINAL RACK')\n\n    # load p300ette\n    p20 = ctx.load_instrument('p20_single_gen2', p20_mount,\n                              tip_racks=tiprack20)\n    p300 = ctx.load_instrument('p300_single_gen2', p300_mount,\n                               tip_racks=tiprack300)\n\n    def pick_up300():\n        try:\n            p300.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace all 300ul tip racks. Empty trash if needed.\")\n            p300.reset_tipracks()\n            p300.pick_up_tip()\n\n    # load reagents\n    temp_mod_samp.set_temperature(37)\n    temp_mod_reagent.set_temperature(4)\n    ethanol = reservoir.wells()[0]\n    water = reservoir.wells()[1]\n    waste = waste_res.wells()[0]\n\n    room_temp_reag = hot_reagents.wells()[:3]\n    room_temp_reag_vols = [rr1, rr2, rr3]\n\n    cool_reag = cool_reagents.wells()[:6]\n    cool_reag_vols = [tr1, tr2, tr3, tr4, tr5, tr6]\n\n    cool_reag_visc = cool_reagents.wells()[6:9]\n    cool_reag_visc_vols = [tr7, tr8, tr9]\n\n    cool_reag_visc_post = cool_reagents.wells()[9]\n    cool_reag_visc_post_vol = tr10\n\n    # add cold reagents\n    ctx.comment('\\n\\n Add Room Temp Reagents \\n\\n')\n    for reagent, reagent_vol in zip(room_temp_reag, room_temp_reag_vols):\n        p20.pick_up_tip()\n        for dest in samples.wells()[:num_samp]:\n            p20.aspirate(reagent_vol, reagent)\n            p20.dispense(reagent_vol, dest.top(z=-3))\n            p20.blow_out()\n        p20.drop_tip()\n    ctx.comment('\\n\\n\\n')\n\n    # add room temp non viscous reagents\n    ctx.comment('\\n\\n Add Cool Temp Non Viscous Reagents \\n\\n')\n    for reagent, reagent_vol in zip(cool_reag, cool_reag_vols):\n        p20.pick_up_tip()\n        for dest in samples.wells()[:num_samp]:\n            p20.aspirate(reagent_vol, reagent)\n            p20.dispense(reagent_vol, dest.top(z=-3))\n            p20.blow_out()\n        p20.drop_tip()\n    ctx.comment('\\n\\n\\n')\n\n    # add room temp viscous reagents\n    ctx.comment('\\n\\n Add Cool Temp Viscous Reagents \\n\\n')\n    p20.flow_rate.aspirate = 3.78\n    p20.flow_rate.dispense = 3.78\n    for reagent, reagent_vol in zip(cool_reag_visc,\n                                    cool_reag_visc_vols):\n        for dest in samples.wells()[:num_samp]:\n            p20.pick_up_tip()\n            p20.aspirate(reagent_vol, reagent)\n            ctx.delay(seconds=1)\n            p20.dispense(reagent_vol, dest)\n            p20.blow_out()\n            p20.touch_tip()\n            p20.drop_tip()\n    p20.flow_rate.aspirate = 7.56\n    p20.flow_rate.dispense = 7.56\n\n    # mix every 30 minutes for two hours\n    ctx.comment('\\n\\n Mix Every 30 Minutes for Two Hours \\n\\n')\n    for _ in range(4):\n        for sample in samples.wells()[:num_samp]:\n            pick_up300()\n            p300.mix(10, 50, sample)\n            p300.drop_tip()\n        ctx.delay(minutes=30)\n        ctx.comment('\\n')\n\n    # add final viscous reagent\n    ctx.comment('\\n\\n Add Final Viscous Reagent \\n\\n')\n    p20.flow_rate.aspirate = 3.78\n    p20.flow_rate.dispense = 3.78\n    for dest in samples.wells()[:num_samp]:\n        p20.pick_up_tip()\n        p20.aspirate(cool_reag_visc_post_vol, cool_reag_visc_post)\n        ctx.delay(seconds=1)\n        p20.dispense(reagent_vol, dest)\n        p20.blow_out()\n        p20.touch_tip()\n        p20.drop_tip()\n    p20.flow_rate.aspirate = 7.56\n    p20.flow_rate.dispense = 7.56\n\n    # transfer samples to mag plate\n    ctx.comment('\\n\\n Transfer Samples to Mag Plate \\n\\n')\n    for s, d in zip(samples.wells()[:num_samp], mag_plate.wells()):\n        pick_up300()\n        p300.mix(10, 100, s)\n        p300.aspirate(105, s)\n        p300.dispense(105, d)\n        p300.drop_tip()\n\n    # add magbeads\n    ctx.comment('\\n\\n Adding MagBeads \\n\\n')\n    mag_bead_tubes = hot_reagents.columns()[5][:num_mag_beads_tubes]\n    for mag_beads, sample in zip(mag_bead_tubes*num_samp,\n                                 mag_plate.wells()[:num_samp]):\n        pick_up300()\n        p300.mix(mag_bead_mix_resuspend_reps,\n                 mag_bead_mix_resuspend_vol,\n                 mag_beads)\n        p300.aspirate(100, mag_beads)\n        p300.dispense(100, sample)\n        p300.mix(10, 50, sample)\n        p300.blow_out()\n        p300.touch_tip()\n        p300.drop_tip()\n\n    ctx.comment('\\n\\n Apply Magnet \\n\\n')\n    ctx.delay(minutes=5)\n    mag_mod.engage()\n    ctx.delay(minutes=5)\n\n    ctx.comment('\\n\\n Removing Supernatant \\n\\n')\n    for i, sample in enumerate(mag_plate.wells()[:num_samp]):\n        side = -1 if i % 2 == 0 else 1\n        asp_loc = sample.bottom().move(\n                    Point(x=(sample.length/2-1.5)*side))\n        pick_up300()\n        p300.move_to(sample.center())\n        p300.aspirate(205, asp_loc)\n        p300.dispense(205, waste)\n        p300.drop_tip()\n    mag_mod.disengage()\n\n    ctx.comment('\\n\\n Two Washes \\n\\n')\n    for _ in range(2):\n        for i, sample in enumerate(mag_plate.wells()[:num_samp]):\n            pick_up300()\n            p300.aspirate(200, ethanol)\n            p300.dispense(200, sample)\n            p300.mix(10, 50, sample)\n            p300.drop_tip()\n        ctx.delay(minutes=1)\n        mag_mod.engage()\n        ctx.delay(minutes=5)\n        for i, sample in enumerate(mag_plate.wells()[:num_samp]):\n            side = -1 if i % 2 == 0 else 1\n            asp_loc = sample.bottom().move(\n                        Point(x=(sample.length/2-1.5)*side))\n            pick_up300()\n            p300.aspirate(200, asp_loc)\n            p300.dispense(200, waste)\n            p300.drop_tip()\n        mag_mod.disengage()\n        ctx.comment('\\n')\n    ctx.delay(minutes=15)\n\n    ctx.comment('\\n\\n Adding Water \\n\\n')\n    for sample in mag_plate.wells()[:num_samp]:\n        pick_up300()\n        p300.aspirate(200, water)\n        p300.dispense(200, sample)\n        p300.mix(20, 50, sample)\n        p300.drop_tip()\n\n    ctx.delay(minutes=5)\n    mag_mod.engage()\n    ctx.delay(minutes=5)\n    for i, (s, d) in enumerate(zip(mag_plate.wells()[:num_samp],\n                                   final_rack.wells())):\n        side = -1 if i % 2 == 0 else 1\n        asp_loc = s.bottom().move(\n                    Point(x=(s.length/2-1.5)*side))\n        pick_up300()\n        p300.aspirate(200, asp_loc)\n        p300.dispense(200, d)\n        p300.drop_tip()\n    mag_mod.disengage()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 24,
            "label": "Number of Samples (1-24)",
            "name": "num_samp",
            "type": "int"
        },
        {
            "default": 2,
            "label": "Number of Mag Bead Tubes",
            "name": "num_mag_beads_tubes",
            "type": "int"
        },
        {
            "default": 100,
            "label": "Mag Bead Resuspend Volume",
            "name": "mag_bead_mix_resuspend_vol",
            "type": "int"
        },
        {
            "default": 5,
            "label": "Mag Bead Resuspend Mix Repetions",
            "name": "mag_bead_mix_resuspend_reps",
            "type": "int"
        },
        {
            "default": 14.6,
            "label": "RR1 Volume",
            "name": "rr1",
            "type": "float"
        },
        {
            "default": 10,
            "label": "RR2 Volume",
            "name": "rr2",
            "type": "float"
        },
        {
            "default": 7.9,
            "label": "RR3 Volume",
            "name": "rr3",
            "type": "float"
        },
        {
            "default": 7.5,
            "label": "TR1 Volume",
            "name": "tr1",
            "type": "float"
        },
        {
            "default": 7.5,
            "label": "TR2 Volume",
            "name": "tr2",
            "type": "float"
        },
        {
            "default": 7.5,
            "label": "TR3 Volume",
            "name": "tr3",
            "type": "float"
        },
        {
            "default": 7.5,
            "label": "TR4 Volume",
            "name": "tr4",
            "type": "float"
        },
        {
            "default": 5,
            "label": "TR5 Volume",
            "name": "tr5",
            "type": "float"
        },
        {
            "default": 20,
            "label": "TR6 Volume",
            "name": "tr6",
            "type": "float"
        },
        {
            "default": 2.5,
            "label": "TR7 Volume",
            "name": "tr7",
            "type": "float"
        },
        {
            "default": 5,
            "label": "TR8 Volume",
            "name": "tr8",
            "type": "float"
        },
        {
            "default": 5,
            "label": "TR9 Volume",
            "name": "tr9",
            "type": "float"
        },
        {
            "default": 5,
            "label": "TR10 Volume",
            "name": "tr10",
            "type": "float"
        },
        {
            "label": "P20 Single Channel Pipette Mount",
            "name": "p20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Single Channel Pipette Mount",
            "name": "p300_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "MAG PLATE on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "HOT REAGENTS on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "SAMPLES on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "FINAL RACK on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "COOL REAGENTS on Temperature Module GEN2 on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "NEST 1 Well Reservoir 195 mL on 9",
            "share": false,
            "slot": "9",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Rami Farawi <rami.farawi@opentrons.com>",
        "protocolName": "Extraction with Mag-Bind TotalPure NGS kit",
        "source": "Custom Protocol Request"
    },
    "modules": []
}