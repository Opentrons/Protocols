{
    "content": "from opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': 'Omega Mag-Bind\u00ae Total RNA 96 Kit',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.11'\n}\n\nTEST_MODE = False\n\n\n# Start protocol\ndef run(ctx):\n\n    num_samples = 64\n    mixreps = 20\n    vol_mix = 220\n    z_offset = 3.0\n    radial_offset_fraction = 0.8  # fraction of radius\n    starting_vol = 410\n    binding_buffer_vol = 320\n    vhb_vol = 400\n    rna_wash1_vol = 400\n    rna_wash2_vol = 300\n    elution1_vol = 100\n    dnase_vol = 52\n    phm_vol = 150\n    elution2_vol = 70\n    settling_time = 3  # minutes\n\n    ctx.max_speeds['X'] = 200\n    ctx.max_speeds['Y'] = 200\n\n    magdeck = ctx.load_module('magnetic module gen2', '6')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep',\n                                    'deepwell plate')\n    tempdeck = ctx.load_module('Temperature Module Gen2', '1')\n    elutionplate = tempdeck.load_labware(\n                'opentrons_96_aluminumblock_nest_wellplate_100ul',\n                'elution plate')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '9',\n                             'Liquid Waste').wells()[0].top()\n    res1 = ctx.load_labware('nest_12_reservoir_15ml', '2',\n                            'reagent reservoir 1')\n    res2 = ctx.load_labware('nest_12_reservoir_15ml', '3',\n                            'reagent reservoir 2')\n    tips300 = [ctx.load_labware('opentrons_96_tiprack_300ul', slot,\n                                '300\u00b5l tiprack')\n               for slot in ['4', '5', '7', '8', '10', '11']]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    binding_buffer = res1.wells()[:2]\n    elution_solution = res1.wells()[11:]\n    vhb = res1.wells()[3:5]\n    rna_wash = [res2.wells()[s:f] for s, f in [[0, 2], [2, 4], [4, 6]]]\n    dnase = res1.wells()[6:7]\n    phm = res1.wells()[8:9]\n\n    num_cols = math.ceil(num_samples/8)\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    elution_samples_m = elutionplate.rows()[0][:num_cols]\n    all_tips = [well for rack in tips300 for well in rack.rows()[0]]\n    parking_sets = [all_tips[i*num_cols:(i+1)*num_cols] for i in range(9)]\n    radius = mag_samples_m[0].width\n\n    magdeck.disengage()  # just in case\n    tempdeck.set_temperature(4)\n\n    m300.flow_rate.aspirate = 50\n    m300.flow_rate.dispense = 150\n    m300.flow_rate.blow_out = 300\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, parking_spots, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                ctx.pause('Please empty liquid waste before resuming.')\n                waste_vol = 0\n            waste_vol += vol\n\n        m300.flow_rate.aspirate /= 5\n        for m, spot in zip(mag_samples_m, parking_spots):\n            m300.pick_up_tip(spot)\n            _waste_track(vol)\n            num_trans = math.ceil(vol/200)\n            vol_per_trans = vol/num_trans\n            for _ in range(num_trans):\n                m300.transfer(vol_per_trans, m.bottom(0.8), waste,\n                              new_tip='never')\n                m300.blow_out(waste)\n            m300.air_gap(5)\n            m300.drop_tip(spot)\n        m300.flow_rate.aspirate *= 5\n\n    def resuspend(location, reps=mixreps, vol=vol_mix, method='mix',\n                  samples=mag_samples_m):\n\n        if method == 'shake':\n            pass\n        elif 'mix' in method:\n            m300.flow_rate.aspirate *= 4\n            m300.flow_rate.dispense *= 4\n            side = 1 if samples.index(location) % 2 == 0 else -1\n            bead_loc = location.bottom().move(\n                Point(x=side*radius*radial_offset_fraction, z=z_offset))\n            m300.move_to(location.center())\n            for _ in range(reps):\n                m300.aspirate(vol, bead_loc)\n                m300.dispense(vol, bead_loc)\n            m300.flow_rate.aspirate /= 4\n            m300.flow_rate.dispense /= 4\n\n    def bind(vol, parking_spots):\n        \"\"\"\n        `bind` will perform magnetic bead binding on each sample in the\n        deepwell plate. Each channel of binding beads will be mixed before\n        transfer, and the samples will be mixed with the binding beads after\n        the transfer. The magnetic deck activates after the addition to all\n        samples, and the supernatant is removed after bead bining.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n        latest_chan = -1\n        chan_ind = 0\n        vol_track = 0\n        max_vol_per_chan = 0.95*res1.wells()[0].max_volume\n        for i, (well, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            m300.pick_up_tip(spot)\n            if vol_track + 8*vol > max_vol_per_chan:\n                chan_ind += 1\n                vol_track = 0\n            vol_track += 8*vol\n            source = binding_buffer[chan_ind]\n            if chan_ind != latest_chan:  # mix if accessing new channel\n                for _ in range(3):\n                    m300.aspirate(220, source.bottom(0.5))\n                    m300.dispense(220, source.bottom(5))\n                latest_chan = chan_ind\n            m300.transfer(vol, source, well.top(), new_tip='never')\n            m300.mix(mixreps, vol_mix, well.bottom(2))\n            m300.air_gap(20)\n            m300.drop_tip(spot)\n\n        magdeck.engage()\n        ctx.delay(minutes=settling_time, msg=f'Incubating on MagDeck for \\\n{settling_time} minutes.')\n\n        # remove initial supernatant\n        remove_supernatant(vol+starting_vol, parking_spots)\n\n    def wash(vol, source, parking_spots, remove=True,\n             resuspend_method='mix', supernatant_volume=None,\n             samples=mag_samples_m, shake_time=5, resuspend_vol=None):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        if magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        cols_per_source_chan = math.ceil(8/len(source))\n        if source == vhb:\n            num_trans = math.ceil(vol/180)\n            air_gap_vol = 20\n        else:\n            num_trans = math.ceil(vol/200)\n            air_gap_vol = None\n        vol_per_trans = vol/num_trans\n        for i, (well, spot) in enumerate(zip(samples, parking_spots)):\n            m300.pick_up_tip(spot)\n            src = source[i//cols_per_source_chan]\n            for n in range(num_trans):\n                m300.dispense(m300.current_volume, src.top())\n                m300.aspirate(vol_per_trans, src)\n                if source == vhb:\n                    ctx.max_speeds['Z'] = 20\n                    ctx.max_speeds['A'] = 20\n                m300.move_to(src.top())\n                if source == vhb:\n                    ctx.delay(seconds=2)\n                    ctx.max_speeds['Z'] = None\n                    ctx.max_speeds['A'] = None\n                if air_gap_vol:\n                    m300.aspirate(air_gap_vol, src.top())\n                m300.dispense(m300.current_volume, well.top())\n                if n < num_trans - 1:\n                    m300.aspirate(10, well.top())\n            resus_vol = resuspend_vol if resuspend_vol else vol_mix\n            resuspend(well, mixreps, resus_vol, method=resuspend_method,\n                      samples=samples)\n            m300.blow_out(well.top())\n            m300.air_gap(5)\n            m300.drop_tip(spot)\n\n        if remove:\n            if magdeck.status == 'disengaged':\n                magdeck.engage()\n\n            ctx.delay(minutes=settling_time, msg=f'Incubating on MagDeck for \\\n{settling_time} minutes.')\n\n            removal_vol = supernatant_volume if supernatant_volume else vol\n            remove_supernatant(removal_vol, parking_spots)\n\n    def elute(vol, parking_spots):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        # resuspend beads in elution\n        if magdeck.status == 'enagaged':\n            magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            m300.pick_up_tip(spot)\n            m300.aspirate(vol, elution_solution[0])\n            m300.move_to(m.center())\n            resuspend(m, 10, 40)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(5)\n            m300.drop_tip(spot)\n\n        ctx.delay(minutes=2, msg='Incubating off MagDeck for 2 minutes.')\n\n        magdeck.engage()\n        ctx.delay(minutes=settling_time, msg=f'Incubating on MagDeck for \\\n{settling_time} minutes.')\n\n        m300.flow_rate.aspirate /= 5\n        for i, (m, e, spot) in enumerate(\n                zip(mag_samples_m, elution_samples_m, parking_spots)):\n            m300.pick_up_tip(spot)\n            m300.transfer(vol-5, m.bottom(1.2), e.bottom(5), air_gap=20,\n                          new_tip='never')\n            m300.blow_out(e.top(-2))\n            m300.air_gap(5)\n            m300.drop_tip(spot)\n\n    \"\"\"\n    Here is where you can call the methods defined above to fit your specific\n    protocol. The normal sequence is:\n    \"\"\"\n    bind(binding_buffer_vol, parking_spots=parking_sets[0])\n    wash(vhb_vol, vhb, parking_spots=parking_sets[1])\n    wash(rna_wash1_vol, rna_wash[0], parking_spots=parking_sets[2])\n    if not TEST_MODE:\n        ctx.delay(minutes=5)\n    wash(elution1_vol, elution_solution, parking_spots=parking_sets[3],\n         remove=False)\n    wash(dnase_vol, dnase, parking_spots=parking_sets[4], remove=False)\n    if not TEST_MODE:\n        ctx.delay(minutes=10)\n    wash(phm_vol, phm, parking_spots=parking_sets[5], remove=False)\n    if not TEST_MODE:\n        ctx.delay(minutes=1)\n    wash(rna_wash2_vol, rna_wash[1], parking_spots=parking_sets[6])\n    ctx.delay(minutes=settling_time, msg=f'Incubating on MagDeck for \\\n{settling_time} minutes.')\n    remove_supernatant(parking_spots=parking_sets[6], vol=600)\n    wash(rna_wash1_vol, rna_wash[2], parking_spots=parking_sets[7])\n    elute(elution2_vol, parking_spots=parking_sets[8])\n",
    "custom_labware_defs": [],
    "fields": [],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "elution plate on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "reagent reservoir 1 on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "reagent reservoir 2 on 3",
            "share": false,
            "slot": "3",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "300\u00b5l tiprack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "300\u00b5l tiprack on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "deepwell plate on Magnetic Module GEN2 on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "300\u00b5l tiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "300\u00b5l tiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Liquid Waste on 9",
            "share": false,
            "slot": "9",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "300\u00b5l tiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "300\u00b5l tiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "Omega Mag-Bind\u00ae Total RNA 96 Kit"
    },
    "modules": []
}