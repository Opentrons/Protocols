{
    "content": "from opentrons.types import Point\n\nmetadata = {\n    'protocolName': 'PCR',\n    'author': 'Nick Diehl <ndiehl@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    [worklist, do_deactivate_tc, mount_m300,\n     mount_p20] = get_values(  # noqa: F821\n        'worklist', 'do_deactivate_tc', 'mount_m300', 'mount_p20')\n\n    mix_reps_oligo = 5\n    mix_vol_oligo = 5.0\n    vol_pcr_reagent = 30.0\n    mix_reps_pcr_reagent = 5\n    mix_vol_pcr_reagent = 20.0\n\n    # modules and labware\n    tc = ctx.load_module('thermocycler')\n    tc_plate = tc.load_labware('biorad_96_wellplate_200ul_pcr', 'pcr plate')\n    tipracks200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '1')]\n    oligo_plates = [\n        ctx.load_labware('biorad_96_wellplate_200ul_pcr', slot,\n                         f'oligo source plate {i+1}')\n        for i, slot in enumerate(['5', '2'])]\n    reagent_plate = ctx.load_labware('biorad_96_wellplate_200ul_pcr', '4',\n                                     'reagent plate')\n    tipracks20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', slot)\n        for slot in ['9', '6']]\n\n    # pipettes\n    m300 = ctx.load_instrument('p300_multi_gen2', mount_m300,\n                               tip_racks=tipracks200)\n    p20 = ctx.load_instrument('p20_single_gen2', mount_p20,\n                              tip_racks=tipracks20)\n\n    # parse\n    data = [\n        [val.strip() for val in line.split(',')]\n        for line in worklist.splitlines()[1:]\n        if line and line.split(',')[0].strip()]\n\n    # reagents\n    oligo_volumes = [float(line[3]) for line in data]\n    oligo_sources = [\n        oligo_plates[0].wells_by_name()[line[1]]\n        for line in data]\n    oligo_dests = [\n        tc_plate.wells_by_name()[line[2]]\n        for line in data]\n\n    pcr_reagent = reagent_plate.rows()[0][0]\n\n    def wick(well, pip, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*well.diameter/2*0.8, z=3)))\n\n    def slow_withdraw(well, pip):\n        ctx.max_speeds['A'] = 25\n        ctx.max_speeds['Z'] = 25\n        pip.move_to(well.top())\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n\n    # oligo transfer and mixing\n    for vol, source, dest in zip(oligo_volumes, oligo_sources, oligo_dests):\n        p20.pick_up_tip()\n        p20.aspirate(vol, source)\n        wick(source, p20)\n        slow_withdraw(source, p20)\n        p20.dispense(vol, dest)\n        p20.mix(mix_reps_oligo, mix_vol_oligo, dest)\n        wick(dest, p20)\n        slow_withdraw(dest, p20)\n        p20.drop_tip()\n\n    # PCR reagent addition\n    pcr_reagent_dests = []\n    for well in oligo_dests:\n        col_reference = tc_plate.columns()[tc_plate.wells().index(well)//8][0]\n        if col_reference not in pcr_reagent_dests:\n            pcr_reagent_dests.append(col_reference)\n\n    tc.open_lid()\n    tc.set_lid_temperature(105)\n    for dest in pcr_reagent_dests:\n        m300.pick_up_tip()\n        m300.aspirate(vol_pcr_reagent, pcr_reagent)\n        slow_withdraw(pcr_reagent, m300)\n        m300.dispense(vol_pcr_reagent, dest)\n        m300.mix(mix_reps_pcr_reagent, mix_vol_pcr_reagent, dest)\n        slow_withdraw(dest, m300)\n        m300.drop_tip()\n    tc.close_lid()\n\n    \"\"\" PCR \"\"\"\n    profile_denaturation = [\n        {'temperature': 98, 'hold_time_seconds': 20},\n        {'temperature': 60, 'hold_time_seconds': 20},\n        {'temperature': 72, 'hold_time_seconds': 30}]\n\n    # denaturation\n    tc.set_block_temperature(98, hold_time_seconds=30)\n    tc.execute_profile(steps=profile_denaturation, repetitions=30)\n\n    # extension\n    tc.set_block_temperature(72, hold_time_seconds=120)\n    tc.set_block_temperature(4)\n    tc.open_lid()\n\n    if do_deactivate_tc:\n        tc.deactivate_lid()\n        tc.deactivate_block()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Pipettor,Slot 5 well (Oligo source plate),Slot 10 well (Destination plate),Volume uL\nP20 single channel,A6,A1,10\nP20 single channel,C1,A1,10\nP20 single channel,A1,B1,10\nP20 single channel,A7,B1,2.5\nP20 single channel,A8,B1,2.5\nP20 single channel,A9,B1,2.5\nP20 single channel,A10,B1,2.5\nP20 single channel,B4,C1,10\nP20 single channel,A2,C1,2.5\nP20 single channel,A3,C1,2.5\nP20 single channel,A4,C1,2.5\nP20 single channel,A5,C1,2.5\nP20 single channel,A11,D1,10\nP20 single channel,B5,D1,2.5\nP20 single channel,B6,D1,2.5\nP20 single channel,B7,D1,2.5\nP20 single channel,B8,D1,2.5\nP20 single channel,C2,E1,10\nP20 single channel,A12,E1,2.5\nP20 single channel,B1,E1,2.5\nP20 single channel,B2,E1,2.5\nP20 single channel,B3,E1,2.5",
            "label": "worklist input",
            "name": "worklist",
            "type": "textFile"
        },
        {
            "label": "deactivate Thermocycler following protocol",
            "name": "do_deactivate_tc",
            "options": [
                {
                    "label": "yes",
                    "value": true
                },
                {
                    "label": "no",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 8-channel GEN2 pipette mount",
            "name": "mount_m300",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P20 single-channel GEN2 pipette mount",
            "name": "mount_p20",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "oligo source plate 2 on 2",
            "share": false,
            "slot": "2",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "reagent plate on 4",
            "share": false,
            "slot": "4",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "oligo source plate 1 on 5",
            "share": false,
            "slot": "5",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "pcr plate on Thermocycler Module on 7",
            "share": false,
            "slot": "7",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Nick Diehl <ndiehl@opentrons.com>",
        "protocolName": "PCR",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "ThermocyclerContext at Thermocycler Module on 7 lw pcr plate on Thermocycler Module on 7",
            "share": false,
            "slot": "7",
            "type": "thermocycler"
        }
    ]
}