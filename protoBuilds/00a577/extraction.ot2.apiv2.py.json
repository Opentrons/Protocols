{
    "content": "from opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': 'MP Biomedicals magGENic Plant DNA Kit: Nucleic Acid \\\nPurification',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.12'\n}\n\nTEST_MODE_BEADS = False\nTEST_MODE_BIND_INCUBATE = False\nTEST_MODE_AIRDRY = False\n\n\ndef run(ctx):\n\n    [num_samples] = get_values(  # noqa: F821\n        'num_samples')\n\n    if TEST_MODE_BEADS:\n        mixreps = 1\n    else:\n        mixreps = 15\n    vol_mix = 180.0\n    z_offset = 3.0\n    radial_offset_fraction = 0.4  # fraction of radius\n    vol_starting = 500.0\n    vol_dmbb = 500.0\n    vol_wash = 1000.0\n    vol_elution = 50.0\n    vol_final_elution = 50.0\n    engage_height = 7.6\n    time_settling_minutes = 5.0\n    time_airdry_minutes = 4.0\n\n    ctx.max_speeds['X'] = 200\n    ctx.max_speeds['Y'] = 200\n\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('nest_96_wellplate_2ml_deep',\n                                    'NEST deepwell plate')\n    elution_rack = ctx.load_labware(\n                'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '1',\n                'elution 1.5ml tuberack')\n    waste = ctx.load_labware('nest_1_reservoir_195ml', '5',\n                             'Liquid Waste').wells()[0].top()\n    res1 = ctx.load_labware('nest_12_reservoir_15ml', '2',\n                            'reagent reservoir')\n    tips300 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                         '200\u00b5l filtertiprack')\n        for slot in [\n                '3', '6', '8', '9', '10', '11'][:math.ceil(num_samples/16)]]\n\n    # load P300M pipette\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', 'left', tip_racks=tips300)\n    p300 = ctx.load_instrument('p300_single_gen2', 'right', tip_racks=tips300)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    dmbb = res1.wells()[:1]\n    dwb = [res1.wells()[i*2+1:(i+1)*2+1] for i in range(2)]\n    elution_buffer = res1.wells()[5]\n\n    num_cols = math.ceil(num_samples/8)\n    mag_samples_m = magplate.rows()[0][:num_cols]\n    mag_samples_s = magplate.wells()[:num_samples]\n    elution_samples_s = elution_rack.wells()[:num_samples]\n    all_tips_m300 = [well for rack in tips300 for well in rack.rows()[0]]\n    parking_sets_m300 = []\n    for i in range(4):\n        if (i+1)*num_cols <= len(all_tips_m300):\n            set = all_tips_m300[i*num_cols:(i+1)*num_cols]\n        else:\n            set = all_tips_m300[\n                (i*num_cols) % len(all_tips_m300):\n                (i+1)*num_cols % len(all_tips_m300)]\n        parking_sets_m300.append(set)\n    if mag_samples_m[0].width:\n        radius = mag_samples_m[0].width/2\n    else:\n        radius = mag_samples_m[0].diameter/2\n\n    magdeck.disengage()  # just in case\n\n    single_tip_list = tips300[-1].wells()[::-1]\n\n    def pick_up_single():\n        for tip in single_tip_list:\n            if tip.has_tip:\n                m300.pick_up_tip(tip)\n                return\n\n    last_index = 0\n\n    def check_set(set):\n        nonlocal last_index\n        new_index = all_tips_m300.index(set[0])\n        if new_index < last_index:\n            ctx.pause('Please refill tipracks before resuming.')\n        last_index = new_index\n\n    waste_vol = 0\n    waste_threshold = 185000\n\n    def remove_supernatant(vol, parking_spots, park=False):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                ctx.pause('Please empty liquid waste before resuming.')\n                waste_vol = 0\n            waste_vol += vol\n\n        check_set(parking_spots)\n\n        m300.flow_rate.aspirate /= 5\n        for m, spot in zip(mag_samples_m, parking_spots):\n            m300.pick_up_tip(spot)\n            _waste_track(vol)\n            num_trans = math.ceil(vol/200)\n            vol_per_trans = vol/num_trans\n            for _ in range(num_trans):\n                m300.dispense(m300.current_volume, m.top())\n                m300.transfer(vol_per_trans, m.bottom(0.8), waste,\n                              new_tip='never')\n                ctx.delay(seconds=2)\n                # m300.blow_out(waste)\n                m300.air_gap(5)\n            m300.drop_tip()\n        m300.flow_rate.aspirate *= 5\n\n    def resuspend(location, reps=mixreps, vol=vol_mix, method='mix',\n                  samples=mag_samples_m, x_mix_fraction=radial_offset_fraction,\n                  z_mix=z_offset, dispense_height_rel=8):\n\n        if method == 'shake':\n            pass\n        elif 'mix' in method:\n            m300.flow_rate.aspirate *= 4\n            m300.flow_rate.dispense *= 4\n            side_x = 1 if samples.index(location) % 2 == 0 else -1\n            m300.move_to(location.center())\n            for r_ind in range(reps):\n                side_y = 1 if r_ind % 2 == 0 else -1\n                bead_loc = location.bottom().move(\n                    Point(x=side_x*radius*radial_offset_fraction,\n                          y=side_y*radius*radial_offset_fraction,\n                          z=z_mix))\n                m300.aspirate(vol, bead_loc)\n                m300.dispense(vol, bead_loc.move(Point(z=dispense_height_rel)))\n            m300.flow_rate.aspirate /= 4\n            m300.flow_rate.dispense /= 4\n\n    def wash(vol, source, parking_spots, remove=True,\n             resuspend_method='mix', supernatant_volume=None,\n             samples=mag_samples_m, shake_time=5, incubation_time=None,\n             resuspend_vol=None, mix_before=False,\n             aspiration_location: Point = None):\n        \"\"\"\n        `wash` will perform bead washing for the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from each\n                            source and dispense to each well containing beads.\n        :param source (List[Well]): A list of wells from where liquid will be\n                                    aspirated. If the length of the source list\n                                    > 1, `wash` automatically calculates\n                                    the index of the source that should be\n                                    accessed.\n        :param mix_reps (int): The number of repititions to mix the beads with\n                               specified wash buffer (ignored if resuspend is\n                               False).\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding wash buffer and removing\n                               supernatant.\n        :param resuspend (boolean): Whether to resuspend beads in wash buffer.\n        \"\"\"\n\n        check_set(parking_spots)\n\n        if magdeck.status == 'engaged':\n            magdeck.disengage()\n\n        latest_chan_ind = -1\n        cols_per_source_chan = math.ceil(12/len(source))\n        num_trans = math.ceil(vol/200)\n        air_gap_vol = None\n        vol_per_trans = vol/num_trans\n        for i, (well, spot) in enumerate(zip(samples, parking_spots)):\n            m300.pick_up_tip(spot)\n            chan_ind = i//cols_per_source_chan\n            src = source[chan_ind]\n            if aspiration_location:\n                src_asp_loc = src.bottom().move(aspiration_location)\n            else:\n                src_asp_loc = src.bottom(0.5)\n\n            # mix if accessing new channel of beads\n            if mix_before and chan_ind != latest_chan_ind:\n                m300.flow_rate.aspirate *= 4\n                m300.flow_rate.dispense *= 4\n                for _ in range(5):\n                    m300.aspirate(200, src_asp_loc)\n                    m300.dispense(200, src.bottom(5))\n                latest_chan_ind = chan_ind\n                m300.flow_rate.aspirate /= 4\n                m300.flow_rate.dispense /= 4\n\n            for n in range(num_trans):\n                m300.dispense(m300.current_volume, src.top())\n                m300.aspirate(vol_per_trans, src_asp_loc)\n                m300.move_to(src.top())\n                if air_gap_vol:\n                    m300.aspirate(air_gap_vol, src.top())\n                m300.dispense(m300.current_volume, well.top())\n                ctx.delay(seconds=2)\n                # m300.blow_out(well.top())\n                if n < num_trans - 1:\n                    m300.aspirate(10, well.top())\n            resus_vol = resuspend_vol if resuspend_vol else vol_mix\n            resuspend(well, mixreps, resus_vol, method=resuspend_method,\n                      samples=samples)\n            m300.move_to(well.top())\n            ctx.delay(seconds=2)\n            m300.air_gap(5)\n            m300.drop_tip(spot)\n\n        if incubation_time and not TEST_MODE_BIND_INCUBATE:\n            ctx.delay(minutes=incubation_time, msg=f'Incubating off MagDeck \\\nfor {incubation_time} minutes.')\n\n        if remove:\n            if magdeck.status == 'disengaged':\n                magdeck.engage(engage_height)\n\n            if not TEST_MODE_BEADS:\n                ctx.delay(minutes=time_settling_minutes, msg=f'Incubating on \\\nMagDeck for {time_settling_minutes} minutes.')\n\n            removal_vol = supernatant_volume if supernatant_volume else vol\n            remove_supernatant(removal_vol, parking_spots)\n\n    def elute(vol, parking_spots):\n        \"\"\"\n        `elute` will perform elution from the deepwell extraciton plate to the\n        final clean elutions PCR plate to complete the extraction protocol.\n        :param vol (float): The amount of volume to aspirate from the elution\n                            buffer source and dispense to each well containing\n                            beads.\n        :param park (boolean): Whether to save sample-corresponding tips\n                               between adding elution buffer and transferring\n                               supernatant to the final clean elutions PCR\n                               plate.\n        \"\"\"\n\n        check_set(parking_spots)\n\n        # resuspend beads in elution\n        magdeck.disengage()\n        for i, (m, spot) in enumerate(zip(mag_samples_m, parking_spots)):\n            m300.pick_up_tip(spot)\n            m300.aspirate(vol, elution_buffer)\n            m300.dispense(vol, m.bottom(1))\n            resuspend(m, mixreps, 40, x_mix_fraction=0.2, z_mix=1.0,\n                      dispense_height_rel=0)\n            m300.blow_out(m.bottom(5))\n            m300.air_gap(5)\n            m300.drop_tip()\n\n        if not TEST_MODE_BIND_INCUBATE:\n            ctx.delay(minutes=3, msg='Incubating off MagDeck for 3 minutes.')\n\n        magdeck.engage(engage_height)\n\n        if not TEST_MODE_BEADS:\n            ctx.delay(minutes=time_settling_minutes, msg=f'Incubating on \\\nMagDeck for {time_settling_minutes} minutes.')\n\n        p300.flow_rate.aspirate /= 5\n        for i, (m, e) in enumerate(\n                zip(mag_samples_s, elution_samples_s)):\n            # side = -1 if (magplate.wells().index(m) % 8) % 2 == 0 else 1\n            p300.pick_up_tip(spot)\n            p300.aspirate(vol_final_elution, m.bottom(0.8))\n            p300.dispense(vol_final_elution, e.bottom(5))\n            p300.move_to(e.bottom().move(Point(x=e.diameter/2*0.8, z=7)))\n            p300.blow_out(e.top(-2))\n            p300.air_gap(5)\n            p300.drop_tip(spot)\n        p300.flow_rate.aspirate *= 5\n\n    # initial plating if < 24 samples\n    if num_samples <= 24:\n        source_rack = ctx.load_labware(\n            'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap', '7',\n            'source tuberack')\n        source_tubes = source_rack.wells()[:num_samples]\n        for source, dest in zip(source_tubes, mag_samples_s):\n            pick_up_single()\n            m300.transfer(500, source.bottom(2), dest, new_tip='never')\n            m300.drop_tip()\n\n    wash(500, dmbb, parking_spots=parking_sets_m300[0],\n         mix_before=True, supernatant_volume=vol_starting+vol_dmbb,\n         incubation_time=5.0)\n    for dwb_set, parking_set in zip(dwb, parking_sets_m300[1:3]):\n        wash(vol_wash, dwb_set, parking_spots=parking_set)\n    if not TEST_MODE_AIRDRY:\n        ctx.delay(minutes=time_airdry_minutes, msg=f'Air drying for \\\n{time_airdry_minutes} minutes before final elution.')\n    elute(vol_elution, parking_spots=parking_sets_m300[3])\n\n    magdeck.disengage()\n    ctx.comment('Protocol complete.')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples (1-24)",
            "name": "num_samples",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "elution 1.5ml tuberack on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "reagent reservoir on 2",
            "share": false,
            "slot": "2",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "NEST deepwell plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Liquid Waste on 5",
            "share": false,
            "slot": "5",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "200\u00b5l filtertiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "MP Biomedicals magGENic Plant DNA Kit: Nucleic Acid Purification"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 4 lw NEST deepwell plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        }
    ]
}