{
    "content": "import math\nfrom datetime import datetime\n\nmetadata = {\n    'protocolName': 'STANDARD MP',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.8'\n}\n\n\ndef run(ctx):\n\n    [input_csv, test_method, vol_aliquot, vol_mobile_phase, vol_tests,\n     qc_height, std_height, air_gap_bool] = get_values(  # noqa: F821\n        'input_csv', 'test_method', 'vol_aliqout', 'vol_mobile_phase',\n        'vol_tests', 'qc_height', 'std_height', 'air_gap_bool')\n\n    class tube():\n\n        def __init__(self, tube, height=0, min_height=5, comp_coeff=1.15):\n            self.tube = tube\n            self.radius = tube.geometry._diameter/2\n            self.height = height\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n\n        def height_dec(self, vol):\n            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff\n            if self.height - dh > self.min_height:\n                self.height = self.height - dh\n            else:\n                self.height = self.min_height\n            return(self.tube.bottom(self.height))\n\n        def height_inc(self, vol):\n            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff\n            if self.height + dh < self.tube.geometry._depth:\n                self.height = self.height + dh\n            else:\n                self.height = self.tube.geometry._depth\n            return(self.tube.bottom(self.height + 20))\n\n    # load labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1',\n                             'TEST PLATE 2ML 96 WELL STANDARD, QC, AND IS')\n    tuberack15 = ctx.load_labware('opentrons_15_tuberack_nest_15ml_conical',\n                                  '2', 'WS AND QC SOLUTIONS')\n    tuberack15_50 = ctx.load_labware(\n        'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical', '3',\n        'DILUENT AND MOBILE PHASE')\n\n    ws_1_4 = [\n        ctx.load_labware('opentrons_24_tuberack_nest_1.5ml_snapcap', slot,\n                         'WS ' + '1-4' + ' ' + let)\n        for slot, let in zip(['7', '8'], 'AB')]\n    ws_5_8 = [\n        ctx.load_labware('opentrons_24_tuberack_nest_1.5ml_snapcap',\n                         slot, 'WS ' + '5-8' + ' ' + let)\n        for slot, let in zip(['4', '5'], 'AB')]\n    qc = [\n        ctx.load_labware('opentrons_24_tuberack_nest_1.5ml_snapcap',\n                         slot, 'QC ' + let)\n        for slot, let in zip(['9', '6'], 'AB')]\n    tiprack300 = [ctx.load_labware('opentrons_96_tiprack_300ul', '10')]\n    tiprack1000 = [ctx.load_labware('opentrons_96_tiprack_1000ul', '11')]\n\n    p300 = ctx.load_instrument('p300_single_gen2', 'left',\n                               tip_racks=tiprack300)\n    p1000 = ctx.load_instrument('p1000_single_gen2', 'right',\n                                tip_racks=tiprack1000)\n    p300.flow_rate.blow_out = 300\n    p1000.flow_rate.blow_out = 1000\n\n    air_gap_p1000 = 100 if air_gap_bool else 0\n    air_gap_p300 = 20 if air_gap_bool else 0\n    air_gap_dict = {\n        pip: airgap for pip, airgap in zip([p1000, p300],\n                                           [air_gap_p1000, air_gap_p300])\n    }\n\n    # start reagent setup\n    tubes_dict = {\n        well: tube(well)\n        for rack in [tuberack15_50, tuberack15]\n        for well in rack.wells()\n    }\n    diluent = tuberack15_50.wells_by_name()['A3']\n    tubes_dict[diluent].comp_coeff = 1.2\n    tubes_dict[diluent].height = 92\n\n    # tip conditioning\n    dil_dest = tuberack15_50.wells()[0]\n\n    def tip_condition(pip, vol, loc):\n        pip.pick_up_tip()\n        pip.flow_rate.aspirate = pip.max_volume/2\n        pip.flow_rate.dispense = pip.max_volume\n        for i in range(2):\n            mix_reps = 2 - i\n            pip.transfer(vol, tubes_dict[loc].height_dec(vol),\n                         dil_dest.bottom(104),\n                         mix_before=(mix_reps, pip.max_volume*2/3),\n                         air_gap=air_gap_dict[pip], new_tip='never')\n            tubes_dict[dil_dest].height_inc(vol)\n            pip.blow_out(dil_dest.bottom(104))\n\n    # create serial dilution from .csv file\n    data = [\n        line.split(',')[:17] for line in input_csv.splitlines()[14:28]\n        if line and line.split(',')[0]]\n\n    # first set of tip conditioning\n    tip_condition(p1000, 500, diluent)\n\n    # pre-add diluent in reverse\n    for line in data[::-1]:\n        dest = ctx.loaded_labwares[int(line[12])].wells_by_name()[line[13]]\n        dil_vol = float(line[14])\n        num_trans = math.ceil(dil_vol/(p1000.max_volume-air_gap_p1000))\n        vol_per_trans = dil_vol/num_trans\n        asp_rate = vol_per_trans if vol_per_trans < 150 else 150\n        disp_rate = 2*vol_per_trans if vol_per_trans > 37 else 150\n        p1000.flow_rate.aspirate = asp_rate\n        p1000.flow_rate.dispense = disp_rate\n        for n in range(num_trans):\n            p1000.transfer(vol_per_trans,\n                           tubes_dict[diluent].height_dec(vol_per_trans),\n                           tubes_dict[dest].height_inc(vol_per_trans),\n                           air_gap=air_gap_p1000, new_tip='never')\n            p1000.blow_out(dest.bottom(tubes_dict[dest].height + 20))\n    p1000.air_gap(100)\n    p1000.drop_tip()\n\n    # parse std sources\n    std_dict = {}\n    for line in data:\n        std = ctx.loaded_labwares[int(line[10])].wells_by_name()[line[11]]\n        dest = ctx.loaded_labwares[int(line[12])].wells_by_name()[line[13]]\n        std_vol = float(line[9])\n        if std in std_dict:\n            std_dict[std].append({'dest': dest, 'vol': std_vol})\n        else:\n            std_dict[std] = [{'dest': dest, 'vol': std_vol}]\n\n    # add standards to pre-added diluents\n    for std, vals in std_dict.items():\n        if std.parent.parent == '2':\n            if p1000.hw_pipette['has_tip']:\n                p1000.air_gap(100)\n                p1000.drop_tip()\n            p1000.pick_up_tip()\n            p1000.flow_rate.aspirate = 500\n            p1000.flow_rate.dispense = 1000\n            p1000.flow_rate.blow_out = 1000\n            p1000.mix(5, 1000, std.bottom(tubes_dict[std].height))\n            p1000.blow_out(std.top(-2))\n            p1000.air_gap(100)\n            p1000.drop_tip()\n        # p300 tip condition\n        tip_condition(p300, 150, diluent)\n        if std.display_name.split()[0] == 'H11':\n            plate_height = qc_height\n        elif std.display_name.split()[0] == 'H12':\n            plate_height = std_height\n        for val in vals:\n            dest = val['dest']\n            vol = val['vol']\n            num_trans = math.ceil(vol/(p300.max_volume-air_gap_p300))\n            vol_per_trans = vol/num_trans\n            asp_rate = vol_per_trans if vol_per_trans < 150 else 150\n            disp_rate = 2*vol_per_trans if vol_per_trans > 37 else 150\n            p300.flow_rate.aspirate = asp_rate\n            p300.flow_rate.dispense = disp_rate\n            for n in range(num_trans):\n                dest_loc = tubes_dict[dest].height_inc(vol_per_trans)\n                if std.parent.parent == '1':\n                    p300.transfer(vol_per_trans, std.bottom(plate_height),\n                                  dest_loc, air_gap=air_gap_p300,\n                                  new_tip='never')\n                    if plate_height - 1 > 1:\n                        plate_height -= 1.5\n                    else:\n                        plate_height = 1\n                else:\n                    p300.transfer(vol_per_trans,\n                                  tubes_dict[std].height_dec(vol_per_trans),\n                                  dest_loc, air_gap=air_gap_p300,\n                                  new_tip='never')\n                p300.blow_out(dest_loc)\n        p300.air_gap(20)\n        p300.drop_tip()\n\n    # aliquots\n    ws_dests_1_4 = [\n        well\n        for set in [ws_1_4[0].rows()[i] + ws_1_4[1].rows()[i][:4]\n                    for i in range(len(ws_1_4[0].rows()))]\n        for well in set]\n    ws_dests_5_8 = [\n        well\n        for set in [ws_5_8[0].rows()[i] + ws_5_8[1].rows()[i][:4]\n                    for i in range(len(ws_5_8[0].rows()))]\n        for well in set]\n    ws_dests_all = ws_dests_1_4 + ws_dests_5_8\n\n    qc_dests = [\n        well\n        for set in [qc[0].columns()[i] + qc[1].columns()[i]\n                    for i in range(len(qc[0].columns())-1, -1, -1)]\n        for well in set]\n    [qc_dests.remove(well) for well in [\n        qc[0].wells_by_name()['B1'],\n        qc[0].wells_by_name()['C1'],\n        qc[1].wells_by_name()['B6']]]\n\n    std_5x = ['DQC', 'ULOQC', 'LLOQC']\n    ws_counter = 0\n    qc_counter = 0\n    for line in data[::-1]:\n        std_name = line[0]\n        std = ctx.loaded_labwares[int(line[12])].wells_by_name()[line[13]]\n        dest_set = qc_dests if 'QC' in std_name else ws_dests_all\n        counter = qc_counter if 'QC' in std_name else ws_counter\n        num_aliquots = 5 if std_name in std_5x else 10\n        aliquots = dest_set[counter:counter+num_aliquots]\n\n        # mix\n        if p1000.hw_pipette['has_tip']:\n            p1000.air_gap(100)\n            p1000.drop_tip()\n        p1000.pick_up_tip()\n        p1000.flow_rate.aspirate = 500\n        p1000.flow_rate.dispense = 1000\n        p1000.flow_rate.blow_out = 1000\n        p1000.mix(5, 1000, std.bottom(tubes_dict[std].height))\n        p1000.blow_out(std.top(-2))\n        for a in aliquots:\n            p1000.flow_rate.aspirate = 150\n            p1000.flow_rate.dispense = 320\n            p1000.transfer(vol_aliquot,\n                           tubes_dict[std].height_dec(vol_aliquot),\n                           a.bottom(10), air_gap=air_gap_p1000,\n                           new_tip='never')\n            p1000.blow_out(a.top(-6))\n        p1000.air_gap(100)\n        p1000.drop_tip()\n        if 'QC' in std_name:\n            qc_counter += num_aliquots\n        else:\n            ws_counter += num_aliquots\n\n    # transfer mobile phase\n    mobile_phase = tuberack15_50.wells_by_name()['B1']\n    tubes_dict[mobile_phase].height = 94\n    tip_condition(p1000, 1000, mobile_phase)\n    mobile_phase_dests = plate.rows()[0][:8] + plate.rows()[2][:6] + [\n        plate.wells_by_name()['E1']] + [plate.wells_by_name()['E3']]\n    for i in range(len(mobile_phase_dests)//2):\n        p1000.flow_rate.aspirate = 150\n        p1000.flow_rate.dispense = 800\n        # custom distribution\n        asp_vol = vol_mobile_phase*2 + 100 \\\n            if vol_mobile_phase*2 + 100 < 1000 else 1000\n        p1000.aspirate(asp_vol, tubes_dict[mobile_phase].height_dec(asp_vol))\n        for well in mobile_phase_dests[i*2:i*2+2]:\n            p1000.dispense(vol_mobile_phase, well.bottom(10))\n        p1000.dispense(\n            p1000.current_volume,\n            tubes_dict[mobile_phase].height_inc(p1000.current_volume))\n        p1000.blow_out(mobile_phase.top(-2))\n    p1000.air_gap(100)\n    p1000.drop_tip()\n\n    # transfer IS\n    is_ = plate.wells_by_name()['H1']\n    tip_condition(p300, 150, diluent)\n    for i, m in enumerate(mobile_phase_dests):\n        if i < 5:\n            h = 6\n        elif i >= 5 and i < 8:\n            h = 4\n        else:\n            h = 1\n        p300.transfer(30, is_.bottom(h), m.bottom(14), air_gap=air_gap_p300,\n                      new_tip='never')\n        p300.blow_out(m.bottom(14))\n    p300.air_gap(20)\n    p300.drop_tip()\n\n    # tests\n    ws_counter = 0\n    qc_counter = 0\n    ws_dests = mobile_phase_dests[:8]\n    qc_dests = mobile_phase_dests[8:]\n    for line in data[::-1]:\n        std_name = line[0]\n        std = ctx.loaded_labwares[int(line[12])].wells_by_name()[line[13]]\n        dest_set = qc_dests if 'QC' in std_name else ws_dests\n        counter = qc_counter if 'QC' in std_name else ws_counter\n\n        p300.flow_rate.aspirate = 30\n        p300.flow_rate.dispense = 150\n        # tip_condition(p300, 150, diluent)\n        p300.pick_up_tip()\n        p300.transfer(vol_tests, tubes_dict[std].height_dec(vol_tests),\n                      dest_set[counter].bottom(14), mix_before=(2, 200),\n                      air_gap=air_gap_p300, new_tip='never')\n        p300.blow_out(dest_set[counter].bottom(14))\n        p300.air_gap(20)\n        p300.drop_tip()\n\n        if 'QC' in std_name:\n            qc_counter += 1\n        else:\n            ws_counter += 1\n\n    write_path = '/data/readout.txt'\n    if not ctx.is_simulating():\n        p300_serial = p300.hw_pipette['pipette_id']\n        p1000_serial = p1000.hw_pipette['pipette_id']\n        ot2_serial = []\n        with open('/var/serial') as serialfile:\n            ot2_serial.append(serialfile.read())\n        with open(write_path, 'w') as text_file:\n            text_file.write(f'Test method: {test_method}\\n')\n            text_file.write(f'Date/Time of run: {str(datetime.now())}\\n')\n            text_file.write(f'P300 Serial: {str(p300_serial)}\\n')\n            text_file.write(f'P1000 Serial: {str(p1000_serial)}\\n')\n            text_file.write(f'OT-2 Serial: {str(ot2_serial[0])}\\n')\n            text_file.write('Protocol execution:\\n')\n            for c in ctx.commands():\n                text_file.write(f'{c}\\n')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Genealogy:,,332 312,,,,,,,,,,,,,,,,\n,,Liquid,Initial Volume (ul),Starting Height (mm),Location,,,,,,,,,,,,,\nSTD:,,AZ60,500,14.5,1,H12,,System inputs,,,,,,,,,,\nQC:,,AZ61,1000,22,1,H11,,,,,,,,,,,,\nIS:,,AZ75,500,14.5,1,H1,,,,,,,,,,,,\nDiluent:,,H2O,50000,91,3,A3,,,,,,,,,,,,\nMobile Phase:,,H2O/ACN,14000,100,3,C1,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,\n,,,,,A,B,C,,,,,,,,,,,\nP300 Polynominal Curve Fit    (Ax2 + Bx + C),,,,,-0.0000131669261067878,0.0128516172185952,0.395873512617873,,,,,,,,,,,\nP1000 Polynominal Curve Fit    (Ax2 + Bx + C),,,,,0.0000038129418471759,0.00135227508609844,0.567650868976111,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,\nDilution Template As Listed in Method,,,,,,,,,OT2 Volume Programming,Source Location,,Desitination Location,,OT2 Volume Programming,Destination Location,,,\nSTD,Location Slot Well,,Conc. (ng/ml),WS Conc. (ng/ml),Final Volume (ml),STD Conc/ (ng/ml),STD Volume (ul),Diluent Volume (ul),STD Volume (ul),Slot,Well,Slot,Well,Diluent Volume (ul) ,Slot,Well,,\nDQC,2,A1,10000,200000,3,1000000,600,2400,596.6,1,H11,2,A1,2382,2,A1,,\nULOQC,2,A2,1000,20000,3,1000000,60,2940,58.9,1,H11,2,A2,2912,2,A2,,\n8,2,A3,1000,20000,3,1000000,60,2940,58.9,1,H12,2,A3,2912,2,A3,,\n7,2,A4,900,18000,3,1000000,54,2946,52.9,1,H12,2,A4,2917,2,A4,,\nHQC,2,A5,800,16000,3,1000000,48,2952,47.0,1,H11,2,A5,2923,2,A5,,\n6,2,B1,500,10000,3,1000000,30,2970,29.2,1,H12,2,B1,2941,2,B1,,\n5,2,B2,100,2000,2,10000,400,1600,396.6,2,B1,2,B2,1593,2,B2,,\nMQC,2,B3,30,600,2,16000,75,1925,73.7,2,A5,2,B3,1914,2,B3,,\n4,2,B4,25,500,2,10000,100,1900,98.5,2,B1,2,B4,1889,2,B4,,\n3,2,C1,5,100,3,10000,30,2970,29.2,2,B1,2,C1,2941,2,C1,,\nLQC,2,C2,3,60,2,600,200,1800,197.6,2,B3,2,C2,1791,2,C2,,\n2,2,C3,2,40,3,2000,60,2940,58.9,2,B2,2,C3,2912,2,C3,,\n1,2,C4,1,20,3,2000,30,2970,29.2,2,B2,2,C4,2941,2,C4,,\nLLOQC,2,C5,1,20,3,600,100,2900,98.5,2,B3,2,C5,2872,2,C5,,\n",
            "label": "input .csv file",
            "name": "input_csv",
            "type": "textFile"
        },
        {
            "default": "TM##-###",
            "label": "test method",
            "name": "test_method",
            "type": "str"
        },
        {
            "default": 160,
            "label": "volume of aliquot (in \u00b5l)",
            "name": "vol_aliqout",
            "type": "float"
        },
        {
            "default": 400,
            "label": "volume of mobile phase (in \u00b5l)",
            "name": "vol_mobile_phase",
            "type": "float"
        },
        {
            "default": 30,
            "label": "volume of tests (in \u00b5l)",
            "name": "vol_tests",
            "type": "float"
        },
        {
            "default": 10,
            "label": "QC (slot 1, well H11) starting height (in mm)",
            "name": "qc_height",
            "type": "float"
        },
        {
            "default": 7,
            "label": "STD (slot 1, well H12) starting height (in mm)",
            "name": "std_height",
            "type": "float"
        },
        {
            "label": "air gap",
            "name": "air_gap_bool",
            "options": [
                {
                    "label": "no",
                    "value": false
                },
                {
                    "label": "yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "TEST PLATE 2ML 96 WELL STANDARD, QC, AND IS on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "WS AND QC SOLUTIONS on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_15_tuberack_nest_15ml_conical"
        },
        {
            "name": "DILUENT AND MOBILE PHASE on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_10_tuberack_nest_4x50ml_6x15ml_conical"
        },
        {
            "name": "WS 5-8 A on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "WS 5-8 B on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "QC B on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "WS 1-4 A on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "WS 1-4 B on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "QC A on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_24_tuberack_nest_1.5ml_snapcap"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.8",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "STANDARD MP",
        "source": "Custom Protocol Request"
    },
    "modules": []
}