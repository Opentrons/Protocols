{
    "content": "\"\"\"OPENTRONS.\"\"\"\nfrom opentrons import protocol_api\nimport math\nimport threading\nfrom time import sleep\n\nmetadata = {\n    'protocolName': 'NEBNext Ultra II Directional RNA Library Prep Kit for Illumina Part 4: Second cDNA Strand Synthesis',\n    'author': 'John C. Lynch <john.lynch@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.13'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n# Definitions for deck light flashing\n\n\nclass CancellationToken:\n    \"\"\"FLASH SETUP.\"\"\"\n\n    def __init__(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = False\n\n    def set_true(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = True\n\n    def set_false(self):\n        \"\"\"FLASH SETUP.\"\"\"\n        self.is_continued = False\n\n\ndef turn_on_blinking_notification(hardware, pause):\n    \"\"\"FLASH SETUP.\"\"\"\n    while pause.is_continued:\n        hardware.set_lights(rails=True)\n        sleep(1)\n        hardware.set_lights(rails=False)\n        sleep(1)\n\n\ndef create_thread(ctx, cancel_token):\n    \"\"\"FLASH SETUP.\"\"\"\n    t1 = threading.Thread(target=turn_on_blinking_notification,\n                          args=(ctx._hw_manager.hardware, cancel_token))\n    t1.start()\n    return t1\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n    \"\"\"PROTOCOLS.\"\"\"\n    [\n     num_samples,\n     m300_mount, flash\n    ] = get_values(  # noqa: F821 (<--- DO NOT REMOVE!)\n        \"num_samples\", \"m300_mount\", \"flash\")\n\n    TEST_MODE = False\n    bead_delay_time = 2\n    wash_delay_time = 2\n    supernatant_headspeed_modulator = 10\n    mag_height = 3.5\n    ctx.max_speeds['Z'] = 400\n    ctx.max_speeds['A'] = 400\n    # Setup for flashing lights notification to empty trash\n    cancellationToken = CancellationToken()\n\n    # define all custom variables above here with descriptions:\n    num_columns = math.ceil(num_samples/8)\n    if m300_mount == 'right':\n        m20_mount = 'left'\n    else:\n        m20_mount = 'right'\n    # load modules\n    mag_deck = ctx.load_module('magnetic module gen2', '1')\n    temp_deck = ctx.load_module('temperature module gen2', '3')\n    temp_deck.set_temperature(4)\n    print(num_columns)\n\n    # load labware\n    mag_plate = mag_deck.load_labware('thermofisher_96_wellplate_200ul')\n    temp_plate = temp_deck.load_labware('opentrons_96_aluminumblock_generic_'\n                                        'pcr_strip_200ul')\n    # dwp = ctx.load_labware('nest_96_wellplate_2ml_deep', '4')\n    # final_plate = ctx.load_labware('thermofisher_96_wellplate_200ul', '2')\n    trash = ctx.load_labware('nest_1_reservoir_195ml', '9').wells()[0].top()\n    print(trash)\n    # load tipracks\n\n    tips300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n               for slot in ['7', '10']]\n    tips20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', slot)\n              for slot in ['8', '11']]\n    # load instrument\n\n    m300 = ctx.load_instrument(\n        'p300_multi_gen2', m300_mount, tip_racks=tips300)\n\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount, tip_racks=tips20)\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n\n    def pick_up(pip):\n        try:\n            pip.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            pip.home()\n            ctx.pause('\\n\\n~~~~~~~~~~~~~~PLEASE REPLACE TIPRACKS~~~~~~~~~~~~~~~\\n')  # noqa: E501\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n            ctx.set_rail_lights(True)\n            pip.reset_tipracks()\n            pick_up(pip)\n\n    tips_dropped = 0\n\n    def drop_tip(pip, home=True):\n        nonlocal tips_dropped\n        pip.drop_tip(home_after=home)\n        if pip == m300:\n            tips_dropped += 8\n        else:\n            tips_dropped += 1\n        if tips_dropped == 288:\n            if flash:\n                if not ctx._hw_manager.hardware.is_simulator:\n                    cancellationToken.set_true()\n                thread = create_thread(ctx, cancellationToken)\n            pip.home()\n            ctx.pause('\\n\\n~~~~~~~~~~~~~~PLEASE EMPTY TRASH~~~~~~~~~~~~~~~\\n')\n            ctx.home()  # home before continuing with protocol\n            if flash:\n                cancellationToken.set_false()  # stop light flashing after home\n                thread.join()\n            ctx.set_rail_lights(True)\n            tips_dropped = 0\n\n    def bead_mixing(well, pip, mvol, reps=10):\n        \"\"\"bead_mixing.\"\"\"\n        \"\"\"\n        'bead_mixing' will mix liquid that contains beads. This will be done by\n        aspirating from the middle of the well & dispensing from the bottom to\n        mix the beads with the other liquids as much as possible. Aspiration &\n        dispensing will also be reversed to ensure proper mixing.\n        param well: The current well that the mixing will occur in.\n        param pip: The pipet that is currently attached/ being used.\n        param mvol: The volume that is transferred before the mixing steps.\n        param reps: The number of mix repetitions that should occur. Note~\n        During each mix rep, there are 2 cycles of aspirating from bottom,\n        dispensing at the top and 2 cycles of aspirating from middle,\n        dispensing at the bottom\n        \"\"\"\n        vol = mvol * .9\n\n        pip.move_to(well.center())\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(1), rate=2)\n            pip.dispense(vol, well.bottom(5), rate=2)\n            pip.aspirate(vol, well.bottom(5), rate=2)\n            pip.dispense(vol, well.bottom(1), rate=2)\n    # reagents\n\n    samples = mag_plate.rows()[0][:num_columns]\n    rxn_buffer = temp_plate.rows()[0][0]\n    enzyme_mix = temp_plate.rows()[0][2]\n    nfw = temp_plate.rows()[0][4]\n\n    # protocol\n    ctx.comment('\\n~~~~~~~~~~~ADDING REACTION BUFFER~~~~~~~~~~~\\n')\n    for dest in samples:\n        pick_up(m20)\n        m20.aspirate(8, rxn_buffer)\n        m20.dispense(8, dest)\n        drop_tip(m20)\n\n    ctx.comment('\\n~~~~~~~~~~~ADDING ENZYME MIX~~~~~~~~~~~\\n')\n    for dest in samples:\n        pick_up(m20)\n        m20.aspirate(4, enzyme_mix)\n        m20.dispense(4, dest)\n        drop_tip(m20)\n\n    ctx.comment('\\n~~~~~~~~~~~ADDING NUCLEASE FREE WATER~~~~~~~~~~~\\n')\n    for dest in samples:\n        pick_up(m300)\n        m300.aspirate(48, nfw)\n        m300.dispense(48, dest)\n        m300.mix(6, 70, dest)\n        drop_tip(m300)\n\n    if flash:\n        if not ctx._hw_manager.hardware.is_simulator:\n            cancellationToken.set_true()\n        thread = create_thread(ctx, cancellationToken)\n    m300.home()\n    ctx.pause('\\n\\n~~~~~~~~~~~~~~PROTOCOL  COMPLETE~~~~~~~~~~~~~~~\\n')\n    ctx.home()  # home before continuing with protocol\n    if flash:\n        cancellationToken.set_false()  # stop light flashing after home\n        thread.join()\n    ctx.set_rail_lights(True)\n\n    for c in ctx.commands():\n        print(c)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Number of samples",
            "name": "num_samples",
            "options": [
                {
                    "label": "8",
                    "value": 8
                },
                {
                    "label": "16",
                    "value": 16
                },
                {
                    "label": "24",
                    "value": 24
                },
                {
                    "label": "32",
                    "value": 32
                },
                {
                    "label": "40",
                    "value": 40
                },
                {
                    "label": "48",
                    "value": 48
                },
                {
                    "label": "56",
                    "value": 56
                },
                {
                    "label": "64",
                    "value": 64
                },
                {
                    "label": "72",
                    "value": 72
                },
                {
                    "label": "80",
                    "value": 80
                },
                {
                    "label": "88",
                    "value": 88
                },
                {
                    "label": "96",
                    "value": 96
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi-Channel Mount",
            "name": "m300_mount",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Flash?",
            "name": "flash",
            "options": [
                {
                    "label": "Yes, flash",
                    "value": true
                },
                {
                    "label": "No, do not flash",
                    "value": false
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Thermo Fisher 96 Well Plate 200 \u00b5L on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "thermofisher_96_wellplate_200ul"
        },
        {
            "name": "Opentrons 96 Well Aluminum Block with Generic PCR Strip 200 \u00b5L on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_aluminumblock_generic_pcr_strip_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "NEST 1 Well Reservoir 195 mL on 9",
            "share": false,
            "slot": "9",
            "type": "nest_1_reservoir_195ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "John C. Lynch <john.lynch@opentrons.com>",
        "protocolName": "NEBNext Ultra II Directional RNA Library Prep Kit for Illumina Part 4: Second cDNA Strand Synthesis",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 1 lw Thermo Fisher 96 Well Plate 200 \u00b5L on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "magdeck"
        },
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 3 lw Opentrons 96 Well Aluminum Block with Generic PCR Strip 200 \u00b5L on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "tempdeck"
        }
    ]
}