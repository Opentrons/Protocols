{
    "content": "from opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': 'NGS Clean Up',\n    'author': 'Opentrons <protocols@opentrons.com>',\n    'apiLevel': '2.12'\n}\n\nNUM_SAMPLES = 96\nMOUNT_M20 = 'left'\nMOUNT_M300 = 'right'\nNUM_ETOH_WASHES = 2\n\nTEST_MODE_BEADS = False\nTEST_MODE_BIND_INCUBATE = False\n\n\ndef run(ctx):\n\n    if TEST_MODE_BEADS:\n        mixreps = 1\n    else:\n        mixreps = 15\n    z_offset_resuspension = 2.0\n    z_offset_supernatant_initial = 0.5\n    z_offset_supernatant = 0.3\n    radial_offset_fraction_resuspension = 0.6\n    radial_offset_fraction_supernatant = 0.5\n    time_incubation_minutes = 5\n    time_settling_minutes = 5\n    time_incubation_elution_minutes = 3\n    time_settling_minutes_elution = 3\n    vol_starting = 5\n    vol_binding_buffer = 5\n    vol_ampure_beads = 8\n    vol_ethanol = 50\n    vol_elution_buffer = 7.6\n    vol_elution_final = 6.6\n\n    ctx.max_speeds['X'] = 200\n    ctx.max_speeds['Y'] = 200\n\n    magdeck = ctx.load_module('magnetic module gen2', '4')\n    magdeck.disengage()\n    magplate = magdeck.load_labware('biorad_96_wellplate_200ul_pcr',\n                                    'sample plate')\n    elution_plate = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt',\n                                     '1', 'elution plate')\n    res1 = ctx.load_labware('nest_12_reservoir_15ml', '5',\n                            'reagent reservoir (ethanol and waste)')\n    res2 = ctx.load_labware('nest_96_wellplate_100ul_pcr_full_skirt', '2',\n                            'reagent plate')\n    tips200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot,\n                         '200\u00b5l filtertiprack')\n        for slot in ['3', '6'][:math.ceil(NUM_SAMPLES/(24*NUM_ETOH_WASHES))]]\n    tips20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', slot,\n                         '20\u00b5l filtertiprack')\n        for slot in ['8', '9', '10', '11', '7'][:math.ceil(NUM_SAMPLES/20)]]\n\n    # load P300M pipette\n    m20 = ctx.load_instrument('p20_multi_gen2', MOUNT_M20, tip_racks=tips20)\n    m300 = ctx.load_instrument('p300_multi_gen2', MOUNT_M300,\n                               tip_racks=tips200)\n\n    \"\"\"\n    Here is where you can define the locations of your reagents.\n    \"\"\"\n    etoh = res1.rows()[0][0]\n    waste = res1.rows()[0][-1].top()\n    dna_binding_buffer = res2.rows()[0][0]\n    ampure_beads = res2.rows()[0][1]\n    elution_buffer = res2.rows()[0][2]\n\n    num_cols = math.ceil(NUM_SAMPLES/8)\n    mag_samples = magplate.rows()[0][:num_cols]\n    elution_samples = elution_plate.rows()[0][:num_cols]\n\n    parking_sets20 = [\n        [tip for rack in m20.tip_racks\n         for tip in rack.rows()[0]][i*num_cols:(i+1)*num_cols]\n        for i in range(5)]\n    parking_sets300 = [\n        [tip for rack in m300.tip_racks\n         for tip in rack.rows()[0]][i*num_cols:(i+1)*num_cols]\n        for i in range(2)]\n\n    waste_vol = 0\n    waste_threshold = waste.labware.as_well().max_volume * 0.95  # 95% cap\n\n    def remove_supernatant(pip, vol, z_offset=z_offset_supernatant,\n                           wells=mag_samples, parking_spots=None,\n                           dispense_liquid=True):\n        \"\"\"\n        `remove_supernatant` will transfer supernatant from the deepwell\n        extraction plate to the liquid waste reservoir.\n        :param vol (float): The amount of volume to aspirate from all deepwell\n                            sample wells and dispense in the liquid waste.\n        :param park (boolean): Whether to pick up sample-corresponding tips\n                               in the 'parking rack' or to pick up new tips.\n        \"\"\"\n\n        def _waste_track(vol):\n            nonlocal waste_vol\n            if waste_vol + vol >= waste_threshold:\n                # Setup for flashing lights notification to empty liquid waste\n                ctx.home()\n                ctx.pause('Please empty liquid waste before resuming.')\n                waste_vol = 0\n            waste_vol += vol\n\n        if not parking_spots:\n            parking_spots = [None for _ in range(num_cols)]\n\n        pip.flow_rate.aspirate /= 5\n        for m, spot in zip(wells, parking_spots):\n            side = -1 if magplate.rows()[0].index(m) % 2 == 0 else 1\n            if not pip.has_tip:\n                pip.pick_up_tip(spot)\n            _waste_track(vol)\n            asp_loc = m.bottom().move(Point(\n                x=side*m.diameter/2*radial_offset_fraction_supernatant,\n                z=z_offset))\n            pip.move_to(m.center())\n            pip.aspirate(vol, asp_loc)\n            pip.move_to(m.bottom().move(Point(z=z_offset)))\n            if dispense_liquid:\n                pip.dispense(vol, waste)\n                pip.blow_out(waste)\n                pip.air_gap(1)\n            pip.drop_tip()\n        pip.flow_rate.aspirate *= 5\n\n    def wick(pip, well, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*well.diameter/2*0.8, z=3)))\n\n    height_set = [\n        res2.wells()[0].depth*factor+0.5 for factor in [0.6, 0.4, 0.2, 0]]\n\n    # transfer binding buffer\n    parking_set = parking_sets20.pop(0)\n    for i, (m, p) in enumerate(zip(mag_samples, parking_set)):\n        bb_ind = 11-i\n        height = height_set[bb_ind//3]\n        m20.pick_up_tip(p)\n        m20.transfer(vol_binding_buffer, dna_binding_buffer.bottom(height),\n                     m.bottom(1), mix_after=(2, vol_binding_buffer),\n                     new_tip='never')\n        wick(m20, m)\n        m20.drop_tip()\n\n    if not TEST_MODE_BIND_INCUBATE:\n        ctx.delay(minutes=time_incubation_minutes, msg=f'Incubating off magnet \\\nfor {time_incubation_minutes} minutes.')\n\n    # transfer ampure beads\n    parking_set = parking_sets20.pop(0)\n    for i, (m, p) in enumerate(zip(mag_samples, parking_set)):\n        bead_ind = 11-i\n        height = height_set[bead_ind//3]\n        m20.pick_up_tip(p)\n        m20.transfer(vol_ampure_beads, ampure_beads.bottom(height), m.bottom(1),\n                     mix_before=(2, vol_ampure_beads), new_tip='never')\n        for _ in range(8):\n            m20.aspirate(vol_ampure_beads, m.bottom(1))\n            m20.dispense(vol_ampure_beads, m.bottom(3))\n        wick(m20, m)\n        m20.drop_tip(p)\n\n    if not TEST_MODE_BIND_INCUBATE:\n        ctx.delay(minutes=time_incubation_minutes, msg=f'Incubating off magnet \\\nfor {time_incubation_minutes} minutes.')\n\n    magdeck.engage()\n    if not TEST_MODE_BEADS:\n        ctx.delay(minutes=time_settling_minutes, msg=f'Incubating on magnet \\\nfor {time_settling_minutes} minutes.')\n\n    remove_supernatant(m20, vol_starting+vol_binding_buffer+vol_ampure_beads-2,\n                       z_offset=z_offset_supernatant_initial,\n                       parking_spots=parking_set)\n\n    # etoh washes\n    wells_per_asp_etoh = math.floor(\n        m300.tip_racks[0].wells()[0].max_volume/vol_ethanol)\n    num_chunks = math.ceil(num_cols/wells_per_asp_etoh)\n    chunks = [\n        mag_samples[i*wells_per_asp_etoh:(i+1)*wells_per_asp_etoh]\n        if i < num_chunks - 1\n        else mag_samples[i*wells_per_asp_etoh:]\n        for i in range(num_chunks)\n    ]\n    m300.flow_rate.dispense /= 2\n    for _ in range(NUM_ETOH_WASHES):\n        parking_set = parking_sets300.pop(0)\n        m300.pick_up_tip(parking_set[0])\n        for chunk in chunks:\n            m300.aspirate(len(chunk)*vol_ethanol, etoh)\n            ctx.delay(seconds=2)\n            for m in chunk:\n                m300.dispense(vol_ethanol, m.top())\n                ctx.delay(seconds=1)\n        m300.move_to(etoh.top())\n        ctx.delay(seconds=10)\n        remove_supernatant(m300, 50, z_offset_supernatant_initial,\n                           parking_spots=parking_set)\n    m300.flow_rate.dispense *= 2\n\n    ctx.pause('Centrifuge the plate on the magnetic module, and replace before \\\nresuming.')\n\n    # remove residual ethanol\n    if not TEST_MODE_BEADS:\n        ctx.delay(minutes=3)\n\n    # elute\n    parking_set = parking_sets20.pop()\n    parking_set2 = parking_sets20.pop()\n    for i, (m, p, p2) in enumerate(zip(mag_samples, parking_set, parking_set2)):\n        side_beads = 1 if magplate.rows()[0].index(m) % 2 == 0 else -1\n        side_elution = -1 if magplate.rows()[0].index(m) % 2 == 0 else 1\n\n        # remove supernatant and immediately add elution buffer and resuspend\n        remove_supernatant(m20, 20, parking_spots=[p], wells=[m],\n                           dispense_liquid=False)\n\n        eb_ind = 11-i\n        height = height_set[eb_ind//3]\n        m20.pick_up_tip(p2)\n        m20.aspirate(vol_elution_buffer, elution_buffer.bottom(height))\n        m20.move_to(m.center())\n\n        # custom bead resuspension\n        m20.flow_rate.aspirate *= 3\n        m20.flow_rate.dispense *= 3\n        asp_loc = m.bottom(0.2)\n        disp_loc = m.bottom().move(Point(\n            x=m.diameter/2*side_beads*radial_offset_fraction_resuspension,\n            z=z_offset_resuspension))\n        m20.dispense(vol_elution_buffer, disp_loc)\n        for _ in range(mixreps+5):\n            m20.aspirate(vol_elution_buffer*0.8, asp_loc)\n            m20.dispense(vol_elution_buffer*0.8, disp_loc)\n        m20.flow_rate.aspirate /= 3\n        m20.flow_rate.dispense /= 3\n\n        wick(m20, m)\n        m20.drop_tip()\n\n    if not TEST_MODE_BIND_INCUBATE:\n        ctx.delay(minutes=time_incubation_elution_minutes, msg=f'Incubating \\\noff magnet for {time_incubation_elution_minutes} minutes.')\n\n    magdeck.engage()\n    if not TEST_MODE_BEADS:\n        ctx.delay(minutes=time_settling_minutes_elution, msg=f'Incubating on \\\nmagnet for {time_settling_minutes_elution} minutes.')\n\n    parking_set = parking_sets20.pop()\n    m20.flow_rate.aspirate /= 5\n    for m, e, p in zip(mag_samples, elution_samples, parking_set):\n        side_elution = -1 if magplate.rows()[0].index(m) % 2 == 0 else 1\n        m20.pick_up_tip(p)\n        m20.move_to(m.center())\n        m20.aspirate(vol_elution_final, m.bottom().move(Point(\n            x=side_elution*m.diameter/2*radial_offset_fraction_supernatant,\n            z=z_offset_supernatant)))\n        m20.dispense(vol_elution_final, e.bottom(1))\n        wick(m20, e)\n        m20.drop_tip()\n    m20.flow_rate.aspirate /= 5\n\n    magdeck.disengage()\n",
    "custom_labware_defs": [],
    "fields": [],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "elution plate on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "reagent plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "200\u00b5l filtertiprack on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "sample plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "reagent reservoir (ethanol and waste) on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "200\u00b5l filtertiprack on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "20\u00b5l filtertiprack on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Opentrons <protocols@opentrons.com>",
        "protocolName": "NGS Clean Up"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 4 lw sample plate on Magnetic Module GEN2 on 4",
            "share": false,
            "slot": "4",
            "type": "magdeck"
        }
    ]
}