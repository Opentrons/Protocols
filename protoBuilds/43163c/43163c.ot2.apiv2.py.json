{
    "content": "metadata = {\n    \"protocolName\": \"Nanomaterial toxicity assay\",\n    \"author\": \"\",\n    \"apiLevel\": \"2.0\"}\n\n\ndef run(ctx):\n\n    step = get_values(  # noqa: F821\n            'step')\n    final_plate = ctx.load_labware(\n        'corning_384_wellplate_112ul_flat',\n        '3',\n        label='Experimental nanoparticle plate')\n    if step == 1:\n        p20_tip_rack = [ctx.load_labware(\n            'opentrons_96_filtertiprack_200ul', '1')]\n        p300_tip_racks = [\n            ctx.load_labware(\n                'opentrons_96_filtertiprack_200ul',\n                x) for x in [\n                '4',\n                '7',\n                '10',\n                '11']]\n\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2',\n            \"right\",\n            tip_racks=p300_tip_racks)\n        p20m = ctx.load_instrument(\n            'p20_multi_gen2', \"left\", tip_racks=p20_tip_rack)\n\n        water = ctx.load_labware(\n            'nest_1_reservoir_195ml',\n            '2',\n            label='DI H2O').wells()[0]\n        reagents = ctx.load_labware(\n            'nest_12_reservoir_15ml', '5', label='Nanoparticles')\n\n        GO_10 = reagents.wells_by_name()['A1']\n        GO_100 = reagents.wells_by_name()['A2']\n        MoS2 = reagents.wells_by_name()['A3']\n        MoS2_10 = reagents.wells_by_name()['A4']\n        MoSe2 = reagents.wells_by_name()['A5']\n        MoSe2_10 = reagents.wells_by_name()['A6']\n\n        GO_MoS2_plate = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat', '9', label='GO/MoS2 prep plate')\n        MoSe2_plate = ctx.load_labware(\n            'nest_96_wellplate_200ul_flat',\n            '6',\n            label='MoSe2 prep plate')\n\n        GO_MoS2_load = [(GO_10, 67),\n                        (GO_10, 13),\n                        (GO_10, 7),\n                        (GO_10, 1),\n                        (GO_100, 3),\n                        (None, 0),\n                        (MoS2, 72),\n                        (MoS2, 14),\n                        (MoS2, 7),\n                        (MoS2, 1),\n                        (MoS2_10, 3),\n                        (None, 0)]\n        MoSe2_load = [(MoSe2, 36),\n                      (MoSe2, 7),\n                      (MoSe2, 4),\n                      (MoSe2_10, 7),\n                      (MoSe2_10, 1),\n                      (None, 0)]\n\n        for plate, load in zip([GO_MoS2_plate, MoSe2_plate], [\n                               GO_MoS2_load, MoSe2_load]):\n            for command, col in zip(load, plate.rows()[0][:len(load)]):\n                source = command[0]\n                vol = command[1]\n                p300m.transfer(200 - vol, water, col)\n                if source is not None:\n                    if vol > 20:\n                        p = p300m\n                    else:\n                        p = p20m\n                    p.transfer(vol, source, col)\n\n        for source_cols, target_cols in zip([\n            GO_MoS2_plate.rows()[0][:6],\n            GO_MoS2_plate.rows()[0][6:],\n            MoSe2_plate.rows()[0][:6]],\n            [[final_plate.wells_by_name()[\"A{}\".format(i)] for i in r] for r in\n                [range(2, 8), range(9, 15), range(16, 22)]]):\n            for source_col, target_col in zip(source_cols, target_cols):\n                p300m.transfer(25, source_col, target_col, mix_before=(3, 50))\n\n    if step == 2 or step == 3:\n        p300_tip_racks = [\n            ctx.load_labware(\n                'opentrons_96_filtertiprack_200ul',\n                x) for x in [\n                '1',\n                '4',\n                '7',\n                '8',\n                '10',\n                '11']]\n        p300m = ctx.load_instrument(\n            'p300_multi_gen2',\n            \"right\",\n            tip_racks=p300_tip_racks)\n        pbs = ctx.load_labware(\n            'nest_1_reservoir_195ml',\n            '2',\n            label='10% PBS').wells()[0]\n        liquid_trash = ctx.load_labware(\n            'nest_1_reservoir_195ml',\n            '6',\n            label='Liquid Trash').wells()[0]\n\n        final_plate_columns = [\n            final_plate.wells_by_name()[\n                \"A{}\".format(i)] for i in list(\n                range(\n                    2,\n                    8)) +\n            list(\n                range(\n                    9,\n                    15)) +\n            list(\n                range(\n                    16,\n                    22))]\n        for _ in range(0, 3):\n            for col in final_plate_columns:\n                # Better way to do this?\n                p300m.pick_up_tip()\n                p300m.aspirate(50, pbs)\n                p300m.dispense(50, col)\n                p300m.aspirate(50, col)\n                p300m.dispense(50, liquid_trash)\n                p300m.drop_tip()\n\n        if step == 2:\n            cells = ctx.load_labware(\n                'nest_1_reservoir_195ml',\n                '5',\n                label='Bacterial cells and media').wells()[0]\n            for col in final_plate_columns:\n                p300m.transfer(100, cells, col)\n\n        if step == 3:\n            for col in final_plate_columns:\n                p300m.transfer(100, col, liquid_trash)\n                p300m.transfer(50, pbs, col)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 1,
            "label": "Step (1-3)",
            "name": "step",
            "type": "int"
        }
    ],
    "instruments": [],
    "labware": [
        {
            "name": "Experimental nanoparticle plate on 3",
            "share": false,
            "slot": "3",
            "type": "corning_384_wellplate_112ul_flat"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.0",
        "author": "",
        "protocolName": "Nanomaterial toxicity assay"
    },
    "modules": []
}