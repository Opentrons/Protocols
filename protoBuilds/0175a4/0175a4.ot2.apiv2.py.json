{
    "content": "from itertools import zip_longest\nimport math\n\n# metadata\nmetadata = {\n    'protocolName': 'Saliva 3:1|2:1 pooling protocol',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'description': 'Pool 96 -15mL patients into 32 -15mL pools',\n    'apiLevel': '2.9'\n}\n\n\ndef run(ctx):\n    # bring in constant values used throughout the protocol\n    [sample_rows, sample_columns, sample_number, pool_size, pool_rows,\n     pool_columns, sample_slots, pool_slots] = get_values(  # noqa: F821\n            'sample_rows', 'sample_columns', 'sample_number', 'pool_size',\n            'pool_rows', 'pool_columns', 'sample_slots', 'pool_slots')\n\n    # pipette and tip box setup\n    tips_1000 = ctx.load_labware(\n        'opentrons_96_filtertiprack_1000ul', '11')\n    right_pipette = ctx.load_instrument(\n        'p1000_single_gen2', 'right', tip_racks=[tips_1000])\n    left_pipette = ctx.load_instrument(\n        'p1000_single_gen2', 'left', tip_racks=[tips_1000])\n\n    # calculate the number of sample_racks needed\n    sample_racks = math.ceil(sample_number / (sample_rows*sample_columns))\n\n    # construct sample rack names (example 'Patients 1-15') and load labware\n    first_sample = [\n        i*sample_rows*sample_columns + 1 for i in range(sample_racks)]\n    last_sample = [\n        value + 14 if value + 14 <=\n        sample_number else sample_number for value in first_sample]\n    [*patient_samples] = [ctx.load_labware(\n        'opentrons_15_tuberack_falcon_15ml_conical',\n        str(slot), plate_name) for slot, plate_name in zip(\n        sample_slots.split(\",\"),\n        ['Patients ' + str(first_sample[i]) + '-' +\n            str(last_sample[i]) for i in range(sample_racks)])]\n\n    # determine number of pools and pool racks\n    pool_number = math.ceil(sample_number / int(pool_size))\n    if pool_size == \"2\":\n        pool_rack_capacity = pool_rows*pool_columns\n        if pool_number <= 3*pool_rack_capacity:\n            pool_racks = math.ceil(pool_number / pool_rack_capacity)\n        else:\n            pool_racks = math.floor(pool_number / pool_rack_capacity)\n    elif pool_size == \"3\":\n        pool_rack_capacity = 2*pool_columns\n        if pool_number <= pool_rack_capacity:\n            pool_racks = 1\n        elif pool_number <= 2*pool_rack_capacity:\n            pool_racks = 2\n        else:\n            pool_racks = 3\n\n    # construct names (example 'Pools 1-10', 'Pools 1-15') and load pool racks\n    first_pool = [i*pool_rack_capacity + 1 for i in range(pool_racks)]\n\n    if pool_size == \"2\":\n        last_pool = [value + (pool_rack_capacity - 1) if not (\n            value + (pool_rack_capacity - 1) >\n            pool_number) else pool_number for value in first_pool]\n    elif pool_size == \"3\":\n        last_pool = [value + (pool_rack_capacity - 1) if not (\n            pool_number - (value + (pool_rack_capacity - 1)) <\n            pool_rack_capacity or value + (pool_rack_capacity - 1) >\n            pool_number) else pool_number for value in first_pool]\n\n    [*pools] = [ctx.load_labware(\n        'opentrons_15_tuberack_falcon_15ml_conical',\n        str(slot), plate_name) for slot, plate_name in zip(\n        pool_slots.split(\",\"),\n        ['Pools ' + str(first_pool[i]) + '-' + str(\n            last_pool[i]) for i in range(pool_racks)])]\n\n    # construct references to pool locations in pool fill order\n    pool_rows = []\n    if pool_size == \"2\":\n        for pool in pools:\n            for row in pool.rows():\n                pool_rows.append(row)\n        if pool_number > 3*pool_rack_capacity:\n            pool_rows.append(patient_samples[6].columns()[4])\n    elif pool_size == \"3\":\n        for j, pool in enumerate(pools, start=1):\n            for k, row in enumerate(pool.rows(), start=1):\n                if not k == 2:\n                    new_row = row\n                    pool_rows.append(new_row)\n            for k, row in enumerate(pool.rows(), start=1):\n                if (k == 2 and j == 3):\n                    new_row = row\n                    pool_rows.append(new_row)\n\n    pool_wells = [location for pool_row in pool_rows for location in pool_row]\n\n    if pool_size == \"2\":\n        pool_dispenses = [\n            pool_well for pool_well in pool_wells for i in range(\n             int(pool_size))]\n\n    # list wells for transfer steps (L asp, R asp, L disp, R disp)\n    transfer_count = 0\n    for index, rack in enumerate(patient_samples):\n        if pool_size == \"2\":\n            dispense_locations = [\n                pool_dispense for pool_dispense in pool_dispenses[\n                    index*pool_rack_capacity:(index + 1)*pool_rack_capacity]]\n        elif pool_size == \"3\":\n            dispense_locations = [\n                pool_well for pool_well in pool_wells[\n                    index*pool_columns:(index+1)*pool_columns\n                    ] for i in range(3)]\n        stop_index = (\n         lambda transfer_count: len(\n          rack.wells()) if sample_number - transfer_count >= len(\n          rack.wells()) else sample_number - transfer_count)(transfer_count)\n        transfers = zip_longest(\n            [rack.wells()[i] for i in range(0, stop_index, 2)],\n            [rack.wells()[i] for i in range(1, stop_index, 2)],\n            [dispense_locations[\n                i] for i in range(0, stop_index, 2)],\n            [dispense_locations[\n                i] for i in range(1, stop_index, 2)])\n\n        # transfer steps\n        for asp_l, asp_r, disp_l, disp_r in list(transfers):\n            left_pipette.pick_up_tip()\n            if asp_r and transfer_count < sample_number - 1:\n                right_pipette.pick_up_tip()\n            left_pipette.aspirate(500, asp_l)\n            if asp_r and transfer_count < sample_number - 1:\n                right_pipette.aspirate(500, asp_r)\n            left_pipette.dispense(500, disp_l)\n            transfer_count += 1\n            if disp_r and transfer_count < sample_number:\n                right_pipette.move_to(disp_r.top(10))\n                right_pipette.dispense(500, disp_r)\n                transfer_count += 1\n            if asp_r:\n                left_pipette.drop_tip()\n                right_pipette.drop_tip()\n            else:\n                left_pipette.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 3,
            "label": "Number of Sample Rows",
            "name": "sample_rows",
            "type": "int"
        },
        {
            "default": 5,
            "label": "Number of Sample Columns",
            "name": "sample_columns",
            "type": "int"
        },
        {
            "default": 96,
            "label": "Number of Samples",
            "name": "sample_number",
            "type": "int"
        },
        {
            "label": "Pool Size",
            "name": "pool_size",
            "options": [
                {
                    "label": "Pool Size of 3",
                    "value": "3"
                },
                {
                    "label": "Pool Size of 2",
                    "value": "2"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 3,
            "label": "Number of Pool Rows",
            "name": "pool_rows",
            "type": "int"
        },
        {
            "default": 5,
            "label": "Number of Pool Columns",
            "name": "pool_columns",
            "type": "int"
        },
        {
            "default": "1,3,4,6,7,9,10",
            "label": "(comma-delimited) Sample Rack Slot Order",
            "name": "sample_slots",
            "type": "str"
        },
        {
            "default": "2,5,8",
            "label": "(comma-delimited) Pool Rack Slot Order",
            "name": "pool_slots",
            "type": "str"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p1000_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Patients 1-15 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Pools 1-10 on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 16-30 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 31-45 on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Pools 11-20 on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 46-60 on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 61-75 on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Pools 21-32 on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 76-90 on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Patients 91-96 on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_15_tuberack_falcon_15ml_conical"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 1000 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_1000ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "description": "Pool 96 -15mL patients into 32 -15mL pools",
        "protocolName": "Saliva 3:1|2:1 pooling protocol"
    },
    "modules": []
}