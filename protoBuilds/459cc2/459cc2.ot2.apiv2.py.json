{
    "content": "from opentrons import protocol_api\n\nmetadata = {\n    'protocolName': 'Custom CSV Mass Spec Sample Prep',\n    'author': 'Sakib <sakib.hossain@opentrons.com>',\n    'description': 'Custom Protocol Request',\n    'apiLevel': '2.11'\n}\n\n\ndef run(ctx):\n\n    [\n        csv_file,\n        sample_vol,\n        mecn_transfer,\n        p300_mount,\n        m300_mount,\n        asp_rate,\n        disp_rate,\n        asp_rate_multi,\n        disp_rate_multi,\n        temp_mod,\n        disp_height,\n        pl_blowout_height,\n        airgap,\n        mecn_volume,\n        reservoir_loc,\n        mecn_dil_loc,\n        starting_tip_col\n        ] = get_values(  # noqa: F821\n            \"csv_file\",\n            \"sample_vol\",\n            \"mecn_transfer\",\n            \"p300_mount\",\n            \"m300_mount\",\n            \"asp_rate\",\n            \"disp_rate\",\n            \"asp_rate_multi\",\n            \"disp_rate_multi\",\n            \"temp_mod\",\n            \"disp_height\",\n            \"pl_blowout_height\",\n            \"airgap\",\n            \"mecn_volume\",\n            \"reservoir_loc\",\n            \"mecn_dil_loc\",\n            \"starting_tip_col\")\n\n    # CHANGE VARIABLES HERE\n    sample_vol = 30\n    mecn_transfer = True\n    p300_mount = \"left\"\n    m300_mount = \"right\"\n    asp_rate = 6\n    disp_rate = 6\n    asp_rate_multi = 10\n    disp_rate_multi = 10\n    temp_mod = True\n    disp_height = 12.5\n    pl_blowout_height = 10\n    airgap = 10\n    mecn_volume = 90\n    reservoir_loc = 3\n    mecn_dil_loc = 3\n    starting_tip_col = 4\n\n    transfer_info = [[val.strip().lower() for val in line.split(',')]\n                     for line in csv_file.splitlines()\n                     if line.split(',')[0].strip()][1:]\n\n    columns = len(transfer_info[0])-1\n    print(columns)\n\n    # Load Labware\n    if temp_mod:\n        temp_mod_3 = ctx.load_module('temperature module gen2', '3')\n        temp_mod_6 = ctx.load_module('temperature module gen2', '6')\n        temp_mod_3.set_temperature(4)\n        temp_mod_6.set_temperature(4)\n\n    tuberack = 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap'\n    well_plate = 'nest_96_wellplate_2ml_deep'\n    tiprack1 = ctx.load_labware('opentrons_96_tiprack_300ul', 8)\n    tiprack2 = ctx.load_labware('opentrons_96_tiprack_300ul', 10)\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', 7)\n\n    if columns == 5:\n        for line in transfer_info:\n            s_slot, d_slot = line[1] + line[4]\n            for rack, plate in zip([s_slot], [d_slot]):\n                if not int(rack) in ctx.loaded_labwares:\n                    ctx.load_labware(tuberack, rack)\n                if not int(plate) in ctx.loaded_labwares:\n                    if temp_mod:\n                        temp_mod_3.load_labware(well_plate)\n                    else:\n                        ctx.load_labware(well_plate, plate)\n    elif columns == 7:\n        for line in transfer_info:\n            s_slot, d1_slot, d2_slot = line[1] + line[4] + line[6]\n            for rack, plate1, plate2 in zip([s_slot], [d1_slot], [d2_slot]):\n                if not int(rack) in ctx.loaded_labwares:\n                    ctx.load_labware(tuberack, rack)\n                if not int(plate1) in ctx.loaded_labwares:\n                    if temp_mod:\n                        temp_mod_3.load_labware(well_plate)\n                    else:\n                        ctx.load_labware(well_plate, plate1)\n                if not int(plate2) in ctx.loaded_labwares:\n                    if temp_mod:\n                        temp_mod_6.load_labware(well_plate)\n                    else:\n                        ctx.load_labware(well_plate, plate2)\n    # else:\n    #     raise ValueError('Invalid CSV File Format. Check your CSV file.')\n\n    # Load Pipettes\n    p300 = ctx.load_instrument('p300_single_gen2', p300_mount,\n                               tip_racks=[tiprack1])\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount,\n                               tip_racks=[tiprack2])\n\n    # Helper Functions\n    def pick_up(pip, loc=None):\n        try:\n            if loc:\n                pip.pick_up_tip(loc)\n            else:\n                pip.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            pip.home()\n            ctx.pause(\"Please replace the empty tip racks!\")\n            pip.reset_tipracks()\n            pip.pick_up_tip()\n\n    def preWet(pipette, volume, location, reps, sample_height, b_height, airgap_vol):  # noqa: E501\n        ctx.comment(f'Pre-Wetting the tip(s) with {volume} uL at {location}')\n        for _ in range(reps):\n            sample_height = int(sample_height)\n            pipette.aspirate(volume, location.top(-sample_height))\n            pipette.air_gap(airgap_vol)\n            pipette.dispense(volume, location.top(-b_height))\n            pipette.blow_out(location.top(-b_height))\n\n    # Protocol Steps\n    p300.flow_rate.aspirate = asp_rate\n    p300.flow_rate.dispense = disp_rate\n    p300.flow_rate.blow_out = 1000\n    m300.flow_rate.aspirate = asp_rate_multi\n    m300.flow_rate.dispense = disp_rate_multi\n\n    # One Plate\n    if columns == 5:\n        for line in transfer_info:\n\n            s_slot, s_well, pickup_height, d1_slot, d1_well = line[1:7]\n            rack_by_row = [tube\n                           for row in\n                           ctx.loaded_labwares[int(s_slot)].rows()\n                           for tube in row]\n            source = rack_by_row[int(s_well) - 1]\n            dest1 = ctx.loaded_labwares[int(d1_slot)][d1_well.upper()]\n\n            pick_up(p300)\n            preWet(p300, sample_vol, source, 1, pickup_height, pl_blowout_height, airgap)  # noqa: E501\n\n            p300.aspirate(sample_vol, source.top(-int(pickup_height)))\n            p300.air_gap(airgap)\n            p300.dispense(sample_vol, dest1.bottom(disp_height))\n            p300.blow_out()\n            p300.blow_out()\n            p300.touch_tip()\n\n            p300.drop_tip()\n            ctx.comment('\\n\\n')\n\n    # Two Plates\n    if columns == 7:\n        airgap = 10\n        for line in transfer_info:\n            s_slot, s_well, pickup_height, d1_slot, d1_well, d2_slot, d2_well = line[1:8]  # noqa: E501\n            rack_by_row = [tube\n                           for row in\n                           ctx.loaded_labwares[int(s_slot)].rows()\n                           for tube in row]\n            source = rack_by_row[int(s_well) - 1]\n            dest1 = ctx.loaded_labwares[int(d1_slot)][d1_well.upper()]\n            dest2 = ctx.loaded_labwares[int(d2_slot)][d2_well.upper()]\n\n            pick_up(p300)\n\n            # Prewet\n            preWet(p300, sample_vol, source, 1, pickup_height, pl_blowout_height, airgap)  # noqa: E501\n\n            # 1st pickup and dispense for wellplate 1\n            p300.aspirate(sample_vol, source.top(-int(pickup_height)))\n            p300.air_gap(airgap)\n\n            # 1st dispense\n            p300.dispense(sample_vol, dest1.bottom(disp_height))\n            p300.blow_out()\n            p300.blow_out()\n            p300.touch_tip()\n\n            # 2nd pickup from source\n            p300.aspirate(sample_vol, source.top(-int(pickup_height)))\n            p300.air_gap(airgap)\n            # 2nd well\n            p300.dispense(sample_vol, dest2.bottom(disp_height))\n            p300.blow_out()\n            p300.blow_out()\n            p300.touch_tip()\n\n            p300.drop_tip()\n\n    ctx.pause('Press Resume on the Opentrons app to continue')\n    # Acetonitrile (MeCN) Transfer\n    m300.starting_tip = tiprack2.rows()[0][starting_tip_col-1]\n    if mecn_transfer:\n        pick_up(m300)\n\n        # Prewet the tips. Did not use function so default parameters are selected  # noqa: E501\n        m300.aspirate(mecn_volume, reservoir.wells()[reservoir_loc-1].bottom(1))  # noqa: E501\n        m300.air_gap(airgap)\n        m300.dispense(mecn_volume, reservoir.wells()[reservoir_loc-1].top(-5))\n        m300.blow_out(reservoir.wells()[reservoir_loc-1].top(-5))\n\n        # Updated to account for plate dilution, incorporate aliquout and reservoir location, add air gap, dispense volume and blow out  # noqa: E501\n        for col in ctx.loaded_labwares[mecn_dil_loc].rows()[0]:\n            m300.aspirate(mecn_volume, reservoir.wells()[reservoir_loc-1].bottom(1))  # noqa: E501\n            m300.air_gap(airgap)\n            m300.dispense(mecn_volume, col.center())\n            m300.blow_out()\n            m300.blow_out()\n        m300.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Sample ID,Slot number,Rack position,Source_pickup_height_from_top,Wellplate A position,Wellplate A well position,Wellplate B position,Wellplate B well position\nWater,1,1,41,3,A1,6,A1",
            "label": "Input CSV File",
            "name": "csv_file",
            "type": "textFile"
        },
        {
            "default": 30,
            "label": "Sample Volume",
            "name": "sample_vol",
            "type": "int"
        },
        {
            "label": "Acetonitrile Transfer",
            "name": "mecn_transfer",
            "options": [
                {
                    "label": "Yes",
                    "value": true
                },
                {
                    "label": "No",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Single Channel GEN2 Mount Position",
            "name": "p300_mount",
            "options": [
                {
                    "label": "Left",
                    "value": "left"
                },
                {
                    "label": "Right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 Multi Channel GEN2 Mount Position",
            "name": "m300_mount",
            "options": [
                {
                    "label": "Right",
                    "value": "right"
                },
                {
                    "label": "Left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 6,
            "label": "Sample Aspiration Flow Rate (uL/s)",
            "name": "asp_rate",
            "type": "float"
        },
        {
            "default": 6,
            "label": "Sample Dispense Flow Rate (uL/s)",
            "name": "disp_rate",
            "type": "float"
        },
        {
            "default": 10,
            "label": "MeCN Aspiration Flow Rate (uL/s)",
            "name": "asp_rate_multi",
            "type": "float"
        },
        {
            "default": 10,
            "label": "MeCN Dispense Flow Rate (uL/s)",
            "name": "disp_rate_multi",
            "type": "float"
        },
        {
            "label": "Use Temperature Module for plates on 3 (and) 6?",
            "name": "temp_mod",
            "options": [
                {
                    "label": "Yes, use",
                    "value": true
                },
                {
                    "label": "No, do not use",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 12.5,
            "label": "Dispense Height in Destination Well",
            "name": "disp_height",
            "type": "int"
        },
        {
            "default": 10,
            "label": "PL Blowout Height",
            "name": "pl_blowout_height",
            "type": "int"
        },
        {
            "default": 10,
            "label": "Airgap (microliters)",
            "name": "airgap",
            "type": "int"
        },
        {
            "default": 90,
            "label": "MeCN Volume",
            "name": "mecn_volume",
            "type": "int"
        },
        {
            "default": 1,
            "label": "Reservoir Column (1-12)",
            "name": "reservoir_loc",
            "type": "int"
        },
        {
            "default": 3,
            "label": "MeCN Dilution Location",
            "name": "mecn_dil_loc",
            "type": "int"
        },
        {
            "default": 1,
            "label": "Multi-Channel starting tip pick-up column (1-12)",
            "name": "starting_tip_col",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 24 Tube Rack with Eppendorf 2 mL Safe-Lock Snapcap on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on Temperature Module GEN2 on 6",
            "share": false,
            "slot": "6",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "NEST 12 Well Reservoir 15 mL on 7",
            "share": false,
            "slot": "7",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Sakib <sakib.hossain@opentrons.com>",
        "description": "Custom Protocol Request",
        "protocolName": "Custom CSV Mass Spec Sample Prep"
    },
    "modules": []
}