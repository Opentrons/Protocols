{
    "content": "import math\nimport csv\nfrom datetime import datetime\nfrom opentrons.protocol_api.labware import OutOfTipsError\n\nmetadata = {\n    'protocolName': '''Custom Serial Dilution for Protein Quantification''',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'apiLevel': '2.13'\n}\n\n\ndef run(ctx):\n\n    # get parameter values from json above\n    [labware_reservoir, deadvol_reservoir,\n     uploaded_csv] = get_values(  # noqa: F821\n      'labware_reservoir', 'deadvol_reservoir', 'uploaded_csv')\n\n    ctx.set_rail_lights(True)\n    ctx.delay(seconds=10)\n\n    # input csv - dilution scheme (1-6) assigned for 1-48 samples\n    csvrows = [line for line in csv.DictReader(uploaded_csv.splitlines())]\n\n    for index, sample in enumerate(csvrows):\n\n        if not 1 <= int(sample['dilution scheme']) <= 6:\n            raise Exception('Dilution scheme must be 1-6.')\n\n        if not index:\n            if not int(sample['sample number']) == 1:\n                raise Exception(\n                 'Sample numbers in input csv file must start with 1.')\n        else:\n            if not int(\n             sample['sample number']) == int(\n             csvrows[index-1]['sample number']) + 1:\n                raise Exception(\n                 'Invalid series of sample numbers in input csv file.')\n            if not 2 <= int(sample['sample number']) <= 48:\n                raise Exception(\n                 'Sample number in input csv file must be 1-48.')\n\n    # filter tips, p20 multi, p300 multi\n    tips20 = [\n     ctx.load_labware(\"opentrons_96_filtertiprack_20ul\", str(\n      slot)) for slot in [10]]\n    tips300 = [\n     ctx.load_labware(\"opentrons_96_filtertiprack_200ul\", str(\n      slot)) for slot in [11]]\n    p20s = ctx.load_instrument(\n        \"p20_single_gen2\", 'left', tip_racks=tips20)\n    p300m = ctx.load_instrument(\n        \"p300_multi_gen2\", 'right', tip_racks=tips300)\n\n    # yield list chunks of size n\n    def create_chunks(list_name, n):\n        for i in range(0, len(list_name), n):\n            yield list_name[i:i+n]\n\n    # return liquid height in a well\n    def liq_height(well, effective_diameter=None):\n        if well.diameter:\n            if effective_diameter:\n                radius = effective_diameter / 2\n            else:\n                radius = well.diameter / 2\n            csa = math.pi*(radius**2)\n        else:\n            csa = well.length*well.width\n        return well.liq_vol / csa\n\n    def slow_tip_withdrawal(pipette, well_location, to_center=False):\n        if pipette.mount == 'right':\n            axis = 'A'\n        else:\n            axis = 'Z'\n        ctx.max_speeds[axis] = 10\n        if to_center is False:\n            pipette.move_to(well_location.top())\n        else:\n            pipette.move_to(well_location.center())\n        ctx.max_speeds[axis] = None\n\n    # notify user to replenish tips\n    def pick_up_or_refill(pip):\n        try:\n            pip.pick_up_tip()\n        except OutOfTipsError:\n            ctx.pause(\n             \"\"\"\\n***\\nPlease Refill the {} Tip Boxes\n             and Empty the Tip Waste\\n***\\n\"\"\".format(pip))\n            pip.reset_tipracks()\n            pip.pick_up_tip()\n\n    # list assigned samples for each scheme (chunks of 8, last one may be < 8)\n    dilutions = {\n     num+1: [*create_chunks([int(sample[\n      'sample number']) for sample in csvrows if int(sample[\n       'dilution scheme']) == num+1], 8)] for num in range(6)}\n\n    # sample racks\n    sample_racks = [\n     ctx.load_labware(\n      'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n      str(slot), 'sample rack') for slot in [\n      1, 4][:math.ceil(len(csvrows) / 24)]]\n\n    sample_positions = [\n     well for rack in sample_racks for well in rack.wells()][:len(csvrows)]\n\n    sample_cols_per_scheme = [len(dilutions[key+1]) for key in range(6)]\n\n    for scheme in range(6):\n        ctx.comment(\n         \"\"\"\\n***\\nScheme {}, preparing dilutions\n         for {} columns of samples\\n***\\n\"\"\".format(\n          str(scheme+1), sample_cols_per_scheme[scheme]))\n\n    diluent = ctx.load_labware(labware_reservoir, '8', 'diluent').wells()[0]\n\n    sample_cols_total = sum(sample_cols_per_scheme)\n\n    # up to 4 dilution plates (4 consecutive columns per chunk of 8 samples)\n    dilution_plates = [\n     ctx.load_labware(\n      'nest_96_wellplate_2ml_deep', str(slot), 'dilution plate') for slot in [\n      2, 3, 5, 6][:math.ceil(sample_cols_total / 3)]]\n\n    # to yield 4-column chunk as next dilution destination\n    def thirds():\n\n        lst = [\n         chunk for plate in dilution_plates for chunk in create_chunks(\n          plate.columns(), 4)]\n\n        yield from lst\n\n    dest = thirds()\n\n    # dilution scheme parameters\n    params = {\n     1: {\"diluent vol\": [990, 450, 150],\n         \"sample vol\": 10,\n         \"mix count\": 10,\n         \"serial vol\": [50, 150]},\n     2: {\"diluent vol\": [990, 150],\n         \"sample vol\": 10,\n         \"mix count\": 10,\n         \"serial vol\": [150]},\n     3: {\"diluent vol\": [490, 450, 150],\n         \"sample vol\": 10,\n         \"mix count\": 5,\n         \"serial vol\": [50, 150]},\n     4: {\"diluent vol\": [380, 450, 100],\n         \"sample vol\": 20,\n         \"mix count\": 3,\n         \"serial vol\": [50, 100]},\n     5: {\"diluent vol\": [990, 450, 450, 100],\n         \"sample vol\": 10,\n         \"mix count\": 10,\n         \"serial vol\": [50, 50, 100]},\n     6: {\"diluent vol\": [490, 450, 450, 100],\n         \"sample vol\": 10,\n         \"mix count\": 5,\n         \"serial vol\": [50, 50, 100]}\n         }\n\n    # diluent reservoir fill volume - calculate and notify\n    diluent.liq_vol = 0\n    for key in params.keys():\n        numsamps = 0\n        for _ in dilutions[key]:\n            numsamps += len(_)\n        diluent.liq_vol += numsamps*sum(params[key]['diluent vol'])\n    diluent.liq_vol += deadvol_reservoir\n    ctx.pause(\n     \"\"\"\\n***\\nEnsure reservoir is filled with\n     {} mL diluent. Resume\\n***\\n\"\"\".format(\n      diluent.liq_vol / 1000))\n\n    output = []  # to collect destination location for each sample\n\n    # to yield next tip column\n    def tipcolumns():\n\n        yield from tips300[0].columns()\n\n    tipcol = tipcolumns()\n\n    # for each dilution scheme and all of its assigned samples\n    for key, value in dilutions.items():\n\n        # for each column of 8 samples (last column may be < 8)\n        for samplenums in value:\n\n            # yield 4-column destination for dilutions\n            destination = next(dest)\n\n            # destination wells - set current vol to 0\n            for column in destination:\n\n                column[0].liq_vol = 0\n\n            # notify user - current scheme, assigned samples, destination\n            ctx.comment(\n             \"\\n***\\nCurrent Dilution Scheme: {}\\n***\\n\".format(key))\n            ctx.comment(\"\\n***\\nAssigned Samples: {}\\n***\\n\".format(value))\n            ctx.comment(\"\\n***\\nCurrent Samples: {}\\n***\\n\".format(samplenums))\n            ctx.comment(\n             \"\\n***\\nCurrent Destination: {}\\n***\\n\".format(destination))\n\n            # to pick up one tip for each sample (last column may be < 8)\n            tipcolindex = abs(len(samplenums)-8)\n\n            col = next(tipcol)\n\n            p300m.pick_up_tip(col[tipcolindex])\n\n            # diluent transfer to destination columns\n            for vol, column in zip(params[key]['diluent vol'], destination):\n\n                diluent.liq_vol -= vol  # increment reservoir volume\n\n                ht = liq_height(\n                 diluent) - 3 if liq_height(\n                 diluent) - 3 > 1 else 1\n\n                reps = math.ceil(vol / 200)\n\n                v = vol / reps\n\n                for rep in range(reps):\n\n                    p300m.aspirate(v, diluent.bottom(ht))\n                    ctx.delay(seconds=1)\n                    slow_tip_withdrawal(p300m, diluent)\n\n                    p300m.dispense(v, column[0].bottom(1))\n                    ctx.delay(seconds=1)\n                    slow_tip_withdrawal(p300m, column[0])\n                    p300m.touch_tip(radius=0.9, v_offset=-2, speed=10)\n                    column[0].liq_vol += v  # increment current dest vol\n\n            # sample to wells of 1st column of 4-column destination chunk\n            for samplenum, d in zip(\n             samplenums, [well for well in destination[0]]):\n\n                p20s.pick_up_tip()\n\n                sampvol = params[key]['sample vol']\n\n                source = sample_positions[samplenum - 1]\n\n                ht_disp = liq_height(destination[0][0])\n\n                p20s.mix(5, sampvol, source.bottom(1))\n                p20s.aspirate(sampvol, source.bottom(1))\n                p20s.touch_tip(radius=0.75, v_offset=-2, speed=10)\n\n                # dispense to top of liquid\n                p20s.dispense(sampvol, d.bottom(ht_disp))\n                p20s.mix(5, sampvol, d.bottom(1))\n                ctx.delay(seconds=1)\n                slow_tip_withdrawal(p20s, d)\n                p20s.touch_tip(radius=0.85, v_offset=-2, speed=10)\n\n                output.append((samplenum, str(d)))  # dest location for output\n\n                p20s.drop_tip()\n\n            # serial transfer\n            tfervols = params[key]['serial vol']\n\n            tfercount = len(tfervols)\n\n            for i, vol, column in zip(\n             [*range(tfercount)], tfervols, destination):\n\n                # tip height - 3/4 of the way down liquid column\n                mixht = 0.25*liq_height(column[0])\n\n                # premix\n                for rep in range(params[key]['mix count']):\n                    p300m.aspirate(100, column[0].bottom(mixht))\n                    p300m.dispense(100, column[0].bottom(mixht))\n\n                p300m.aspirate(vol, column[0].bottom(1))\n                ctx.delay(seconds=1)\n                slow_tip_withdrawal(p300m, column[0])\n                p300m.touch_tip(radius=0.75, v_offset=-2, speed=10)\n\n                disploc = destination[destination.index(column)+1][0]\n                p300m.dispense(vol, disploc.bottom(1))\n\n                if i == tfercount - 1:\n\n                    # final postmix in last column\n                    p300m.mix(4, 100, disploc.bottom(mixht))\n                    ctx.delay(seconds=1)\n                    slow_tip_withdrawal(p300m, disploc)\n                    p300m.touch_tip(radius=0.75, v_offset=-2, speed=10)\n\n            p300m.drop_tip()\n\n    # output file - original csv content plus destination for each sample\n    for row, dest in zip(csvrows, sorted(output)):\n\n        row['destination'] = dest[1]\n\n    \"\"\"\n    write output to jupyter notebook directory on OT-2 raspberry pi\n    for file download via web browser [OT-2 IP address]:48888\n    \"\"\"\n\n    # unique filename to avoid accidental over writing\n    current = datetime.now()\n    file = 'var/lib/jupyter/notebooks/outputfile{}.csv'.format(\n     str(current.microsecond))\n\n    if not ctx.is_simulating():\n        with open(file, 'w', newline='') as outfile:\n            writer = csv.DictWriter(outfile, fieldnames=csvrows[0].keys())\n            writer.writeheader()\n            for row in csvrows:\n                writer.writerow(row)\n\n    ctx.comment(\"\"\"\\n***\\nfinished - use the Opentrons app (click jupyter link)\n    to locate and download the output csv file\\n***\\n\"\"\")\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "label": "Labware for Diluent Reservoir",
            "name": "labware_reservoir",
            "options": [
                {
                    "label": "axygen_1_reservoir_90ml",
                    "value": "axygen_1_reservoir_90ml"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 10000,
            "label": "Diluent Reservoir Dead Volume (uL)",
            "name": "deadvol_reservoir",
            "type": "int"
        },
        {
            "default": "sample number,dilution scheme\n1,1\n2,1\n3,3\n4,4\n5,5\n6,6\n7,6\n8,6\n9,3\n10,4\n11,5\n12,6\n",
            "label": "Upload CSV Input File (Upload CSV-formatted Excel File-with formatting of data values and file identical to example)",
            "name": "uploaded_csv",
            "type": "textFile"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "sample rack on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "dilution plate on 2",
            "share": false,
            "slot": "2",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "dilution plate on 3",
            "share": false,
            "slot": "3",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "diluent on 8",
            "share": false,
            "slot": "8",
            "type": "axygen_1_reservoir_90ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "protocolName": "Custom Serial Dilution for Protein Quantification"
    },
    "modules": []
}