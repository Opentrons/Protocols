{
    "content": "from opentrons.protocol_api.labware import Well, OutOfTipsError\n# import opentrons.types\nfrom opentrons import types\n# import from python types module\nfrom types import MethodType\nimport math\n\nmetadata = {\n    'protocolName': '''LC-MS Sample Prep: Standards/Calibration Curves/\n                       Patient Samples''',\n    'author': 'Steve Plonk <protocols@opentrons.com>',\n    'apiLevel': '2.9'\n}\n\n\ndef run(ctx):\n\n    # get the parameter values from json above\n    [count_samples, full_volume, include_standards_only,\n     labware_tuberack, clearance_meoh_water, clearance_dil_dispense,\n     touch_radius, touch_v_offset, track_start, clearance_tfa, clearance_mecn,\n     mix_reps, vol_dead] = get_values(  # noqa: F821\n      'count_samples', 'full_volume', 'include_standards_only',\n      'labware_tuberack', 'clearance_meoh_water', 'clearance_dil_dispense',\n      'touch_radius', 'touch_v_offset', 'track_start', 'clearance_tfa',\n      'clearance_mecn', 'mix_reps', 'vol_dead')\n\n    ctx.delay(seconds=10)\n    ctx.set_rail_lights(True)\n\n    if not 12 <= count_samples <= 27:\n        raise Exception('Invalid number of samples (must be 12-27).')\n\n    # tips, p20 multi gen2, p300 multi gen2\n    tips20 = [ctx.load_labware(\n     \"opentrons_96_tiprack_20ul\", str(slot)) for slot in [2, 3]]\n    p20s = ctx.load_instrument(\n        \"p20_single_gen2\", 'left', tip_racks=tips20)\n    tips300 = [ctx.load_labware(\n     \"opentrons_96_tiprack_300ul\", str(slot)) for slot in [6, 9]]\n    p300s = ctx.load_instrument(\n        \"p300_single_gen2\", 'right', tip_racks=tips300)\n\n    \"\"\"\n    helper functions\n    \"\"\"\n    def pick_up_or_refill(current_pipette):\n        try:\n            current_pipette.pick_up_tip()\n        except OutOfTipsError:\n            pause_attention(\n             \"\"\"Please Refill the {} Tip Boxes\n                and Empty the Tip Waste.\"\"\".format(current_pipette))\n            current_pipette.reset_tipracks()\n            current_pipette.pick_up_tip()\n\n    def pause_attention(message):\n        ctx.set_rail_lights(False)\n        ctx.delay(seconds=10)\n        ctx.pause(message)\n        ctx.set_rail_lights(True)\n\n    def slow_tip_withdrawal(current_pipette, well_location, to_center=False):\n        if current_pipette.mount == 'right':\n            axis = 'A'\n        else:\n            axis = 'Z'\n        ctx.max_speeds[axis] = 10\n        if to_center is False:\n            current_pipette.move_to(well_location.top())\n        else:\n            current_pipette.move_to(well_location.center())\n        ctx.max_speeds[axis] = None\n\n    def meoh_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 92.86\n            current_pipette.flow_rate.dispense = 100\n            current_pipette.flow_rate.blow_out = 100\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 7.56\n            current_pipette.flow_rate.dispense = 22\n            current_pipette.flow_rate.blow_out = 22\n\n    def plasma_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 60\n            current_pipette.flow_rate.dispense = 60\n            current_pipette.flow_rate.blow_out = 60\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 3.5\n            current_pipette.flow_rate.dispense = 3.5\n            current_pipette.flow_rate.blow_out = 3.5\n\n    def default_flow_rates(current_pipette):\n        if (current_pipette.name == 'p300_multi_gen2' or\n           current_pipette.name == 'p300_single_gen2'):\n            current_pipette.flow_rate.aspirate = 92.86\n            current_pipette.flow_rate.dispense = 92.86\n            current_pipette.flow_rate.blow_out = 92.86\n        elif (current_pipette.name == 'p20_multi_gen2' or\n              current_pipette.name == 'p20_single_gen2'):\n            current_pipette.flow_rate.aspirate = 7.56\n            current_pipette.flow_rate.dispense = 7.56\n            current_pipette.flow_rate.blow_out = 7.56\n\n    # extended well class to track liquid volume and height\n    class WellH(Well):\n        def __init__(self, well, min_height=5, comp_coeff=1.15,\n                     current_volume=0):\n            super().__init__(well._impl)\n            self.well = well\n            # specified minimum well bottom clearance\n            self.min_height = min_height\n            self.comp_coeff = comp_coeff\n            # specified starting volume in ul\n            self.current_volume = current_volume\n            # cross sectional area\n            if self.diameter is not None:\n                self.radius = self.diameter/2\n                cse = math.pi*(self.radius**2)\n            elif self.length is not None:\n                cse = self.length*self.width\n            else:\n                cse = None\n            self.cse = cse\n            # initial liquid level in mm from start vol\n            if cse:\n                self.height = (current_volume/cse)\n            else:\n                raise Exception(\"\"\"Labware definition must\n                supply well radius or well length and width.\"\"\")\n            if self.height < min_height:\n                self.height = min_height\n            elif self.height > well.parent.highest_z:\n                raise Exception(\"\"\"Specified liquid volume\n                can not exceed the height of the labware.\"\"\")\n\n        def height_dec(self, vol, ppt, bottom=False):\n            # decrement height (mm)\n            dh = (vol/self.cse)*self.comp_coeff\n            # tip immersion (mm) as fraction of tip length\n            mm_immersed = 0.15*ppt._tip_racks[0].wells()[0].depth\n            # decrement til target reaches specified min clearance\n            self.height = self.height - dh if (\n             (self.height - dh - mm_immersed) > self.min_height\n             ) else self.min_height + mm_immersed\n            self.current_volume = self.current_volume - vol if (\n             self.current_volume - vol > 0) else 0\n            tip_ht = self.height - mm_immersed if bottom is False else bottom\n            return(self.well.bottom(tip_ht))\n\n        def height_inc(self, vol, top=False):\n            # increment height (mm)\n            ih = (vol/self.cse)*self.comp_coeff\n            # keep calculated liquid ht between min clearance and well depth\n            self.height = self.min_height if (\n             self.height < self.min_height) else self.height\n            self.height = (self.height + ih) if (\n             (self.height + ih) < self.depth) else self.depth\n            # increment\n            self.current_volume += vol\n            if top is False:\n                tip_ht = self.height\n                return(self.well.bottom(tip_ht))\n            else:\n                return(self.well.top())\n\n    \"\"\"\n    **custom tube rack definition**\n    **theoretically extends eppendorfs**\n    **to 6 mm above the top of the rack**\n    **to match height of filters**\n    **locations relative to top and center coded accordingly**\n    \"\"\"\n\n    ctx.comment(\"\"\"\n    tube rack in deck slot 1:\n    A1-A6,B1-B6 - 200 uM unlabeled solution\n    followed by 11 serial 1:2 dilutions\n    C1-C3 three pooled samples (if included - or 1st 3 pt samples)\n    C4-C6 amicon filters (for pooled samples if included - or 1st 3 pt samples)\n    D1 - 100 uM labeled solution\n    D2 - 1:1 MeOH:Water\n    D3 - 100 mM NEM\n    D4 - Golden Plasma\n    D5 - 4:1 MeCN:Water\n    reservoir in deck slot 5:\n    A1 - 10 mL TFA in MeCN\n    A2 - 10 mL TFA in MeCN\n    A3 - 10 mL TFA in MeCN\n    \"\"\")\n\n    # reagents and dilutions\n    tuberack = ctx.load_labware(\n     labware_tuberack, '1', 'Tube Rack')\n    unlabeled_soln_200um, *dilutions = [\n     well for row in tuberack.rows() for well in row][:12]\n    labeled_soln_100um, meoh_water, nem_100mm, golden_plasma, mecn = [\n     tuberack.wells_by_name()[well] for well in ['D1', 'D2', 'D3', 'D4', 'D5']]\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '5', 'Reservoir')\n\n    # initial state for reservoir wells\n    reservoir.wells_h_list = [WellH(\n     well, min_height=clearance_tfa, current_volume=10000\n     ) if index < 3 else WellH(\n     well, min_height=clearance_tfa, current_volume=0\n     ) for index, well in enumerate(reservoir.wells())]\n\n    def wells_by_name_h(self):\n        return {well.well_name: well for well in self.wells_h_list}\n\n    # bind additional methods to labware objects\n    for labware_object in [reservoir]:\n        for method in [wells_by_name_h]:\n            setattr(\n             labware_object, method.__name__,\n             MethodType(method, labware_object))\n\n    tfa = [reservoir.wells_by_name_h()[well] for well in ['A1', 'A2', 'A3']]\n\n    def aspirate_h(self, vol, source, rate=1, bottom=False):\n        self.aspirate(\n         vol, source.height_dec(vol, self, bottom=bottom), rate=rate)\n\n    # bind additional methods to pipette objects\n    for pipette_object in [p300s]:\n        for method in [aspirate_h]:\n            setattr(\n             pipette_object, method.__name__,\n             MethodType(method, pipette_object))\n\n    def tfa_wells():\n        yield from tfa\n\n    tfa_well = tfa_wells()\n\n    tfa_source = next(tfa_well)\n\n    # samples\n    sample_tuberack = ctx.load_labware(\n     labware_tuberack, '4', 'Sample Tube Rack')\n    [*samples] = [well for row in sample_tuberack.rows() for well in row][:12]\n    [*amicon_filters] = [\n     well for row in sample_tuberack.rows() for well in row][12:]\n\n    # samples if included\n    if not include_standards_only:\n        ctx.comment(\"\"\"\n        *** {} SAMPLES INCLUDED IN THIS RUN***\n\n        tube rack in deck slot 1:\n        C1-C3 first three samples\n        C4-C6 corresponding amicon filters\n\n        tube rack in deck slot 7:\n        A1-A6,B1-B6 next twelve samples\n        C1-C6,D1-D6 corresponding amicon filters\n\n        tube rack in deck slot 10:\n        A1-A6,B1-B6 last twelve samples\n        C1-C6,D1-D6 corresponding amicon filters\n        \"\"\".format(count_samples))\n\n        # first three samples (these may or may not be pooled samples)\n        [*samples_pooled] = [\n         well for row in tuberack.rows() for well in row][12:15]\n        [*amicon_filters_pooled] = [\n         well for row in tuberack.rows() for well in row][15:18]\n\n        # remaining patient samples (total sample number between 12 and 27)\n        [*pt_tuberacks] = [\n         ctx.load_labware(labware_tuberack, str(slot),\n                          'Patient Tube Rack') for slot in [7, 10]]\n\n        pt_samples = []\n        for rack in pt_tuberacks:\n            new = [well for row in rack.rows() for well in row][:12]\n            pt_samples.extend(new)\n\n        ptsamples = pt_samples[:count_samples - 3]\n\n        pt_amicon_filters = []\n        for rack in pt_tuberacks:\n            new = [well for row in rack.rows() for well in row][12:]\n            pt_amicon_filters.extend(new)\n\n        ptfilters = pt_amicon_filters[:count_samples - 3]\n\n    else:\n        ctx.comment(\"\"\"\n        ***THIS RUN INCLUDES STANDARDS ONLY***\n        ***NO SAMPLES INCLUDED IN THIS RUN***\n        tube rack in deck slot 1:\n        C1-C3 Empty\n        C4-C6 Empty\n        \"\"\")\n\n    ctx.delay(seconds=10)\n    pause_attention(\"\"\"\n    Set up: Unlabeled 200 uM soln in A1 of tuberack deck slot 1,\n    1:2 dilutions in A2-A6,B1-B6 in tuberack slot 1,\n    1:1 MeOH:Water in D2 in tuberack slot 1\n    Labeled 100 uM soln in D1 tuberack slot 1\n    100 mM NEM in D3 tuberack slot 1\n    Golden Plasma in D4 tuberack slot 1\n    4:1 acetonitrile:water in D5 of tuberack slot 1\n    12 sample tubes in A1-A6, B1-B6 of tuberack deck slot 4\n    12 amicon filters in C1-C6, D1-D6 of tuberack deck slot 4\n    reservoir with TFA in MeCN and MeCN:Water in deck slot 5\n    p20 tips in slots 2 and 3\n    p300 tips in slot 6 and 9.\n    \"\"\")\n\n    if not full_volume:\n        div = 2\n        ctx.comment(\"\"\"\n        ****half-volumes will be used****\n        \"\"\")\n    else:\n        div = 1\n\n    ctx.comment(\"\"\"\n    add 20 ul 1:1 MeOH:Water\n    to make 11 serial dilutions 1:2 from unlabelled 200 um solution in A1\n\n    liquid handling method for methanol:water:\n    fast flow rate for blow out\n    15 ul air gap\n    delayed blowout after dispense (let meoh fall to bottom of tip first)\n    repeat blowout (for complete dispense)\n    tip touch\n    \"\"\")\n\n    pip = p300s\n    meoh_flow_rates(pip)\n    for index, dilution in enumerate(dilutions):\n        pip.pick_up_tip()\n        pip.aspirate(20, meoh_water.bottom(clearance_meoh_water))\n        pip.air_gap(5)\n        pip.dispense(\n         (20)+(5), dilution.bottom(clearance_dil_dispense))\n        for rep in range(3):\n            if rep > 0:\n                pip.aspirate(\n                 20, dilution.bottom(10))\n            ctx.delay(seconds=1)\n            pip.blow_out(dilution.bottom(10))\n        pip.touch_tip(radius=touch_radius, v_offset=touch_v_offset, speed=20)\n        if index == 0:\n            source = unlabeled_soln_200um.bottom(1)\n        else:\n            source = dilutions[index-1].bottom(1)\n        pip.aspirate(20, source)\n        pip.air_gap(5)\n        pip.dispense(\n         (20)+(5), dilution.bottom(clearance_dil_dispense))\n        pip.mix(mix_reps, 20, dilution.bottom(clearance_dil_dispense))\n        for rep in range(3):\n            if rep > 0:\n                pip.aspirate(\n                 20, dilution.bottom(10))\n            ctx.delay(seconds=1)\n            pip.blow_out(dilution.bottom(10))\n        pip.touch_tip(radius=touch_radius, v_offset=touch_v_offset, speed=20)\n        pip.drop_tip()\n    default_flow_rates(pip)\n\n    ctx.comment(\"\"\"\n    add {} ul Golden Plasma to each of 12 sample tubes\n\n    use liquid handling method for plasma\n    aspirate extra volume\n    reduced aspirate and dispense speeds\n    slow tip withdrawal from plasma\n    avoid over-immersion of tip (liquid height tracking)\n    \"\"\".format(str(90 / div)))\n\n    plasma_flow_rates(p300s)\n    p300s.pick_up_tip()\n    starting_clearance = track_start\n    tracking_clearance = starting_clearance\n    ending_clearance = 2\n    increment = (starting_clearance - ending_clearance) / len(samples)\n    p300s.aspirate(35 / div, golden_plasma.bottom(starting_clearance))\n    for sample in samples:\n        p300s.aspirate(90 / div, golden_plasma.bottom(tracking_clearance))\n        slow_tip_withdrawal(p300s, golden_plasma)\n        if tracking_clearance >= ending_clearance + increment:\n            tracking_clearance -= increment\n        else:\n            tracking_clearance = ending_clearance\n        p300s.dispense(90 / div, sample.bottom(2))\n        slow_tip_withdrawal(p300s, sample)\n    p300s.drop_tip()\n    default_flow_rates(p300s)\n\n    ctx.comment(\"\"\"\n    transfer {} ul of each serial dilution to the corresponding sample tube\n    transfer {} ul 1:1 MeOH:Water to pooled and patient samples (if included)\n    vortex 5 min\n    use liquid handling method for MeOH:Water\n    \"\"\".format(str(10 / div), str(10 / div)))\n    meoh_flow_rates(p20s)\n    dilutions.insert(0, unlabeled_soln_200um)\n    for index, dilution in enumerate(dilutions):\n        p20s.pick_up_tip()\n        p20s.aspirate(10 / div, dilution.bottom(clearance_dil_dispense))\n        p20s.air_gap(2)\n        p20s.dispense((10 / div)+2, samples[index].bottom(3))\n        slow_tip_withdrawal(p20s, samples[index], to_center=True)\n        for rep in range(3):\n            if rep > 0:\n                p20s.aspirate(\n                 10, samples[index].center().move(types.Point(x=0, y=0, z=-3)))\n            ctx.delay(seconds=1)\n            p20s.blow_out(\n             samples[index].center().move(types.Point(x=0, y=0, z=-3)))\n        p20s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n        p20s.drop_tip()\n    default_flow_rates(p20s)\n\n    if not include_standards_only:\n        meoh_flow_rates(p20s)\n        for pooled_sample in samples_pooled:\n            p20s.pick_up_tip()\n            p20s.aspirate(10 / div, meoh_water.bottom(clearance_meoh_water))\n            p20s.air_gap(2)\n            p20s.dispense((10 / div)+2, pooled_sample.bottom(3))\n            slow_tip_withdrawal(p20s, pooled_sample, to_center=True)\n            for rep in range(3):\n                if rep > 0:\n                    p20s.aspirate(\n                     10, pooled_sample.center().move(\n                      types.Point(x=0, y=0, z=-3)))\n                ctx.delay(seconds=1)\n                p20s.blow_out(\n                 pooled_sample.center().move(types.Point(x=0, y=0, z=-3)))\n            p20s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n            p20s.drop_tip()\n        default_flow_rates(p20s)\n\n        meoh_flow_rates(p20s)\n        for pt_sample in ptsamples:\n            pick_up_or_refill(p20s)\n            p20s.aspirate(\n             10 / div, meoh_water.bottom(clearance_meoh_water))\n            p20s.air_gap(2)\n            p20s.dispense((10 / div)+2, pt_sample.bottom(3))\n            slow_tip_withdrawal(p20s, pt_sample, to_center=True)\n            for rep in range(3):\n                if rep > 0:\n                    p20s.aspirate(\n                     10, pt_sample.center().move(\n                      types.Point(x=0, y=0, z=-3)))\n                ctx.delay(seconds=1)\n                p20s.blow_out(\n                 pt_sample.center().move(types.Point(x=0, y=0, z=-3)))\n            p20s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n            p20s.drop_tip()\n        default_flow_rates(p20s)\n\n    pause_attention(\"Vortex samples 5 min and return.\")\n\n    ctx.comment(\"\"\"\n    add {} ul NEM to each tube\n    vortex 15 min\n    \"\"\".format(str(10 / div)))\n    if not include_standards_only:\n        for pooled_sample in samples_pooled:\n            samples.append(pooled_sample)\n\n        for pt_sample in ptsamples:\n            samples.append(pt_sample)\n\n    for sample in samples:\n        pick_up_or_refill(p20s)\n        p20s.aspirate(10 / div, nem_100mm.bottom(3))\n        p20s.dispense(10 / div, sample.bottom(3))\n        slow_tip_withdrawal(p20s, sample, to_center=True)\n        p20s.blow_out(sample.center().move(types.Point(x=0, y=0, z=-3)))\n        p20s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n        p20s.drop_tip()\n\n    pause_attention(\"Vortex tubes 15 min and return.\")\n\n    ctx.comment(\"\"\"\n    add {} ul 100 uM labelled standard to each tube\n    vortex 5 min\n    use liquid handling method for MeOH:Water\n    \"\"\".format(str(5 if div == 1 else 2)))\n    meoh_flow_rates(p20s)\n    for sample in samples:\n        pick_up_or_refill(p20s)\n        if full_volume:\n            p20s.aspirate(5, labeled_soln_100um.bottom(2))\n        else:\n            p20s.aspirate(2, labeled_soln_100um.bottom(2))\n        p20s.air_gap(2)\n        if full_volume:\n            p20s.dispense(7, sample.bottom(3))\n        else:\n            p20s.dispense(4, sample.bottom(3))\n        slow_tip_withdrawal(p20s, sample, to_center=True)\n        for rep in range(3):\n            if rep > 0:\n                p20s.aspirate(\n                 10, sample.center().move(types.Point(x=0, y=0, z=-3)))\n            ctx.delay(seconds=1)\n            p20s.blow_out(sample.center().move(types.Point(x=0, y=0, z=-3)))\n        p20s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n        p20s.drop_tip()\n    default_flow_rates(p20s)\n\n    pause_attention(\"Vortex tubes 5 min and return.\")\n\n    ctx.comment(\"\"\"\n    add {} ul TFA in acetonitrile to each tube\n    vortex 10 min\n    spin 15 min\n    use same liquid handling method as for MeOH:Water\n    \"\"\".format(str(540 / div)))\n    meoh_flow_rates(p300s)\n    for sample in samples:\n        if full_volume:\n            for rep in range(2):\n                pick_up_or_refill(p300s)\n                if tfa_source.current_volume < vol_dead:\n                    try:\n                        tfa_source = next(tfa_well)\n                    except StopIteration:\n                        ctx.comment(\"TFA supply is exhausted\")\n                        ctx.pause(\"\"\"Please replenish TFA in reservoir well A3\n                                     and resume\"\"\")\n                p300s.aspirate_h(270 / div, tfa_source)\n                p300s.air_gap(15)\n                p300s.dispense((270 / div)+15, sample.bottom(3))\n                p300s.move_to(sample.top(-12))\n                for rep in range(3):\n                    if rep > 0:\n                        p300s.aspirate(180, sample.top(-12))\n                    ctx.delay(seconds=1)\n                    p300s.blow_out(sample.top(-12))\n                p300s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n                p300s.drop_tip()\n        else:\n            for rep in range(1):\n                pick_up_or_refill(p300s)\n                if tfa_source.current_volume < vol_dead:\n                    try:\n                        tfa_source = next(tfa_well)\n                    except StopIteration:\n                        ctx.comment(\"TFA supply is exhausted\")\n                        ctx.pause(\"\"\"Please replenish TFA in reservoir well A3\n                                     and resume\"\"\")\n                p300s.aspirate_h(270, tfa_source)\n                p300s.air_gap(15)\n                p300s.dispense((270)+15, sample.bottom(3))\n                p300s.move_to(sample.top(-12))\n                for rep in range(3):\n                    if rep > 0:\n                        p300s.aspirate(180, sample.top(-12))\n                    ctx.delay(seconds=1)\n                    p300s.blow_out(sample.top(-12))\n                p300s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n                p300s.drop_tip()\n\n    default_flow_rates(p300s)\n\n    pause_attention(\"Vortex tubes 10 min, spin 15 min, and return.\")\n\n    ctx.comment(\"\"\"\n    transfer {} ul sup from each tube to Amicon filter\n    spin 2.5 hours\n    dry in speedvac aqueous dry setting 1.5 hours\n    return\n    resuspend in 4:1 acetonitrile:water\n    use same liquid handling method as for MeOH:Water\n    \"\"\".format(str(500 / div)))\n    if not include_standards_only:\n        for pooled_filter in amicon_filters_pooled:\n            amicon_filters.append(pooled_filter)\n\n        for pt_filter in ptfilters:\n            amicon_filters.append(pt_filter)\n\n    for index, sample in enumerate(samples):\n        pick_up_or_refill(p300s)\n        meoh_flow_rates(p300s)\n        if full_volume:\n            for rep in range(2):\n                p300s.aspirate(250 / div, sample.bottom(round(16/(rep + 1)-8)))\n                p300s.air_gap(15)\n                p300s.dispense((250 / div)+15, amicon_filters[index].top())\n                for rep in range(3):\n                    if rep > 0:\n                        p300s.aspirate(\n                         180, amicon_filters[index].top())\n                    ctx.delay(seconds=1)\n                    p300s.blow_out(amicon_filters[index].top())\n                p300s.touch_tip(radius=0.75, v_offset=-2, speed=20)\n            p300s.drop_tip()\n        else:\n            for rep in range(1):\n\n                p300s.aspirate(250, sample.bottom(round(16/(rep + 1))-8))\n                p300s.air_gap(15)\n                p300s.dispense((250)+15, amicon_filters[index].top())\n                for rep in range(3):\n                    if rep > 0:\n                        p300s.aspirate(\n                         180, amicon_filters[index].top())\n                    ctx.delay(seconds=1)\n                    p300s.blow_out(amicon_filters[index].top())\n                p300s.touch_tip(radius=0.75, v_offset=-2, speed=20)\n            p300s.drop_tip()\n    default_flow_rates(p300s)\n\n    pause_attention(\"Spin filters 2.5 hours, dry 1.5 hours, return.\")\n\n    # filters removed (tube alone same as eppendorf) dispense .bottom(5)\n    meoh_flow_rates(p300s)\n    for filter in amicon_filters:\n        pick_up_or_refill(p300s)\n        p300s.aspirate(40, mecn.bottom(clearance_mecn))\n        p300s.air_gap(15)\n        p300s.dispense((40)+15, filter.bottom(5))\n        p300s.move_to(filter.top(-12))\n        for rep in range(3):\n            if rep > 0:\n                p300s.aspirate(180, filter.top(-12))\n            ctx.delay(seconds=1)\n            p300s.blow_out(filter.top(-12))\n        p300s.touch_tip(radius=0.75, v_offset=-8, speed=20)\n        p300s.drop_tip()\n    default_flow_rates(p300s)\n\n    pause_attention(\"Transfer to vials, load QQQ7 LC-MS, inject 5 \u03bcl.\")\n",
    "custom_labware_defs": [
        {
            "brand": {
                "brand": "filters_and_eppendorfs",
                "brandId": []
            },
            "cornerOffsetFromSlot": {
                "x": 0,
                "y": 0,
                "z": 0
            },
            "dimensions": {
                "xDimension": 127.75,
                "yDimension": 85.5,
                "zDimension": 85.55
            },
            "groups": [
                {
                    "metadata": {
                        "displayCategory": "tubeRack",
                        "wellBottomShape": "v"
                    },
                    "wells": [
                        "A1",
                        "B1",
                        "C1",
                        "D1",
                        "A2",
                        "B2",
                        "C2",
                        "D2",
                        "A3",
                        "B3",
                        "C3",
                        "D3",
                        "A4",
                        "B4",
                        "C4",
                        "D4",
                        "A5",
                        "B5",
                        "C5",
                        "D5",
                        "A6",
                        "B6",
                        "C6",
                        "D6"
                    ]
                }
            ],
            "metadata": {
                "displayCategory": "tubeRack",
                "displayName": "Filters_and_eppendorfs 24 Tube Rack 1500 \u00b5L",
                "displayVolumeUnits": "\u00b5L",
                "tags": []
            },
            "namespace": "custom_beta",
            "ordering": [
                [
                    "A1",
                    "B1",
                    "C1",
                    "D1"
                ],
                [
                    "A2",
                    "B2",
                    "C2",
                    "D2"
                ],
                [
                    "A3",
                    "B3",
                    "C3",
                    "D3"
                ],
                [
                    "A4",
                    "B4",
                    "C4",
                    "D4"
                ],
                [
                    "A5",
                    "B5",
                    "C5",
                    "D5"
                ],
                [
                    "A6",
                    "B6",
                    "C6",
                    "D6"
                ]
            ],
            "parameters": {
                "format": "irregular",
                "isMagneticModuleCompatible": false,
                "isTiprack": false,
                "loadName": "filters_and_eppendorfs_24_tuberack_1500ul",
                "quirks": []
            },
            "schemaVersion": 2,
            "version": 1,
            "wells": {
                "A1": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 18.21,
                    "y": 75.43,
                    "z": 41.65
                },
                "A2": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 38.1,
                    "y": 75.43,
                    "z": 41.65
                },
                "A3": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 57.99,
                    "y": 75.43,
                    "z": 41.65
                },
                "A4": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 77.88,
                    "y": 75.43,
                    "z": 41.65
                },
                "A5": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 97.77,
                    "y": 75.43,
                    "z": 41.65
                },
                "A6": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 117.66,
                    "y": 75.43,
                    "z": 41.65
                },
                "B1": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 18.21,
                    "y": 56.15,
                    "z": 41.65
                },
                "B2": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 38.1,
                    "y": 56.15,
                    "z": 41.65
                },
                "B3": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 57.99,
                    "y": 56.15,
                    "z": 41.65
                },
                "B4": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 77.88,
                    "y": 56.15,
                    "z": 41.65
                },
                "B5": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 97.77,
                    "y": 56.15,
                    "z": 41.65
                },
                "B6": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 117.66,
                    "y": 56.15,
                    "z": 41.65
                },
                "C1": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 18.21,
                    "y": 36.87,
                    "z": 41.65
                },
                "C2": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 38.1,
                    "y": 36.87,
                    "z": 41.65
                },
                "C3": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 57.99,
                    "y": 36.87,
                    "z": 41.65
                },
                "C4": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 77.88,
                    "y": 36.87,
                    "z": 41.65
                },
                "C5": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 97.77,
                    "y": 36.87,
                    "z": 41.65
                },
                "C6": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 117.66,
                    "y": 36.87,
                    "z": 41.65
                },
                "D1": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 18.21,
                    "y": 17.59,
                    "z": 41.65
                },
                "D2": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 38.1,
                    "y": 17.59,
                    "z": 41.65
                },
                "D3": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 57.99,
                    "y": 17.59,
                    "z": 41.65
                },
                "D4": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 77.88,
                    "y": 17.59,
                    "z": 41.65
                },
                "D5": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 97.77,
                    "y": 17.59,
                    "z": 41.65
                },
                "D6": {
                    "depth": 43.9,
                    "diameter": 10.2,
                    "shape": "circular",
                    "totalLiquidVolume": 1500,
                    "x": 117.66,
                    "y": 17.59,
                    "z": 41.65
                }
            }
        }
    ],
    "fields": [
        {
            "default": 27,
            "label": "Number of Samples (Total Number of Pooled and or Patient Samples 12-27)",
            "name": "count_samples",
            "type": "int"
        },
        {
            "label": "Use Full Volumes?",
            "name": "full_volume",
            "options": [
                {
                    "label": "Use Full Volumes",
                    "value": true
                },
                {
                    "label": "Use Half Volumes",
                    "value": false
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Include Samples (Pooled Samples and or Patient Samples)?",
            "name": "include_standards_only",
            "options": [
                {
                    "label": "YES - Standards and Samples",
                    "value": false
                },
                {
                    "label": "NO - Standards Only",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Labware for Tube Rack",
            "name": "labware_tuberack",
            "options": [
                {
                    "label": "filters_and_eppendorfs_24_tuberack_1500ul",
                    "value": "filters_and_eppendorfs_24_tuberack_1500ul"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 5,
            "label": "Aspirate and Dispense Height for MeOH:Water Tube (mm)",
            "name": "clearance_meoh_water",
            "type": "float"
        },
        {
            "default": 1,
            "label": "Dispense Height for Serial Dilutions (mm)",
            "name": "clearance_dil_dispense",
            "type": "float"
        },
        {
            "default": 0.3,
            "label": "Touch Tip Radius for Serial Dilutions (fraction of a radius)",
            "name": "touch_radius",
            "type": "float"
        },
        {
            "default": -16,
            "label": "Touch Tip Vertical Offset for Serial Dilutions (mm from top)",
            "name": "touch_v_offset",
            "type": "float"
        },
        {
            "default": 10,
            "label": "Starting Aspirate Height for Golden Plasma (mm)",
            "name": "track_start",
            "type": "int"
        },
        {
            "default": 3,
            "label": "Well Bottom Clearance for TFA in Reservoir (mm)",
            "name": "clearance_tfa",
            "type": "float"
        },
        {
            "default": 3,
            "label": "Well Bottom Clearance for Acetonitrile in Reservoir (mm)",
            "name": "clearance_mecn",
            "type": "float"
        },
        {
            "default": 10,
            "label": "Number of Mix Repetitions for Serial Dilutions",
            "name": "mix_reps",
            "type": "int"
        },
        {
            "default": 2000,
            "label": "Volume at Which to Move on to Next Reservoir Well (uL)",
            "name": "vol_dead",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Tube Rack on 1",
            "share": false,
            "slot": "1",
            "type": "filters_and_eppendorfs_24_tuberack_1500ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_tiprack_20ul"
        },
        {
            "name": "Sample Tube Rack on 4",
            "share": false,
            "slot": "4",
            "type": "filters_and_eppendorfs_24_tuberack_1500ul"
        },
        {
            "name": "Reservoir on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Patient Tube Rack on 7",
            "share": false,
            "slot": "7",
            "type": "filters_and_eppendorfs_24_tuberack_1500ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Patient Tube Rack on 10",
            "share": false,
            "slot": "10",
            "type": "filters_and_eppendorfs_24_tuberack_1500ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.9",
        "author": "Steve Plonk <protocols@opentrons.com>",
        "protocolName": "LC-MS Sample Prep: Standards/Calibration Curves/\n                       Patient Samples"
    },
    "modules": []
}