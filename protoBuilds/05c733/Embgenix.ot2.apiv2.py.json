{
    "content": "import math\nfrom opentrons.types import Point\n\nmetadata = {\n    'protocolName': 'Embgenix\u2122 PGT-A Kit: Preparation of Whole Genome \\\nAmplification',\n    'author': 'Nick <ndiehl@opentrons.com',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.12'\n}\n\n\ndef run(ctx):\n\n    [num_samples, vol_sample, m20_mount,\n     m300_mount] = get_values(  # noqa: F821\n        'num_samples', 'vol_sample', 'm20_mount', 'm300_mount')\n\n    # labware\n    tuberack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '4',\n        '1.5ml Eppendorf tuberack')\n    distribution_plate = ctx.load_labware(\n        'biorad_96_wellplate_200ul_pcr', '5',\n        'plate for mix distribution')\n    udi_plate = ctx.load_labware('biorad_96_wellplate_200ul_pcr', '6',\n                                 'UDI plate')\n    tempdeck = ctx.load_module('temperature module gen2', '7')\n    tempdeck.set_temperature(4)\n    sample_plate = tempdeck.load_labware(\n        'opentrons_96_aluminumblock_biorad_wellplate_200ul', 'sample plate')\n    tipracks20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', '8')]\n    tipracks200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', '9')]\n\n    # pipettes\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount,\n                              tip_racks=tipracks20)\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount,\n                               tip_racks=tipracks200)\n\n    # reagents\n    num_cols = math.ceil(num_samples/8)\n\n    samples_s = sample_plate.wells()[:num_samples]\n    samples_m = sample_plate.rows()[0][:num_cols]\n    dilution1_samples_s = sample_plate.wells()[num_samples:num_samples*2]\n    dilution1_samples_m = sample_plate.rows()[0][num_cols:num_cols*2]\n    dilution2_samples_s = sample_plate.wells()[num_samples*2:num_samples*3]\n    dilution2_samples_m = sample_plate.rows()[0][num_cols*3:num_cols*4]\n    ligation_samples_m = sample_plate.rows()[0][num_cols*4:num_cols*5]\n    udi_m = udi_plate.rows()[0][:num_cols]\n\n    mm_ce = tuberack.wells_by_name()['A1']\n    mm_wga = tuberack.wells_by_name()['B1']\n    wd1 = tuberack.wells_by_name()['C1']\n    wd2 = tuberack.wells_by_name()['D1']\n    mm_library_prep = tuberack.wells_by_name()['A2']\n    mm_library_amp = tuberack.wells_by_name()['B2']\n\n    def pick_up(pip, num_tips):\n        tip_cols = [col for rack in pip.tip_racks for col in rack.columns()]\n        for col in tip_cols:\n            count = 0\n            for tip in col[::-1]:\n                if tip.has_tip:\n                    count += 1\n                if count == num_tips:\n                    pip.pick_up_tip(tip)\n                    return\n        ctx.pause(f'Refill {pip.tip_racks[0].wells()[0].max_volume}uL tiprack \\\n before resuming.')\n        pip.reset_tipracks()\n        pick_up(pip, num_tips)\n\n    def wick(pip, well, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*well.diameter/2*0.8, z=3)))\n\n    def column_distribute(volume, source, distribution_column,\n                          final_destinations_s=samples_s,\n                          final_destinations_m=samples_m, mix_reps=10,\n                          new_tip=True):\n        if num_cols > 1:\n            vol_per_row = volume*num_cols*1.1  # overage\n            pip = m300 if vol_per_row > 20 else m20\n            pick_up(pip, 1)\n            wells_per_asp = math.floor(\n                pip.tip_racks[0].wells()[0].max_volume//vol_per_row)\n            num_aspirations = math.ceil(8/wells_per_asp)\n            distribution_chunks = [\n                distribution_column[i*wells_per_asp:(i+1)*wells_per_asp]\n                if i < num_aspirations - 1\n                else distribution_column[i*wells_per_asp:]\n                for i in range(num_aspirations)\n            ]\n            for chunk in distribution_chunks:\n                pip.aspirate(vol_per_row*len(chunk), source)\n                for well in chunk:\n                    pip.dispense(vol_per_row, well.bottom(1))\n                    wick(pip, well)\n            pip.drop_tip()\n\n            # reassign pipette based on transfer volume per sample\n            pip = m300 if volume > 20 else m20\n            if not new_tip:\n                pick_up(pip, 8)\n            for i, s in enumerate(final_destinations_m):\n                if not pip.has_tip:\n                    pick_up(pip, 8)\n                pip.transfer(volume, distribution_column,\n                             s.bottom(1), new_tip='never')\n                pip.mix(mix_reps, volume*0.8, s.bottom(1))\n                wick(pip, s)\n                if new_tip:\n                    pip.drop_tip()\n            if pip.has_tip:\n                pip.drop_tip()\n        else:\n            pip = m300 if volume > 20 else m20\n            if not new_tip:\n                pick_up(pip, 1)\n            for s in final_destinations_s:\n                if not pip.has_tip:\n                    pick_up(pip, 1)\n                pip.transfer(volume, source, s.bottom(1), new_tip='never')\n                pip.mix(mix_reps, volume*0.8, s.bottom(1))\n                wick(pip, s)\n                if new_tip:\n                    pip.drop_tip()\n            if pip.has_tip:\n                pip.drop_tip()\n\n    \"\"\"\n    V. Preparation of Whole Genome Amplification\n    \"\"\"\n\n    \"\"\" V:A \u2014 Cell Lysis/gDNA Extraction\"\"\"\n\n    vol_total_reaction = 30.0\n    vol_mm_ce = vol_total_reaction - vol_sample\n    column_distribute(vol_mm_ce, mm_ce, distribution_plate.columns()[0])\n\n    ctx.pause('Proceed with steps V:A:4-7 and replace sample plate on \\\ntemperature module before resuming.')\n\n    \"\"\" V:B \u2014 Whole Genome Amplification\"\"\"\n    vol_mm_wga = 45.0\n    column_distribute(vol_mm_wga, mm_wga, distribution_plate.columns()[1])\n\n    ctx.pause('Proceed with steps V:B:4-5 and replace sample plate on \\\ntemperature module before resuming.')\n\n    \"\"\" V:C \u2014 Dilution of Whole Genome Amplified Products\"\"\"\n    vol_wd1 = 76.0\n    vol_wga_product = 4.0\n    # pre-transfer dilution buffer\n    column_distribute(vol_wd1, wd1, distribution_plate.columns()[2],\n                      final_destinations_m=dilution1_samples_m,\n                      final_destinations_s=dilution1_samples_s, mix_reps=0,\n                      new_tip=False)\n\n    # transfer sample to dilution and mix\n    for s, d in zip(samples_m, dilution1_samples_m):\n        pick_up(m20, 8)\n        m20.transfer(vol_wga_product, s, d, mix_after=(10, 10),\n                     new_tip='never')\n        wick(m20, d)\n        m20.drop_tip()\n\n    vol_wd2 = 55.0\n    vol_wga_product = 5.0\n    # pre-transfer dilution buffer\n    column_distribute(vol_wd2, wd2, distribution_plate.columns()[3],\n                      final_destinations_m=dilution2_samples_m,\n                      final_destinations_s=dilution2_samples_s, mix_reps=0,\n                      new_tip=False)\n\n    # transfer sample to dilution and mix\n    for s, d in zip(dilution1_samples_m, dilution2_samples_m):\n        pick_up(m20, 8)\n        m20.transfer(vol_wga_product, s, d, mix_after=(10, 10),\n                     new_tip='never')\n        wick(m20, d)\n        m20.drop_tip()\n\n    \"\"\"\n    VI. Library Preparation\n    \"\"\"\n\n    \"\"\" VI:A \u2014 Fragmentation and Adapter Ligation\"\"\"\n    vol_stem_loop_adapters = 4.0\n    vol_wd2_product = 8.0\n    stem_loop_adapters = distribution_plate.rows()[0][4:4+num_cols]\n    for a, s, d in zip(\n            stem_loop_adapters, dilution2_samples_m, ligation_samples_m):\n        pick_up(m20, 8)\n        m20.transfer(vol_stem_loop_adapters, a, d,\n                     new_tip='never')\n        wick(m20, d)\n\n        m20.transfer(vol_wd2_product, s, d, mix_after=(10, 10),\n                     new_tip='never')\n        wick(m20, d)\n        m20.drop_tip()\n\n    # library prep mm\n    vol_mm_library_prep = 10.5\n    column_distribute(vol_mm_library_prep, mm_library_prep,\n                      distribution_plate.columns()[4],\n                      final_destinations_m=ligation_samples_m, mix_reps=10,\n                      new_tip=False)\n\n    ctx.pause('Proceed with steps VI:A:7-8 and replace sample plate on \\\ntemperature module before resuming.')\n\n    \"\"\" VIB \u2014 Library Amplification and Indexing with UDI \"\"\"\n\n    # library prep mm\n    vol_mm_library_amp = 25.5\n    column_distribute(vol_mm_library_amp, mm_library_amp,\n                      distribution_plate.columns()[5],\n                      final_destinations_m=ligation_samples_m, mix_reps=1,\n                      new_tip=False)\n\n    # transfer UDI primers\n    vol_udi = 2.0\n    for s, d in zip(udi_m, ligation_samples_m):\n        pick_up(m20, 8)\n        m20.transfer(vol_udi, s, d, mix_after=(10, 10), new_tip='never')\n        wick(m20, d)\n        m20.drop_tip()\n\n    ctx.comment('Proceed with steps VI:B:5-7. Protocol complete.')\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 16,
            "label": "number of samples",
            "name": "num_samples",
            "type": "int"
        },
        {
            "default": 5.0,
            "label": "sample volume (in ul)",
            "name": "vol_sample",
            "type": "float"
        },
        {
            "label": "P20 8-channel pipette mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 8-channel pipette mount",
            "name": "m300_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "1.5ml Eppendorf tuberack on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "plate for mix distribution on 5",
            "share": false,
            "slot": "5",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "UDI plate on 6",
            "share": false,
            "slot": "6",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "sample plate on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Nick <ndiehl@opentrons.com",
        "protocolName": "Embgenix\u2122 PGT-A Kit: Preparation of Whole Genome Amplification",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 7 lw sample plate on Temperature Module GEN2 on 7",
            "share": false,
            "slot": "7",
            "type": "tempdeck"
        }
    ]
}