{
    "content": "import math\nfrom opentrons.types import Point\n\nmetadata = {\n    'protocolName': 'Embgenix\u2122 PGT-A Kit: Preparation of Whole Genome \\\nAmplification',\n    'author': 'Nick <ndiehl@opentrons.com',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.12'\n}\n\n\ndef run(ctx):\n\n    # tempplate > tuberack > tiprack\n\n    [num_samples, m20_mount, m300_mount] = get_values(  # noqa: F821\n        'num_samples', 'm20_mount', 'm300_mount')\n\n    # labware\n    tempdeck = ctx.load_module('temperature module gen2', '1')\n    tempdeck.set_temperature(4)\n    sample_plate = tempdeck.load_labware(\n        'opentrons_96_aluminumblock_nest_wellplate_100ul', 'sample plate')\n    tipracks20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', '5')]\n    tipracks200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n    tuberack = ctx.load_labware(\n        'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap', '8',\n        '1.5ml Eppendorf tuberack')\n\n    # pipettes\n    m20 = ctx.load_instrument('p20_multi_gen2', m20_mount,\n                              tip_racks=tipracks20)\n    m300 = ctx.load_instrument('p300_multi_gen2', m300_mount,\n                               tip_racks=tipracks200)\n\n    # reagents\n    num_cols = math.ceil(num_samples/8)\n    samples = sample_plate.rows()[0][:num_cols]\n    cell_extraction_mm = tuberack.wells_by_name()['A1']\n\n    def pick_up(pip, num_tips):\n        tip_cols = [col for rack in pip.tip_racks for col in rack.columns()]\n        for col in tip_cols:\n            count = 0\n            for tip in col[::-1]:\n                if tip.has_tip:\n                    count += 1\n                if count == num_tips:\n                    pip.pick_up_tip(tip)\n                    return\n        ctx.pause(f'Refill {pip.tip_racks[0].wells()[0].max_volume}uL tiprack \\\n before resuming.')\n        pip.reset_tipracks()\n        pick_up(pip, num_tips)\n\n    def wick(pip, well, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*well.diameter/2*0.8, z=3)))\n\n    def column_distribute(volume, source, distribution_column):\n        if num_cols > 1:\n            vol_per_row = volume*num_cols*1.1  # overage\n            pip = m300 if vol_per_row > 20 else m20\n            pick_up(pip, 1)\n            num_aspirations = math.ceil(\n                vol_per_row*8/pip.tip_racks[0].wells()[0].max_volume)\n            wells_per_asp = pip.tip_racks[0].wells()[0].max_volume//vol_per_row\n            distribution_chunks = [\n                distribution_column[i*wells_per_asp:(i+1)*wells_per_asp]\n                if i < num_aspirations - 1\n                else col[i*wells_per_asp:]\n                for i in range(num_aspirations)\n            ]\n            for chunk in distribution_chunks:\n                pip.aspirate(vol_per_row*len(chunk))\n                for well in chunk:\n                    pip.dispense(vol_per_row, well.bottom(1))\n                    wick(pip, well)\n\n            # reassign pipette based on actual transfer volume\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 96,
            "label": "number of samples",
            "name": "num_samples",
            "type": "int"
        },
        {
            "label": "P20 8-channel pipette mount",
            "name": "m20_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "P300 8-channel pipette mount",
            "name": "m300_mount",
            "options": [
                {
                    "label": "left",
                    "value": "left"
                },
                {
                    "label": "right",
                    "value": "right"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "sample plate on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_aluminumblock_nest_wellplate_100ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 5",
            "share": false,
            "slot": "5",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "1.5ml Eppendorf tuberack on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Nick <ndiehl@opentrons.com",
        "protocolName": "Embgenix\u2122 PGT-A Kit: Preparation of Whole Genome Amplification",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 1 lw sample plate on Temperature Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "tempdeck"
        }
    ]
}