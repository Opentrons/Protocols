{
<<<<<<< HEAD
<<<<<<< HEAD
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Standard Curve Creation',\n    'author': 'Nick <ndiehl@opentrons.com>',\n    'apiLevel': '2.13',\n    'description': ''\n}\n\nflow_rate_modulator = 0.25  # 25% of default flow rates\nreps_mix = 5\nvol_mix = 100.0\n\n\ndef run(ctx):\n\n    [num_curves] = get_values(  # noqa: F821\n     'num_curves')\n\n    # labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', '4')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', '3')]\n    tiprack200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n\n    # pipettes\n    p20 = ctx.load_instrument('p20_single_gen2', 'left', tip_racks=tiprack20)\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'right', tip_racks=tiprack200)\n\n    # slow flow rates for blood\n    p20.flow_rate.aspirate *= flow_rate_modulator\n    p300.flow_rate.aspirate *= flow_rate_modulator\n    p20.flow_rate.dispense *= flow_rate_modulator\n    p300.flow_rate.dispense *= flow_rate_modulator\n\n    vol_stock = 4.0\n    vols_dilution = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n    # liquids\n    stocks_b = tuberack.wells()[:num_curves]\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def mix_high_low(pip,\n                     reps,\n                     vol,\n                     well,\n                     z_offset_low=2.0,\n                     z_offset_high=5.0):\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(z_offset_low))\n            pip.dispense(vol, well.bottom(z_offset_high))\n\n    \"\"\" PROTOCOL STEPS\"\"\"\n    for n in range(num_curves):\n\n        # initial stock transfer to plate\n        stock_source = stocks_b[n]\n        p20.pick_up_tip()\n        p20.aspirate(2, stock_source.top())  # pre-airgap\n        p20.aspirate(vol_stock, stock_source.bottom(3))\n        slow_withdraw(p20, stock_source)\n        p20.dispense(p20.current_volume, plate.rows()[n][0].bottom(5))\n        slow_withdraw(p20, plate.rows()[n][0])\n        p20.drop_tip()\n\n        # serial dilution\n        sources = plate.rows()[n][:10]\n        destinations = plate.rows()[n][1:11]\n\n        vol_reverse_pipette = 20.0\n\n        for i, (vol_dilution, s, d) in enumerate(\n                zip(vols_dilution, sources, destinations)):\n            p300.pick_up_tip()\n            mix_high_low(p300, reps_mix, vol_mix, s)\n            p300.aspirate(vol_reverse_pipette, s.bottom(2))\n            p300.aspirate(vol_dilution, s.bottom(2))\n            slow_withdraw(p300, s)\n            p300.dispense(vol_dilution, d.bottom(2))\n            slow_withdraw(p300, d)\n            if i == len(sources) - 1:\n                p300.drop_tip()\n                p300.pick_up_tip()\n                mix_high_low(p300, reps_mix, vol_mix, d)\n            p300.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 1,
            "label": "number of curves (1-8)",
            "name": "num_curves",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Deepwell Plate 2mL on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with NEST 1.5 mL Snapcap on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Nick <ndiehl@opentrons.com>",
        "description": "",
        "protocolName": "Standard Curve Creation"
    },
    "modules": []
}
{
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Standard Curve Creation',\n    'author': 'Nick <ndiehl@opentrons.com>',\n    'apiLevel': '2.13',\n    'description': ''\n}\n\nnum_curves = 1\nflow_rate_modulator = 0.25  # 25% of default flow rates\nreps_mix = 5\nvol_mix = 100.0\n\n\ndef run(ctx):\n\n    # labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', '4')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', '3')]\n    tiprack200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n\n    # pipettes\n    p20 = ctx.load_instrument('p20_single_gen2', 'left', tip_racks=tiprack20)\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'right', tip_racks=tiprack200)\n\n    # slow flow rates for blood\n    p20.flow_rate.aspirate *= flow_rate_modulator\n    p300.flow_rate.aspirate *= flow_rate_modulator\n    p20.flow_rate.dispense *= flow_rate_modulator\n    p300.flow_rate.dispense *= flow_rate_modulator\n\n    vol_stock = 4.0\n    vols_dilution = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n    # liquids\n    stocks_b = tuberack.wells()[:num_curves]\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def mix_high_low(pip,\n                     reps,\n                     vol,\n                     well,\n                     z_offset_low=2.0,\n                     z_offset_high=5.0):\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(z_offset_low))\n            pip.dispense(vol, well.bottom(z_offset_high))\n\n    \"\"\" PROTOCOL STEPS\"\"\"\n    for n in range(num_curves):\n\n        # initial stock transfer to plate\n        stock_source = stocks_b[n]\n        p20.pick_up_tip()\n        p20.aspirate(2, stock_source.top())  # pre-airgap\n        p20.aspirate(vol_stock, stock_source.bottom(3))\n        slow_withdraw(p20, stock_source)\n        p20.dispense(p20.current_volume, plate.rows()[n][0].bottom(5))\n        slow_withdraw(p20, plate.rows()[n][0])\n        p20.drop_tip()\n\n        # serial dilution\n        sources = plate.rows()[n][:10]\n        destinations = plate.rows()[n][1:11]\n\n        vol_reverse_pipette = 20.0\n\n        for i, (vol_dilution, s, d) in enumerate(\n                zip(vols_dilution, sources, destinations)):\n            p300.pick_up_tip()\n            mix_high_low(p300, reps_mix, vol_mix, s)\n            p300.aspirate(vol_reverse_pipette, s.bottom(2))\n            p300.aspirate(vol_dilution, s.bottom(2))\n            slow_withdraw(p300, s)\n            p300.dispense(vol_dilution, d.bottom(2))\n            slow_withdraw(p300, d)\n            if i == len(sources) - 1:\n                p300.drop_tip()\n                p300.pick_up_tip()\n                mix_high_low(p300, reps_mix, vol_mix, d)\n            p300.drop_tip()\n",
=======
    "content": "metadata = {\n    'protocolName': 'Standard Curve Creation',\n    'author': 'Nick <ndiehl@opentrons.com>',\n    'apiLevel': '2.13',\n    'description': ''\n}\n\nflow_rate_modulator = 0.25  # 25% of default flow rates\nreps_mix = 5\nvol_mix = 100.0\n\n\ndef run(ctx):\n\n    [num_curves] = get_values(  # noqa: F821\n     'num_curves')\n\n    # labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', '4')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', '3')]\n    tiprack200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n\n    # pipettes\n    p20 = ctx.load_instrument('p20_single_gen2', 'left', tip_racks=tiprack20)\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'right', tip_racks=tiprack200)\n\n    # slow flow rates for blood\n    p20.flow_rate.aspirate *= flow_rate_modulator\n    p300.flow_rate.aspirate *= flow_rate_modulator\n    p20.flow_rate.dispense *= flow_rate_modulator\n    p300.flow_rate.dispense *= flow_rate_modulator\n\n    vol_stock = 4.0\n    vols_dilution = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n    # liquids\n    stocks_b = tuberack.wells()[:num_curves]\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def mix_high_low(pip,\n                     reps,\n                     vol,\n                     well,\n                     z_offset_low=2.0,\n                     z_offset_high=5.0):\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(z_offset_low))\n            pip.dispense(vol, well.bottom(z_offset_high))\n\n    \"\"\" PROTOCOL STEPS\"\"\"\n    for n in range(num_curves):\n\n        # initial stock transfer to plate\n        stock_source = stocks_b[n]\n        p20.pick_up_tip()\n        p20.aspirate(2, stock_source.top())  # pre-airgap\n        p20.aspirate(vol_stock, stock_source.bottom(3))\n        slow_withdraw(p20, stock_source)\n        p20.dispense(p20.current_volume, plate.rows()[n][0].bottom(5))\n        slow_withdraw(p20, plate.rows()[n][0])\n        p20.drop_tip()\n\n        # serial dilution\n        sources = plate.rows()[n][:10]\n        destinations = plate.rows()[n][1:11]\n\n        vol_reverse_pipette = 20.0\n\n        for i, (vol_dilution, s, d) in enumerate(\n                zip(vols_dilution, sources, destinations)):\n            p300.pick_up_tip()\n            mix_high_low(p300, reps_mix, vol_mix, s)\n            p300.aspirate(vol_reverse_pipette, s.bottom(2))\n            p300.aspirate(vol_dilution, s.bottom(2))\n            slow_withdraw(p300, s)\n            p300.dispense(vol_dilution, d.bottom(2))\n            slow_withdraw(p300, d)\n            if i == len(sources) - 1:\n                p300.drop_tip()\n                p300.pick_up_tip()\n                mix_high_low(p300, reps_mix, vol_mix, d)\n            p300.drop_tip()\n",
>>>>>>> a888950c3 (resolve)
=======
    "content": "metadata = {\n    'protocolName': 'Standard Curve Creation',\n    'author': 'Nick <ndiehl@opentrons.com>',\n    'apiLevel': '2.13',\n    'description': ''\n}\n\nflow_rate_modulator = 0.25  # 25% of default flow rates\nreps_mix = 5\nvol_mix = 100.0\n\n\ndef run(ctx):\n\n    [num_curves] = get_values(  # noqa: F821\n     'num_curves')\n\n    # labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', '4')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', '3')]\n    tiprack200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n\n    # pipettes\n    p20 = ctx.load_instrument('p20_single_gen2', 'left', tip_racks=tiprack20)\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'right', tip_racks=tiprack200)\n\n    # slow flow rates for blood\n    p20.flow_rate.aspirate *= flow_rate_modulator\n    p300.flow_rate.aspirate *= flow_rate_modulator\n    p20.flow_rate.dispense *= flow_rate_modulator\n    p300.flow_rate.dispense *= flow_rate_modulator\n\n    vol_stock = 4.0\n    vols_dilution = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n    # liquids\n    stocks_b = tuberack.wells()[:num_curves]\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def mix_high_low(pip,\n                     reps,\n                     vol,\n                     well,\n                     z_offset_low=2.0,\n                     z_offset_high=5.0):\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(z_offset_low))\n            pip.dispense(vol, well.bottom(z_offset_high))\n\n    \"\"\" PROTOCOL STEPS\"\"\"\n    for n in range(num_curves):\n\n        # initial stock transfer to plate\n        stock_source = stocks_b[n]\n        p20.pick_up_tip()\n        p20.aspirate(2, stock_source.top())  # pre-airgap\n        p20.aspirate(vol_stock, stock_source.bottom(3))\n        slow_withdraw(p20, stock_source)\n        p20.dispense(p20.current_volume, plate.rows()[n][0].bottom(5))\n        slow_withdraw(p20, plate.rows()[n][0])\n        p20.drop_tip()\n\n        # serial dilution\n        sources = plate.rows()[n][:10]\n        destinations = plate.rows()[n][1:11]\n\n        vol_reverse_pipette = 20.0\n\n        for i, (vol_dilution, s, d) in enumerate(\n                zip(vols_dilution, sources, destinations)):\n            p300.pick_up_tip()\n            mix_high_low(p300, reps_mix, vol_mix, s)\n            p300.aspirate(vol_reverse_pipette, s.bottom(2))\n            p300.aspirate(vol_dilution, s.bottom(2))\n            slow_withdraw(p300, s)\n            p300.dispense(vol_dilution, d.bottom(2))\n            slow_withdraw(p300, d)\n            if i == len(sources) - 1:\n                p300.drop_tip()\n                p300.pick_up_tip()\n                mix_high_low(p300, reps_mix, vol_mix, d)\n            p300.drop_tip()\n",
=======
    "content": "import math\n\nmetadata = {\n    'protocolName': 'Standard Curve Creation',\n    'author': 'Nick <ndiehl@opentrons.com>',\n    'apiLevel': '2.13',\n    'description': ''\n}\n\nflow_rate_modulator = 0.25  # 25% of default flow rates\nreps_mix = 5\nvol_mix = 100.0\n\n\ndef run(ctx):\n\n    [num_curves] = get_values(  # noqa: F821\n     'num_curves')\n\n    # labware\n    plate = ctx.load_labware('nest_96_wellplate_2ml_deep', '1')\n    tuberack = ctx.load_labware(\n        'opentrons_24_aluminumblock_nest_1.5ml_snapcap', '4')\n    tiprack20 = [ctx.load_labware('opentrons_96_filtertiprack_20ul', '3')]\n    tiprack200 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '6')]\n\n    # pipettes\n    p20 = ctx.load_instrument('p20_single_gen2', 'left', tip_racks=tiprack20)\n    p300 = ctx.load_instrument(\n        'p300_single_gen2', 'right', tip_racks=tiprack200)\n\n    # slow flow rates for blood\n    p20.flow_rate.aspirate *= flow_rate_modulator\n    p300.flow_rate.aspirate *= flow_rate_modulator\n    p20.flow_rate.dispense *= flow_rate_modulator\n    p300.flow_rate.dispense *= flow_rate_modulator\n\n    vol_stock = 4.0\n    vols_dilution = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n    # liquids\n    stocks_b = tuberack.wells()[:num_curves]\n\n    def slow_withdraw(pip, well, delay_seconds=2.0):\n        pip.default_speed /= 16\n        if delay_seconds > 0:\n            ctx.delay(seconds=delay_seconds)\n        pip.move_to(well.top())\n        pip.default_speed *= 16\n\n    def mix_high_low(pip,\n                     reps,\n                     vol,\n                     well,\n                     z_offset_low=2.0,\n                     z_offset_high=5.0):\n        for _ in range(reps):\n            pip.aspirate(vol, well.bottom(z_offset_low))\n            pip.dispense(vol, well.bottom(z_offset_high))\n\n    \"\"\" PROTOCOL STEPS\"\"\"\n    for n in range(num_curves):\n\n        # initial stock transfer to plate\n        stock_source = stocks_b[n]\n        p20.pick_up_tip()\n        p20.aspirate(2, stock_source.top())  # pre-airgap\n        p20.aspirate(vol_stock, stock_source.bottom(3))\n        slow_withdraw(p20, stock_source)\n        p20.dispense(p20.current_volume, plate.rows()[n][0].bottom(5))\n        slow_withdraw(p20, plate.rows()[n][0])\n        p20.drop_tip()\n\n        # serial dilution\n        sources = plate.rows()[n][:10]\n        destinations = plate.rows()[n][1:11]\n\n        vol_reverse_pipette = 20.0\n\n        for i, (vol_dilution, s, d) in enumerate(\n                zip(vols_dilution, sources, destinations)):\n            p300.pick_up_tip()\n            mix_high_low(p300, reps_mix, vol_mix, s)\n            p300.aspirate(vol_reverse_pipette, s.bottom(2))\n            p300.aspirate(vol_dilution, s.bottom(2))\n            slow_withdraw(p300, s)\n            p300.dispense(vol_dilution, d.bottom(2))\n            slow_withdraw(p300, d)\n            if i == len(sources) - 1:\n                p300.drop_tip()\n                p300.pick_up_tip()\n                mix_high_low(p300, reps_mix, vol_mix, d)\n            p300.drop_tip()\n",
>>>>>>> 90e858783 (08bbaf)
>>>>>>> de9b5d7db (08bbaf)
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 1,
            "label": "number of curves (1-8)",
            "name": "num_curves",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p20_single_gen2"
        },
        {
            "mount": "right",
            "name": "p300_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "NEST 96 Deepwell Plate 2mL on 1",
            "share": false,
            "slot": "1",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with NEST 1.5 mL Snapcap on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.13",
        "author": "Nick <ndiehl@opentrons.com>",
        "description": "",
        "protocolName": "Standard Curve Creation"
    },
    "modules": []
}