{
    "content": "metadata = {\n    'protocolName': 'Cherrypicking',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.8'\n}\n\n\ndef run(ctx):\n\n    [pipette_type, pipette_mount, tip_type,\n     tip_reuse, transfer_csv] = get_values(  # noqa: F821\n        \"pipette_type\", \"pipette_mount\", \"tip_type\", \"tip_reuse\",\n        \"transfer_csv\")\n\n    tiprack_map = {\n        'p10_single': {\n            'standard': 'opentrons_96_tiprack_10ul',\n            'filter': 'opentrons_96_filtertiprack_20ul'\n        },\n        'p50_single': {\n            'standard': 'opentrons_96_tiprack_300ul',\n            'filter': 'opentrons_96_filtertiprack_200ul'\n        },\n        'p300_single': {\n            'standard': 'opentrons_96_tiprack_300ul',\n            'filter': 'opentrons_96_filtertiprack_200ul'\n        },\n        'p1000_single': {\n            'standard': 'opentrons_96_tiprack_1000ul',\n            'filter': 'opentrons_96_filtertiprack_1000ul'\n        },\n        'p20_single_gen2': {\n            'standard': 'opentrons_96_tiprack_20ul',\n            'filter': 'opentrons_96_filtertiprack_20ul'\n        },\n        'p300_single_gen2': {\n            'standard': 'opentrons_96_tiprack_300ul',\n            'filter': 'opentrons_96_filtertiprack_200ul'\n        },\n        'p1000_single_gen2': {\n            'standard': 'opentrons_96_tiprack_1000ul',\n            'filter': 'opentrons_96_filtertiprack_1000ul'\n        }\n    }\n\n    # load labware\n    transfer_info = [[val.strip().lower() for val in line.split(',')]\n                     for line in transfer_csv.splitlines()\n                     if line.split(',')[0].strip()][1:]\n    block_inds = []\n    for i, line in enumerate(transfer_info):\n        if line[0].strip().lower() != 'pause':\n            s_lw, s_slot, d_lw, d_slot = line[1:3] + line[5:7]\n            for slot, lw in zip([s_slot, d_slot], [s_lw, d_lw]):\n                if not int(slot) in ctx.loaded_labwares:\n                    ctx.load_labware(lw.lower(), slot)\n        else:\n            block_inds.append(i)\n\n    # load tipracks in remaining slots\n    tiprack_type = tiprack_map[pipette_type][tip_type]\n    tipracks = []\n    for slot in range(1, 13):\n        if slot not in ctx.loaded_labwares:\n            tipracks.append(ctx.load_labware(tiprack_type, str(slot)))\n\n    # setup blocks\n    block_inds.insert(0, -1)\n    block_inds.insert(len(block_inds), len(transfer_info))\n    transfer_blocks = []\n    for i in range(len(block_inds)-1):\n        transfer_blocks.append(transfer_info[block_inds[i]+1:block_inds[i+1]])\n\n    # load pipette\n    pip = ctx.load_instrument(pipette_type, pipette_mount, tip_racks=tipracks)\n\n    tip_count = 0\n    tip_max = len(tipracks*96)\n\n    def pick_up():\n        nonlocal tip_count\n        if tip_count == tip_max:\n            ctx.pause('Please refill tipracks before resuming.')\n            pip.reset_tipracks()\n            tip_count = 0\n        pip.pick_up_tip()\n        tip_count += 1\n\n    def parse_well(well):\n        letter = well[0]\n        number = well[1:]\n        return letter.upper() + str(int(number))\n\n    pip.home()\n\n    for i, block in enumerate(transfer_blocks):\n        if tip_reuse == 'never':\n            pick_up()\n\n        # find plate IDs\n        id_dict = {}\n        for line in block:\n            id, _, slot = line[0:3]\n            if id not in id_dict:\n                id_dict[id] = slot\n        comments = ', '.join(\n            [f'plate {key} in slot {val}' for key, val in id_dict.items()])\n        ctx.pause(f'Please load {comments}. Resume when loaded.')\n\n        for line in block:\n            _, s_slot, s_well, h, _, d_slot, d_well, vol = line[1:9]\n            source = ctx.loaded_labwares[\n                int(s_slot)].wells_by_name()[\n                    parse_well(s_well)].bottom(float(h))\n            dest = ctx.loaded_labwares[\n                int(d_slot)].wells_by_name()[parse_well(d_well)]\n            if tip_reuse == 'always':\n                pick_up()\n            pip.transfer(float(vol), source, dest, new_tip='never')\n            if tip_reuse == 'always':\n                pip.drop_tip()\n\n        if pip.hw_pipette['has_tip']:\n            pip.drop_tip()\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": "Source Labware ID,Source Labware Type,Source Slot,Source Well,Source Aspiration Height Above Bottom (in mm),Dest Labware Type,Dest Slot,Dest Well,Volume (in ul)\nRNA1,agilent_1_reservoir_290ml,3,A1,1,nest_96_wellplate_100ul_pcr_full_skirt,4,A11,1\nRNA2,nest_12_reservoir_15ml,4,A1,1,nest_96_wellplate_2ml_deep,5,A5,3\npause,,,\nRNA3,nest_1_reservoir_195ml,5,A1,1,nest_96_wellplate_2ml_deep,5,H12,7",
            "label": "Transfer .csv File",
            "name": "transfer_csv",
            "type": "textFile"
        },
        {
            "label": "Pipette Model",
            "name": "pipette_type",
            "options": [
                {
                    "label": "P10 Single (GEN 1)",
                    "value": "p10_single"
                },
                {
                    "label": "P50 Single (GEN 1)",
                    "value": "p50_single"
                },
                {
                    "label": "P300 Single (GEN 1)",
                    "value": "p300_single"
                },
                {
                    "label": "P1000 Single (GEN 1)",
                    "value": "p1000_single"
                },
                {
                    "label": "P20 Single (GEN 2)",
                    "value": "p20_single_gen2"
                },
                {
                    "label": "P300 Single (GEN 2)",
                    "value": "p300_single_gen2"
                },
                {
                    "label": "P1000 Single (GEN 2)",
                    "value": "p1000_single_gen2"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Pipette Mount",
            "name": "pipette_mount",
            "options": [
                {
                    "label": "right",
                    "value": "right"
                },
                {
                    "label": "left",
                    "value": "left"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tip Type",
            "name": "tip_type",
            "options": [
                {
                    "label": "standard",
                    "value": "standard"
                },
                {
                    "label": "filter",
                    "value": "filter"
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Tip Usage Strategy",
            "name": "tip_reuse",
            "options": [
                {
                    "label": "Use a new tip for each transfer",
                    "value": "always"
                },
                {
                    "label": "Reuse tip for each transfer",
                    "value": "never"
                }
            ],
            "type": "dropDown"
        }
    ],
    "instruments": [
        {
            "mount": "right",
            "name": "p10_single"
        }
    ],
    "labware": [
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 1",
            "share": false,
            "slot": "1",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Agilent 1 Well Reservoir 290 mL on 3",
            "share": false,
            "slot": "3",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "NEST 96 Well Plate 100 \u00b5L PCR Full Skirt on 4",
            "share": false,
            "slot": "4",
            "type": "nest_96_wellplate_100ul_pcr_full_skirt"
        },
        {
            "name": "NEST 96 Deepwell Plate 2mL on 5",
            "share": false,
            "slot": "5",
            "type": "nest_96_wellplate_2ml_deep"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 7",
            "share": false,
            "slot": "7",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 8",
            "share": false,
            "slot": "8",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 10",
            "share": false,
            "slot": "10",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons 96 Tip Rack 10 \u00b5L on 11",
            "share": false,
            "slot": "11",
            "type": "opentrons_96_tiprack_10ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.8",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Cherrypicking",
        "source": "Custom Protocol Request"
    },
    "modules": []
}