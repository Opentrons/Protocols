{
    "content": "from opentrons import protocol_api\nfrom opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': 'Illumina GUIDE-seq NGS Prep: Cleanup',\n    'author': 'Nick <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.12'\n}\n\n\ndef run(ctx):\n\n    [num_samples, vol_sample, ratio_beads] = get_values(  # noqa: F821\n        'num_samples', 'vol_sample', 'ratio_beads')\n\n    # load modules\n    magdeck = ctx.load_module('magnetic module gen2', '1')\n    tempdeck = ctx.load_module('temperature module gen2', '3')\n\n    # load labware\n    magplate = magdeck.load_labware('biorad_96_wellplate_200ul_pcr',\n                                    'cleanup plate')\n    sampleplate = ctx.load_labware(\n            'opentrons_96_aluminumblock_biorad_wellplate_200ul', '2',\n            'sample plate')\n    tempplate = tempdeck.load_labware('biorad_96_wellplate_200ul_pcr',\n                                      'reagent plate')\n    reservoir = ctx.load_labware('nest_12_reservoir_15ml', '5',\n                                 'reagent reservoir')\n    tipracks20 = [\n        ctx.load_labware('opentrons_96_filtertiprack_20ul', slot)\n        for slot in ['4']]\n    tipracks200 = [\n        ctx.load_labware('opentrons_96_filtertiprack_200ul', slot)\n        for slot in ['6', '9']]\n\n    # load pipettes\n    m300 = ctx.load_instrument('p300_multi_gen2', 'left',\n                               tip_racks=tipracks200)\n    m20 = ctx.load_instrument('p20_multi_gen2', 'right', tip_racks=tipracks20)\n\n    # calculations and reagents\n    mag_height = 6.0\n    num_cols = math.ceil(num_samples/8)\n    samples = sampleplate.rows()[0][:num_cols]\n    mag_samples = magplate.rows()[0][:num_cols]\n    mm_frag = tempplate.rows()[0][0]\n    mm_phos = tempplate.rows()[0][1]\n    mm_lig = tempplate.rows()[0][2]\n    mm_pcr1 = tempplate.rows()[0][3]\n    mm_pcr2 = tempplate.rows()[0][4]\n    y_xx = tempplate.rows()[0][6:8]\n    i753_xx = tempplate.rows()[0][9:11]\n    beads = reservoir.rows()[0][0]\n    etoh = reservoir.rows()[0][3]\n    rsb = reservoir.rows()[0][5]\n    liquid_trash = reservoir.rows()[0][10:]\n\n    tempdeck.set_temperature(4)\n\n    def pick_up(pip):\n        try:\n            pip.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            msg = f'\\n\\n\\n\\nReplace the \\\n{pip.tip_racks[0].wells()[0].max_volume}ul tips in slots \\\n{\", \".join([rack.parent for rack in pip.tip_racks])}'\n            ctx.pause(msg)\n            print(msg)\n            pip.reset_tipracks()\n            pip.pick_up_tip()\n\n    # advanced liquid handling function definitions\n\n    def wick(well, pip, side=1):\n        pip.move_to(well.bottom().move(Point(x=side*well.diameter/2*0.8, z=3)))\n\n    def slow_withdraw(well, pip=m20):\n        ctx.max_speeds['A'] = 25\n        ctx.max_speeds['Z'] = 25\n        pip.move_to(well.top())\n        del ctx.max_speeds['A']\n        del ctx.max_speeds['Z']\n\n    def transfer_mix(vol, source, sample_set=samples, reps_mix_asp=0,\n                     vol_mix_asp=0, reps_mix_dest=10, vol_mix_dest=20,\n                     prompt=True):\n\n        source_list = [source]*num_cols if not type(source) == list else source\n        pip = m20 if vol <= 20 else m300\n        for s, source_well in zip(sample_set, source_list):\n            pick_up(pip)\n            if reps_mix_asp > 0:\n                pip.mix(reps_mix_asp, vol_mix_asp, source_well)\n            pip.aspirate(vol, source_well)\n            slow_withdraw(source_well, pip)\n            if sample_set == samples:\n                dispense_loc = s\n            else:\n                side = 1 if magplate.rows()[0].index(s) % 2 == 0 else -1\n                dispense_loc = s.bottom().move(Point(x=side*s.diameter/2, z=2))\n            pip.move_to(s.center())\n            pip.dispense(vol, dispense_loc)\n            if reps_mix_dest > 0:\n                pip.mix(reps_mix_dest, vol_mix_dest, s)\n            slow_withdraw(s, pip)\n            pip.drop_tip()\n        if prompt:\n            ctx.pause('\\n\\n\\n\\nRemove reaction plate (slot 2) for thermal \\\ncycling. Replace when finished.\\n\\n\\n\\n')\n\n    def remove_supernatant(vol, pip=m300, dests=liquid_trash, z_asp=0.2,\n                           z_disp=1.0, do_wick=False):\n        for s, d in mag_samples, dests:\n            if not pip.has_tip:\n                pick_up(pip)\n            pip.move_to(s.top())\n            ctx.max_speeds['A'] = 25\n            ctx.max_speeds['Z'] = 25\n            # side = -1 if magplate.rows()[0].index(s) % 2 == 0 else 1\n            side = 0\n            pip.aspirate(vol, s.bottom().move(Point(x=side, z=z_asp)))\n            pip.move_to(s.top())\n            del ctx.max_speeds['A']\n            del ctx.max_speeds['Z']\n            pip.dispense(vol, d.bottom(z_disp))\n            if do_wick:\n                wick(d, pip)\n            pip.drop_tip()\n\n    def wash(vol, source=etoh, pip=m300, time_incubation_seconds=30.0,\n             vol_residual=0, dests=liquid_trash):\n        pick_up(pip)\n        for s in mag_samples:\n            pip.aspirate(vol, source)\n            slow_withdraw(source, pip)\n            pip.dispense(vol, s.top())\n        pip.move_to(source.top(2))\n\n        ctx.delay(minutes=time_incubation_seconds,\n                  msg='\\n\\n\\n\\nIncubating\\n\\n\\n\\n')\n        remove_supernatant(vol, pip=pip, dests=dests, z_disp=dests[0].depth)\n\n    transfer_mix(7.5, mm_frag)\n\n    transfer_mix(30*ratio_beads, beads, reps_mix_asp=5, vol_mix_asp=200,\n                 reps_mix_dest=10, vol_mix_dest=50)\n    ctx.delay(minutes=5, msg='\\n\\n\\n\\n5 minute bead incubation.\\n\\n\\n\\n')\n\n    total_vol = vol_sample + 7.5 + 30\n    for s, m in zip(samples, mag_samples):\n        pick_up(m300)\n        m300.transfer(total_vol, s, m, new_tip='never')\n        slow_withdraw(m, m300)\n        m300.drop_tip()\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=2, msg='\\n\\n\\n\\nBinding.\\n\\n\\n\\n')\n    remove_supernatant(total_vol-3.0)\n\n    wash(100)\n    wash(150)\n\n    # aspirate residual\n    remove_supernatant(10, pip=m20, z_asp=0.1)\n    ctx.delay(minutes=2, msg='\\n\\n\\n\\nAir dry.\\n\\n\\n\\n')\n    magdeck.disengage()\n\n    transfer_mix(10, rsb, mag_samples, reps_mix_dest=10, vol_mix_dest=8)\n    ctx.delay(minutes=2, msg='RSB incubation.')\n    magdeck.engage(height=5)\n    ctx.delay(minutes=2, msg='Binding')\n\n    # reassign samples in plate\n    samples = sampleplate.rows()[0][num_cols:num_cols*2]\n    remove_supernatant(8, m20, dests=samples, z_asp=0.1, do_wick=True)\n    magdeck.disengage()\n\n    transfer_mix(2, mm_phos, sample_set=samples, reps_mix_dest=10,\n                 vol_mix_dest=8)\n\n    transfer_mix(20, mm_lig, sample_set=samples, reps_mix_dest=10,\n                 vol_mix_dest=20)\n\n    transfer_mix(30*ratio_beads, beads, sample_set=samples, reps_mix_asp=5,\n                 vol_mix_asp=200, reps_mix_dest=10, vol_mix_dest=50)\n\n    # reassign samples in magplate\n    mag_samples = magplate.rows()[0][num_cols:num_cols*2]\n    for s, m in zip(samples, mag_samples):\n        pick_up(m300)\n        m300.transfer(60, s, m, new_tip='never')\n        slow_withdraw(m, m300)\n        m300.drop_tip()\n    ctx.delay(minutes=5, msg='\\n\\n\\n\\nIncubating.\\n\\n\\n\\n')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=5, msg='\\n\\n\\n\\nBinding.\\n\\n\\n\\n')\n    remove_supernatant(60-4.0)\n\n    wash(100)\n    wash(150)\n\n    # aspirate residual\n    remove_supernatant(20, pip=m20, z_asp=0.1)\n    ctx.delay(minutes=2, msg='\\n\\n\\n\\nAir dry.\\n\\n\\n\\n')\n    magdeck.disengage()\n\n    # resuspend\n    transfer_mix(21, rsb, mag_samples, reps_mix_dest=10, vol_mix_dest=8)\n    ctx.delay(minutes=2, msg='RSB incubation.')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=3, msg='Binding')\n\n    # reassign samples in plate\n    samples = sampleplate.rows()[0][num_cols*2:num_cols*3]\n    remove_supernatant(20, m20, dests=samples, z_asp=0.1, do_wick=True)\n    magdeck.disengage()\n\n    transfer_mix(9, mm_pcr1, sample_set=samples, reps_mix_dest=0, prompt=False)\n    transfer_mix(1, y_xx, sample_set=samples, reps_mix_dest=0)\n\n    transfer_mix(30*ratio_beads, beads, sample_set=samples, reps_mix_asp=5,\n                 vol_mix_asp=200, reps_mix_dest=10, vol_mix_dest=50)\n\n    # reassign samples in magplate\n    mag_samples = magplate.rows()[0][num_cols*2:num_cols*3]\n    for s, m in zip(samples, mag_samples):\n        pick_up(m300)\n        m300.transfer(60, s, m, new_tip='never')\n        slow_withdraw(m, m300)\n        m300.drop_tip()\n    ctx.delay(minutes=5, msg='\\n\\n\\n\\nIncubating.\\n\\n\\n\\n')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=3, msg='\\n\\n\\n\\nBinding.\\n\\n\\n\\n')\n    remove_supernatant(60-3.0)\n\n    wash(100)\n    wash(150)\n\n    # aspirate residual\n    remove_supernatant(20, pip=m20, z_asp=0.1)\n    ctx.delay(minutes=2, msg='\\n\\n\\n\\nAir dry.\\n\\n\\n\\n')\n    magdeck.disengage()\n\n    # resuspend\n    transfer_mix(16, rsb, sample_set=mag_samples, reps_mix_dest=10,\n                 vol_mix_dest=13)\n    ctx.delay(minutes=2, msg='RSB incubation.')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=3, msg='Binding')\n\n    # reassign samples in plate\n    samples = sampleplate.rows()[0][num_cols*3:num_cols*4]\n    remove_supernatant(15, m20, dests=samples, z_asp=0.1, do_wick=True)\n    magdeck.disengage()\n\n    transfer_mix(13.5, mm_pcr2, sample_set=samples, reps_mix_dest=0,\n                 prompt=False)\n    transfer_mix(0.5, y_xx, sample_set=samples, reps_mix_dest=0, prompt=False)\n    transfer_mix(1, i753_xx, sample_set=samples, reps_mix_dest=0)\n\n    transfer_mix(30*ratio_beads*0.7, source=beads, sample_set=samples,\n                 reps_mix_asp=5, vol_mix_asp=200, reps_mix_dest=10,\n                 vol_mix_dest=45)\n\n    # reassign samples in magplate\n    mag_samples = magplate.rows()[0][num_cols*3:num_cols*4]\n    for s, m in zip(samples, mag_samples):\n        pick_up(m300)\n        m300.transfer(30, s, m, new_tip='never')\n        slow_withdraw(m, m300)\n        m300.drop_tip()\n    ctx.delay(minutes=5, msg='\\n\\n\\n\\nIncubating.\\n\\n\\n\\n')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=3, msg='\\n\\n\\n\\nBinding.\\n\\n\\n\\n')\n    remove_supernatant(30-3.0)\n\n    wash(100)\n    wash(150)\n\n    # aspirate residual\n    remove_supernatant(20, pip=m20, z_asp=0.1)\n    ctx.delay(minutes=2, msg='\\n\\n\\n\\nAir dry.\\n\\n\\n\\n')\n    magdeck.disengage()\n\n    # elution\n    elution_samples = magplate.rows()[0][num_cols*4:num_cols*5]\n    transfer_mix(22, rsb, sample_set=mag_samples, reps_mix_dest=10,\n                 vol_mix_dest=15)\n    ctx.delay(minutes=2, msg='RSB incubation.')\n    magdeck.engage(mag_height)\n    ctx.delay(minutes=3, msg='Binding')\n    remove_supernatant(20, pip=m20, dests=elution_samples, do_wick=True)\n",
    "custom_labware_defs": [],
    "fields": [
        {
            "default": 16,
            "label": "number of samples (1-16)",
            "name": "num_samples",
            "type": "int"
        },
        {
            "default": 17.5,
            "label": "volume of sample (in ul)",
            "name": "vol_sample",
            "type": "int"
        },
        {
            "default": 1.0,
            "label": "beads ratio (x sample volume)",
            "name": "ratio_beads",
            "type": "int"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_multi_gen2"
        },
        {
            "mount": "right",
            "name": "p20_multi_gen2"
        }
    ],
    "labware": [
        {
            "name": "cleanup plate on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "sample plate on 2",
            "share": false,
            "slot": "2",
            "type": "opentrons_96_aluminumblock_biorad_wellplate_200ul"
        },
        {
            "name": "reagent plate on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "biorad_96_wellplate_200ul_pcr"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 20 \u00b5L on 4",
            "share": false,
            "slot": "4",
            "type": "opentrons_96_filtertiprack_20ul"
        },
        {
            "name": "reagent reservoir on 5",
            "share": false,
            "slot": "5",
            "type": "nest_12_reservoir_15ml"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons 96 Filter Tip Rack 200 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_filtertiprack_200ul"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.12",
        "author": "Nick <protocols@opentrons.com>",
        "protocolName": "Illumina GUIDE-seq NGS Prep: Cleanup",
        "source": "Custom Protocol Request"
    },
    "modules": [
        {
            "name": "MagneticModuleContext at Magnetic Module GEN2 on 1 lw cleanup plate on Magnetic Module GEN2 on 1",
            "share": false,
            "slot": "1",
            "type": "magdeck"
        },
        {
            "name": "TemperatureModuleContext at Temperature Module GEN2 on 3 lw reagent plate on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "tempdeck"
        }
    ]
}