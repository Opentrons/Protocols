{
    "content": "from opentrons import protocol_api\nfrom opentrons.protocol_api.contexts import InstrumentContext\nfrom opentrons.protocol_api.labware import Well, Labware\nfrom opentrons.types import Point\nimport math\n\nmetadata = {\n    'protocolName': '357404: Slide sample antibody staining',\n    'author': 'Eskil Andersen <protocols@opentrons.com>',\n    'source': 'Custom Protocol Request',\n    'apiLevel': '2.11'   # CHECK IF YOUR API LEVEL HERE IS UP TO DATE\n                         # IN SECTION 5.2 OF THE APIV2 \"VERSIONING\"\n}\n\n\ndef run(ctx: protocol_api.ProtocolContext):\n\n    [n_slots,\n     n_last_samples,\n     vol_reagent,\n     dispense_steps,\n     is_start_after_1st_incbn,\n     is_stop_after_1st_incbn,\n     tuberack_lname,\n     pipette_offset,\n     is_dry_run,\n     t_per_block] = get_values(  # noqa: F821\n     \"n_slots\",\n     \"n_last_samples\",\n     \"vol_reagent\",\n     \"dispense_steps\",\n     \"is_start_after_1st_incbn\",\n     \"is_stop_after_1st_incbn\",\n     \"tuberack_lname\",\n     \"pipette_offset\",\n     \"is_dry_run\",\n     \"t_per_block\")\n\n    # Definitions for loading labware, tipracks and pipettes.\n    slide_blocks_loader = {'lname': 'customslideblock_8_wellplate',\n                           'slots': [1, 4, 5, 7, 8, 10, 11]}\n    temp_mod_loader = {'lname': 'temperature module gen2', 'slot': '3'}\n    reservoir_loader = {'lname': 'agilent_1_reservoir_290ml', 'slot': '2'}\n    # The tuberack is loaded on temperature module\n    tuberack_loader = {'lname': tuberack_lname}\n    tiprack_300_loader = {'lname': 'opentrons_96_tiprack_300ul', 'slot': '6'}\n    tiprack_1000_loader = {'lname': 'opentrons_96_tiprack_1000ul', 'slot': '9'}\n    p300_loader = {'lname': 'p300_single_gen2', 'mount': 'left'}\n    p1000_loader = {'lname': 'p1000_single_gen2', 'mount': 'right'}\n\n    verbose = False\n\n    if not 0 < n_slots < 8:\n        raise Exception(\"The number of blocks have to be between 1 and 7\")\n\n    if not 0 < n_last_samples < 9:\n        raise Exception(\"The number of samples on the last block have to be\"\n                        + \"between 1 and 8\")\n\n    if is_start_after_1st_incbn and is_stop_after_1st_incbn:\n        raise Exception(\"Incompatible parameters: Protocol cannot both stop \"\n                        + \"after the first incubation and skip the first \"\n                        + \"incubation\")\n\n    '''\n\n    Add your modules here with:\n\n    module_name = ctx.load_module('{module_loadname}', '{slot number}')\n\n    Note: if you are loading a thermocycler, you do not need to specify\n    a slot number - thermocyclers will always occupy slots 7, 8, 10, and 11.\n\n    For all other modules, you can load them on slots 1, 3, 4, 6, 7, 9, 10.\n\n    '''\n    # load modules\n    temp_mod = ctx.load_module(temp_mod_loader['lname'],\n                               temp_mod_loader['slot'])\n\n    # load labware\n    # Labware: 290 mL reservoir, Tuberack for reagents, slide blocks\n    reservoir = ctx.load_labware(reservoir_loader['lname'],\n                                 reservoir_loader['slot'])\n    tuberack = temp_mod.load_labware(tuberack_loader['lname'])\n    slide_blocks = []\n    for slot in slide_blocks_loader['slots'][:n_slots]:\n        slide_block = ctx.load_labware(slide_blocks_loader['lname'], slot)\n        slide_blocks.append(slide_block)\n\n    '''\n\n    Add your labware here with:\n\n    labware_name = ctx.load_labware('{loadname}', '{slot number}')\n\n    If loading labware on a module, you can load with:\n\n    labware_name = module_name.load_labware('{loadname}')\n    where module_name is defined above.\n\n    '''\n    # load tipracks\n\n    '''\n\n    Add your tipracks here as a list:\n\n    For a single tip rack:\n\n    tiprack_name = [ctx.load_labware('{loadname}', '{slot number}')]\n\n    For multiple tip racks of the same type:\n\n    tiprack_name = [ctx.load_labware('{loadname}', 'slot')\n                     for slot in ['1', '2', '3']]\n\n    If two different tipracks are on the deck, use convention:\n    tiprack[number of microliters]\n    e.g. tiprack10, tiprack20, tiprack200, tiprack300, tiprack1000\n\n    '''\n    # Load 1000 uL tips on 9, 300 uL on 6\n    tiprack_300 = [ctx.load_labware(tiprack_300_loader['lname'],\n                                    tiprack_300_loader['slot'])]\n    tiprack_1000 = [ctx.load_labware(tiprack_1000_loader['lname'],\n                                     tiprack_1000_loader['slot'])]\n\n    # load instrument\n\n    '''\n    Nomenclature for pipette:\n\n    use 'p'  for single-channel, 'm' for multi-channel,\n    followed by number of microliters.\n\n    p20, p300, p1000 (single channel pipettes)\n    m20, m300 (multi-channel pipettes)\n\n    If loading pipette, load with:\n\n    ctx.load_instrument(\n                        '{pipette api load name}',\n                        pipette_mount (\"left\", or \"right\"),\n                        tip_racks=tiprack\n                        )\n    '''\n    # Load p300, p1000 gen2\n    p300 = ctx.load_instrument(\n                              p300_loader['lname'],\n                              p300_loader['mount'],\n                              tip_racks=tiprack_300\n                              )\n    p1000 = ctx.load_instrument(\n                              p1000_loader['lname'],\n                              p1000_loader['mount'],\n                              tip_racks=tiprack_1000\n                              )\n\n    # pipette functions   # INCLUDE ANY BINDING TO CLASS\n\n    '''\n\n    Define all pipette functions, and class extensions here.\n    These may include but are not limited to:\n\n    - Custom pickup functions\n    - Custom drop tip functions\n    - Custom Tip tracking functions\n    - Custom Trash tracking functions\n    - Slow tip withdrawal\n\n    For any functions in your protocol, describe the function as well as\n    describe the parameters which are to be passed in as a docstring below\n    the function (see below).\n\n    def pick_up(pipette):\n        \"\"\"`pick_up()` will pause the protocol when all tip boxes are out of\n        tips, prompting the user to replace all tip racks. Once tipracks are\n        reset, the protocol will start picking up tips from the first tip\n        box as defined in the slot order when assigning the labware definition\n        for that tip box. `pick_up()` will track tips for both pipettes if\n        applicable.\n\n        :param pipette: The pipette desired to pick up tip\n        as definited earlier in the protocol (e.g. p300, m20).\n        \"\"\"\n        try:\n            pipette.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            ctx.pause(\"Replace empty tip racks\")\n            pipette.reset_tipracks()\n            pipette.pick_up_tip()\n\n    '''\n    def pick_up(pipette):\n        \"\"\"`pick_up()` will pause the protocol when all tip boxes are out of\n        tips, prompting the user to replace all tip racks. Once tipracks are\n        reset, the protocol will start picking up tips from the first tip\n        box as defined in the slot order when assigning the labware definition\n        for that tip box. `pick_up()` will track tips for both pipettes if\n        applicable.\n\n        :param pipette: The pipette desired to pick up tip\n        as definited earlier in the protocol (e.g. p300, m20).\n        \"\"\"\n        try:\n            pipette.pick_up_tip()\n        except protocol_api.labware.OutOfTipsError:\n            flash_lights()\n            ctx.pause(\"Replace empty tip racks\")\n            pipette.reset_tipracks()\n            pipette.pick_up_tip()\n    # helper functions\n    '''\n    Define any custom helper functions outside of the pipette scope here, using\n    the convention seen above.\n\n    e.g.\n\n    def remove_supernatant(vol, index):\n        \"\"\"\n        function description\n\n        :param vol:\n\n        :param index:\n        \"\"\"\n\n\n    '''\n    class VolTracker:\n        def __init__(self, labware: Labware,\n                     well_vol: float = 0,\n                     start: int = 1, end: int = 8,\n                     mode: str = 'reagent',\n                     pip_type: str = 'single',\n                     msg: str = 'Refill labware volumes'):\n            \"\"\"\n            Voltracker tracks the volume(s) used in a piece of labware\n\n            :param labware: The labware to track\n            :param well_vol: The volume of the liquid in the wells, if using a\n            multi-pipette with a well plate, treat the plate like a reservoir,\n            i.e. start=1, end=1, well_vol = 8 * vol of each individual well.\n            :param pip_type: The pipette type used 'single' or 'multi'\n            :param mode: 'reagent' or 'waste'\n            :param start: The starting well\n            :param end: The ending well\n            :param msg: Message to send to the user when all wells are empty\n            (or full when in waste mode)\n\n            \"\"\"\n            self.labware_wells = dict.fromkeys(\n                labware.wells()[start-1:end], 0)\n            self.labware_wells_backup = self.labware_wells.copy()\n            self.well_vol = well_vol\n            self.pip_type = pip_type\n            self.mode = mode\n            self.start = start\n            self.end = end\n            self.msg = msg\n\n            # Parameter error checking\n            if not (pip_type == 'single' or pip_type == 'multi'):\n                raise Exception('Pipette type must be single or multi')\n\n            if not (mode == 'reagent' or mode == 'waste'):\n                raise Exception('mode must be reagent or waste')\n\n        def flash_lights(self):\n            \"\"\"\n            Flash the lights of the robot to grab the users attention\n            \"\"\"\n            initial_light_state = ctx.rail_lights_on\n            opposite_state = not initial_light_state\n            for _ in range(5):\n                ctx.set_rail_lights(opposite_state)\n                ctx.delay(seconds=0.5)\n                ctx.set_rail_lights(initial_light_state)\n                ctx.delay(seconds=0.5)\n\n        def track(self, vol: float) -> Well:\n            '''track() will track how much liquid\n            was used up per well. If the volume of\n            a given well is greater than self.well_vol\n            it will remove it from the dictionary and iterate\n            to the next well which will act as the reservoir.'''\n            well = next(iter(self.labware_wells))\n            # Treat plates like reservoirs and add 8 well volumes together\n            vol = vol * 8 if self.pip_type == 'multi' else vol\n            if self.labware_wells[well] + vol >= self.well_vol:\n                del self.labware_wells[well]\n                if len(self.labware_wells) < 1:\n                    flash_lights()\n                    ctx.pause(self.msg)\n                    self.labware_wells = self.labware_wells_backup.copy()\n                well = next(iter(self.labware_wells))\n            self.labware_wells[well] += vol\n\n            if self.mode == 'waste':\n                ctx.comment('{}: {} ul of total waste'\n                            .format(well, int(self.labware_wells[well])))\n            else:\n                ctx.comment('{} uL of liquid used from {}'\n                            .format(int(self.labware_wells[well]), well))\n            return well\n\n    def transfer_reagent(pip: InstrumentContext,\n                         vol: float, source: VolTracker, dest: list,\n                         is_dry_run: bool = False, pip_offset: float = 0,\n                         steps: int = 5):\n        max_vol = pip.max_volume\n        vol_backup = vol\n        for well in dest:\n            pick_up(pip)\n            while vol > 0:\n                aspiration_vol = vol if vol < max_vol else max_vol\n                pip.aspirate(aspiration_vol, source.track(aspiration_vol))\n                dispense_while_moving(pip, well, aspiration_vol, steps,\n                                      verbose, pip_offset)\n                vol -= aspiration_vol\n            if is_dry_run:\n                pip.return_tip()\n            else:\n                pip.drop_tip()\n            vol = vol_backup\n\n    def flash_lights():\n        \"\"\"\n        Flash the lights of the robot to grab the users attention\n        \"\"\"\n        initial_light_state = ctx.rail_lights_on\n        opposite_state = not initial_light_state\n        for _ in range(5):\n            ctx.set_rail_lights(opposite_state)\n            ctx.delay(seconds=0.5)\n            ctx.set_rail_lights(initial_light_state)\n            ctx.delay(seconds=0.5)\n\n    def pause(msg: str, time_elapsed_sec: float = 0,\n              pause_period_minutes: int = 60, is_dry_run: bool = False):\n        msg_template = \"Incubating slides with {}\"\n        dry_run_msg = \"(Dry run): \"\n        if time_elapsed_sec > pause_period_minutes*60:\n            ctx.comment(\n                \"Skipping pause for incubation, the pause period has already \"\n                + \"elapsed during the reagent transfer of {}\".format(msg))\n            return\n        min_elapsed = math.ceil(time_elapsed_sec/60)\n        pause_period_secs = 60 - time_elapsed_sec % 60\n        pause_period_minutes -= min_elapsed\n        if not is_dry_run:\n            ctx.delay(minutes=pause_period_minutes, seconds=pause_period_secs,\n                      msg=msg_template.format(msg))\n        else:\n            ctx.comment(dry_run_msg + msg.format(msg))\n\n    def dispense_while_moving(pip: InstrumentContext,\n                              well: Well, vol: float, steps: int,\n                              is_verbose: bool = False, pip_offset: float = 0):\n        \"\"\"\n        This function dispenses a partial volume = vol/steps and then moves\n        a distance/steps and repeats\n        \"\"\"\n        dy = 9/steps\n        dv = vol/steps\n        start_location = well.top().move(Point(0, -4.5, -pip_offset))\n        pip.move_to(start_location)\n        for i in range(steps):\n            loc = start_location.move(Point(0, i*dy, 0))\n            if is_verbose:\n                ctx.comment(\"Dispensing at: {}\".format(loc))\n            pip.dispense(dv, loc)\n\n    # reagents\n    '''\n    Define where all reagents are on the deck using the labware defined above.\n\n    e.g.\n\n    water = reservoir12.wells()[-1]\n    waste = reservoir.wells()[0]\n    samples = plate.rows()[0][0]\n    dnase = tuberack.wells_by_name()['A4']\n\n    '''\n    # Each slide block has 8 \"wells\", each well uses up 100 uL of each\n    # reagent: Block, antibody1, antibody2, nuclear counterstain\n    block = VolTracker(tuberack, vol_reagent, start=1, end=4,\n                       msg=\"Refill Block reagent tubes\")\n    antibody1 = VolTracker(tuberack, vol_reagent, start=5, end=8,\n                           msg=\"Refill Antibody 1 reagent tubes\")\n    antibody2 = VolTracker(tuberack, vol_reagent, start=9, end=13,\n                           msg=\"Refill Antibody 2 reagent tubes\")\n    # Nuclear counterstain\n    nuc_cstn = VolTracker(tuberack, vol_reagent, start=14, end=17,\n                          msg=\"Refill Nuclear counterstain reagent tubes\")\n    pbs = VolTracker(\n        reservoir, 288*10**3, start=1, end=1, mode='reagent',\n        pip_type='single', msg=\"Refill PBS reservoir\")\n\n    # plate, tube rack maps\n    # Add all wells up to the block before the last block\n    # Assume that they all have 8 samples\n    target_wells = []\n    for slide_block in slide_blocks[:-1]:\n        for well in slide_block.wells():\n            target_wells.append(well)\n\n    # Add the wells of the last block, samples may be less than 8\n    for i in range(n_last_samples):\n        target_wells.append(slide_blocks[-1].wells()[i])\n\n    '''\n    Define any plate or tube maps here.\n\n    e.g.\n\n    plate_wells_by_row = [well for row in plate.rows() for well in row]\n\n    '''\n\n    # protocol\n\n    '''\n\n    Include header sections as follows for each \"section\" of your protocol.\n\n    Section can be defined as a step in a bench protocol.\n\n    e.g.\n\n    ctx.comment('\\n\\nMOVING MASTERMIX TO SAMPLES IN COLUMNS 1-6\\n')\n\n    for .... in ...:\n        ...\n        ...\n\n    ctx.comment('\\n\\nRUNNING THERMOCYCLER PROFILE\\n')\n\n    ...\n    ...\n    ...\n\n\n    '''\n    # Set the temperature to 4 degrees on the temperature module.\n    temp_mod.set_temperature(4)\n    dt = t_per_block * n_slots\n    # Transfer 100 \u00b5L of block from the tuberack to each destination well\n    # (slide) (could be done as a multi-dispense with the P1000)\n    # Measure time from the start of pipetting and subtract from 1 hr pause\n    # so that the next pipetting step starts after 1 hour and not 1 hour +\n    # the time it takes to finish the reagent transfer\n    if not is_start_after_1st_incbn:  # Skip 1st incubation?\n        ctx.comment(\"\\n\\nAdding block reagent\\n\")\n        # t = time.time() -- This won't work based on how the protocol is\n        # loaded on the OT-2, user has to manually time how long each block\n        # takes\n        transfer_reagent(p300, 100, block, target_wells,\n                         is_dry_run, pipette_offset,\n                         steps=dispense_steps)\n        # Pause/Incubate for 1 hour\n        if is_stop_after_1st_incbn:\n            ctx.comment(\"\\n\\nStopping protocol after 1st incubation\")\n            ctx.comment(\"Remove the slides, store them at 4C ON, \"\n                        + \"then replace the slides in the morning and restart \"\n                        + \"the protocol. (Remember to set the option to start \"\n                        + \"the protocol after the 1st incubation step)\")\n            return\n        pause(\"block\", time_elapsed_sec=dt, is_dry_run=is_dry_run)\n    else:\n        ctx.comment(\n            \"Starting the protocol from the 2nd reagent step (antibody1)\")\n    # Transfer 100 \u00b5L of primary antibody to dest. wells (slide)\n    ctx.comment(\"\\n\\nAdding Antibody 1 reagent\\n\")\n    transfer_reagent(p300, 100, antibody1, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    # Pause 1 hour\n    pause(\"Antibody 1\", time_elapsed_sec=dt, is_dry_run=is_dry_run)\n    # Transfer 4 mL of PBS to each slide target well (i.e. 4 round trips)\n    # with the P1000 (Slide wash)\n    ctx.comment(\"\\n\\nWashing slides with PBS\\n\")\n    transfer_reagent(p1000, 4000, pbs, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    # Transfer 100 \u00b5L of the second antibody\n    ctx.comment(\"\\n\\nAdding Antibody 2 reagent\\n\")\n    transfer_reagent(p300, 100, antibody2, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    # Pause 1 hour\n    pause(\"Antibody 2\", time_elapsed_sec=dt, is_dry_run=is_dry_run)\n    # Wash slides with 4 mL of PBS\n    ctx.comment(\"\\n\\nWashing slides with PBS\\n\")\n    transfer_reagent(p1000, 4000, pbs, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    # Transfer 100 \u00b5L nuclear counterstain to each well\n    ctx.comment(\"\\n\\nAdding Nuclear counterstain reagent\\n\")\n    transfer_reagent(p300, 100, nuc_cstn, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    # Incubate 5 minutes\n    pause(\"Nuclear counterstain\", pause_period_minutes=5,\n          is_dry_run=is_dry_run, time_elapsed_sec=dt)\n    # Wash slides with 4 mL of PBS\n    ctx.comment(\"\\n\\nWashing slides with PBS\\n\")\n    transfer_reagent(p1000, 4000, pbs, target_wells, pipette_offset,\n                     steps=dispense_steps)\n    ctx.comment(\"\\n\\n~~~~ End of protocol ~~~~\\n\")\n",
    "custom_labware_defs": [
        {
            "brand": {
                "brand": "Custom slide block",
                "brandId": []
            },
            "cornerOffsetFromSlot": {
                "x": 0,
                "y": 0,
                "z": 0
            },
            "dimensions": {
                "xDimension": 127.5,
                "yDimension": 85.2,
                "zDimension": 102.9
            },
            "groups": [
                {
                    "metadata": {
                        "wellBottomShape": "flat"
                    },
                    "wells": [
                        "A1",
                        "B1",
                        "A2",
                        "B2",
                        "A3",
                        "B3",
                        "A4",
                        "B4"
                    ]
                }
            ],
            "metadata": {
                "displayCategory": "wellPlate",
                "displayName": "Custom Slide Block 8 Well Plate",
                "displayVolumeUnits": "\u00b5L",
                "tags": []
            },
            "namespace": "custom_beta",
            "ordering": [
                [
                    "A1",
                    "B1"
                ],
                [
                    "A2",
                    "B2"
                ],
                [
                    "A3",
                    "B3"
                ],
                [
                    "A4",
                    "B4"
                ]
            ],
            "parameters": {
                "format": "irregular",
                "isMagneticModuleCompatible": false,
                "isTiprack": false,
                "loadName": "customslideblock_8_wellplate",
                "quirks": []
            },
            "schemaVersion": 2,
            "version": 1,
            "wells": {
                "A1": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 13,
                    "y": 60.2,
                    "z": 74.4
                },
                "A2": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 38,
                    "y": 60.2,
                    "z": 74.4
                },
                "A3": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 63,
                    "y": 60.2,
                    "z": 74.4
                },
                "A4": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 88,
                    "y": 60.2,
                    "z": 74.4
                },
                "B1": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 13,
                    "y": 24.2,
                    "z": 74.4
                },
                "B2": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 38,
                    "y": 24.2,
                    "z": 74.4
                },
                "B3": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 63,
                    "y": 24.2,
                    "z": 74.4
                },
                "B4": {
                    "depth": 28.5,
                    "diameter": 10,
                    "shape": "circular",
                    "totalLiquidVolume": 20000,
                    "x": 88,
                    "y": 24.2,
                    "z": 74.4
                }
            }
        }
    ],
    "fields": [
        {
            "default": 7,
            "label": "Number of slide blocks",
            "name": "n_slots",
            "type": "int"
        },
        {
            "default": 8,
            "label": "Number of samples in the last block",
            "name": "n_last_samples",
            "type": "int"
        },
        {
            "default": 1500,
            "label": "Volume in reagent containers",
            "name": "vol_reagent",
            "type": "float"
        },
        {
            "default": 5,
            "label": "Sweep dispense steps",
            "name": "dispense_steps",
            "type": "int"
        },
        {
            "label": "Start protocol after 1st incubation step",
            "name": "is_start_after_1st_incbn",
            "options": [
                {
                    "label": "No",
                    "value": false
                },
                {
                    "label": "Yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Stop protocol after 1st incubation step",
            "name": "is_stop_after_1st_incbn",
            "options": [
                {
                    "label": "No",
                    "value": false
                },
                {
                    "label": "Yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "label": "Reagent tuberack",
            "name": "tuberack_lname",
            "options": [
                {
                    "label": "Opentrons 24 Well Aluminum Block with NEST 2 mL Screwcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Well Aluminum Block with NEST 0.5 mL Screwcap",
                    "value": "opentrons_24_aluminumblock_nest_0.5ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Well Aluminum Block with NEST 1.5 mL Screwcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_screwcap"
                },
                {
                    "label": "Opentrons 24 Well Aluminum Block with NEST 1.5 mL Snapcap",
                    "value": "opentrons_24_aluminumblock_nest_1.5ml_snapcap"
                },
                {
                    "label": "Opentrons 24 Well Aluminum Block with NEST 2 mL Snapcap",
                    "value": "opentrons_24_aluminumblock_nest_2ml_snapcap"
                },
                {
                    "label": "Opentrons 24 Well Aluminum Block with Generic 2 mL Screwcap",
                    "value": "opentrons_24_aluminumblock_generic_2ml_screwcap"
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 0,
            "label": "Pipette offset",
            "name": "pipette_offset",
            "type": "float"
        },
        {
            "label": "Do a dry run?",
            "name": "is_dry_run",
            "options": [
                {
                    "label": "No",
                    "value": false
                },
                {
                    "label": "Yes",
                    "value": true
                }
            ],
            "type": "dropDown"
        },
        {
            "default": 205,
            "label": "Time per block (s)",
            "name": "t_per_block",
            "type": "float"
        }
    ],
    "instruments": [
        {
            "mount": "left",
            "name": "p300_single_gen2"
        },
        {
            "mount": "right",
            "name": "p1000_single_gen2"
        }
    ],
    "labware": [
        {
            "name": "Custom Slide Block 8 Well Plate on 1",
            "share": false,
            "slot": "1",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Agilent 1 Well Reservoir 290 mL on 2",
            "share": false,
            "slot": "2",
            "type": "agilent_1_reservoir_290ml"
        },
        {
            "name": "Opentrons 24 Well Aluminum Block with NEST 2 mL Screwcap on Temperature Module GEN2 on 3",
            "share": false,
            "slot": "3",
            "type": "opentrons_24_aluminumblock_nest_2ml_screwcap"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 4",
            "share": false,
            "slot": "4",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 5",
            "share": false,
            "slot": "5",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Opentrons 96 Tip Rack 300 \u00b5L on 6",
            "share": false,
            "slot": "6",
            "type": "opentrons_96_tiprack_300ul"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 7",
            "share": false,
            "slot": "7",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 8",
            "share": false,
            "slot": "8",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Opentrons 96 Tip Rack 1000 \u00b5L on 9",
            "share": false,
            "slot": "9",
            "type": "opentrons_96_tiprack_1000ul"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 10",
            "share": false,
            "slot": "10",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Custom Slide Block 8 Well Plate on 11",
            "share": false,
            "slot": "11",
            "type": "customslideblock_8_wellplate"
        },
        {
            "name": "Opentrons Fixed Trash on 12",
            "share": false,
            "slot": "12",
            "type": "opentrons_1_trash_1100ml_fixed"
        }
    ],
    "metadata": {
        "apiLevel": "2.11",
        "author": "Eskil Andersen <protocols@opentrons.com>",
        "protocolName": "357404: Slide sample antibody staining",
        "source": "Custom Protocol Request"
    },
    "modules": []
}