import math
from opentrons.types import Point
from opentrons.protocol_api.labware import Well

metadata = {
    'protocolName': 'Cell Culture',
    'author': 'Nick <ndiehl@opentrons.com',
    'source': 'Custom Protocol Request',
    'apiLevel': '2.12'
}


def run(ctx):

    data = """1170,600,570,0,0,0,0,0,0,0,0,0,0,65,65
1235,600,635,0,65,0,0,0,0,0,0,0,0,0,0
1040,600,440,65,65,0,65,0,0,0,0,0,0,0,65
975,600,375,0,65,65,65,65,0,0,0,0,0,0,65
1053,600,453,0,0,65,65,0,52,0,0,0,0,65,0
988,600,388,0,65,65,0,65,52,0,0,0,0,65,0
845,600,245,65,65,65,65,0,0,65,0,0,0,65,65
910,600,310,0,65,0,65,65,0,65,0,0,0,65,65
858,600,258,65,65,65,0,65,52,65,0,0,0,0,65
988,600,388,0,0,0,65,65,52,65,0,0,0,0,65
1040,600,440,0,65,65,0,0,0,0,65,0,0,65,0
1105,600,505,0,0,0,65,0,0,0,65,0,0,0,65
1040,600,440,65,0,0,0,65,0,0,65,0,0,0,65
923,600,323,65,0,65,0,0,52,0,65,0,0,65,65
923,600,323,0,65,0,65,65,52,0,65,0,0,65,0
923,600,323,65,0,65,65,65,52,0,65,0,0,0,0
975,600,375,65,0,0,65,0,0,65,65,0,0,65,0
1040,600,440,0,0,0,0,65,0,65,65,0,0,65,0
910,600,310,65,65,65,0,65,0,65,65,0,0,0,0
1053,600,453,0,0,65,0,0,52,65,65,0,0,0,0
858,600,258,0,65,65,65,0,52,65,65,0,0,0,65
793,600,193,65,65,0,0,65,52,65,65,0,0,65,65
793,600,193,0,0,65,65,65,52,65,65,0,0,65,65
975,600,375,65,65,65,0,0,0,0,0,65,0,0,65
1040,600,440,65,0,65,65,0,0,0,0,65,0,0,0
910,600,310,65,0,0,65,65,0,0,0,65,0,65,65
1053,600,453,0,65,0,0,0,52,0,0,65,0,0,65
728,600,128,65,65,65,65,65,52,0,0,65,0,65,65
1040,600,440,0,0,0,65,0,0,65,0,65,0,0,65
910,600,310,65,65,0,0,65,0,65,0,65,0,65,0
1040,600,440,0,0,65,0,65,0,65,0,65,0,0,0
858,600,258,65,0,65,0,0,52,65,0,65,0,65,65
923,600,323,65,65,0,65,0,52,65,0,65,0,0,0
1105,600,505,65,0,0,0,0,0,0,65,65,0,0,0
910,600,310,65,65,0,65,65,0,0,65,65,0,0,0
910,600,310,0,0,65,65,65,0,0,65,65,0,65,0
923,600,323,65,65,0,0,0,52,0,65,65,0,65,0
923,600,323,0,0,0,0,65,52,0,65,65,0,65,65
793,600,193,65,65,65,0,65,52,0,65,65,0,0,65
910,600,310,0,65,65,65,0,0,65,65,65,0,0,0
780,600,180,0,65,65,0,65,0,65,65,65,0,65,65
793,600,193,0,65,0,65,0,52,65,65,65,0,65,65
793,600,193,65,0,65,65,0,52,65,65,65,0,0,65
923,600,323,0,65,0,0,65,52,65,65,65,0,0,0
793,600,193,65,0,65,0,65,52,65,65,65,0,65,0
1118,600,518,0,0,65,0,0,0,0,0,0,52,0,65
1118,600,518,0,0,0,65,65,0,0,0,0,52,0,0
858,600,258,65,65,65,65,65,0,0,0,0,52,65,0
1001,600,401,65,65,65,0,0,52,0,0,0,52,0,0
936,600,336,0,65,0,65,0,52,0,0,0,52,65,65
871,600,271,0,0,65,65,65,52,0,0,0,52,65,65
988,600,388,0,65,65,0,0,0,65,0,0,52,65,0
988,600,388,65,0,65,65,0,0,65,0,0,52,0,0
988,600,388,0,65,0,0,65,0,65,0,0,52,0,65
858,600,258,65,0,65,0,65,0,65,0,0,52,65,65
871,600,271,65,0,0,65,0,52,65,0,0,52,65,65
1001,600,401,65,0,0,0,65,52,65,0,0,52,0,0
871,600,271,0,65,65,65,65,52,65,0,0,52,0,0
923,600,323,65,65,0,0,0,0,0,65,0,52,65,65
988,600,388,0,65,65,65,0,0,0,65,0,52,0,0
1066,600,466,0,0,0,0,0,52,0,65,0,52,65,0
806,600,206,65,65,0,65,65,52,0,65,0,52,0,65
858,600,258,65,65,65,0,0,0,65,65,0,52,0,65
858,600,258,0,0,65,65,0,0,65,65,0,52,65,65
858,600,258,65,65,0,0,65,0,65,65,0,52,65,0
793,600,193,65,0,0,65,65,0,65,65,0,52,65,65
871,600,271,65,65,0,65,0,52,65,65,0,52,0,0
741,600,141,65,65,65,65,0,52,65,65,0,52,65,0
871,600,271,0,0,65,0,65,52,65,65,0,52,0,65
988,600,388,65,0,65,0,0,0,0,0,65,52,65,0
988,600,388,0,65,0,65,0,0,0,0,65,52,65,0
858,600,258,0,65,65,0,65,0,0,0,65,52,65,65
1001,600,401,65,0,0,0,0,52,0,0,65,52,0,65
806,600,206,65,65,0,0,65,52,0,0,65,52,65,65
871,600,271,65,0,65,65,65,52,0,0,65,52,0,0
858,600,258,65,65,0,65,65,0,65,0,65,52,0,0
858,600,258,0,0,65,65,65,0,65,0,65,52,65,0
1001,600,401,0,0,0,0,0,52,65,0,65,52,65,0
806,600,206,0,65,65,65,0,52,65,0,65,52,0,65
871,600,271,0,0,0,0,65,52,65,0,65,52,65,65
988,600,388,0,0,65,0,0,0,0,65,65,52,0,65
858,600,258,65,65,65,0,65,0,0,65,65,52,0,0
793,600,193,0,65,0,65,65,0,0,65,65,52,65,65
793,600,193,65,0,65,65,65,0,0,65,65,52,0,65
806,600,206,0,65,65,0,0,52,0,65,65,52,65,65
806,600,206,65,0,0,65,65,52,0,65,65,52,65,0
806,600,206,0,65,65,65,65,52,0,65,65,52,0,0
663,600,63,65,65,65,65,0,0,65,65,65,52,65,65
858,600,258,65,0,0,0,65,0,65,65,65,52,0,65
728,600,128,0,65,65,65,65,0,65,65,65,52,0,65
871,600,271,0,65,0,0,0,52,65,65,65,52,0,65
936,600,336,0,0,0,65,0,52,65,65,65,52,0,0
923,600,323,32.5,32.5,32.5,32.5,32.5,26,32.5,32.5,32.5,26,32.5,32.5
923,600,323,32.5,32.5,32.5,32.5,32.5,26,32.5,32.5,32.5,26,32.5,32.5
1300,600,700,0,0,0,0,0,0,0,0,0,0,0,0
1300,600,700,0,0,0,0,0,0,0,0,0,0,0,0"""

    class WellH(Well):
        def __init__(self, well, height=5, min_height=5,
                     comp_coeff=1.15, current_volume=0):
            super().__init__(well._impl)
            self.well = well
            self.height = height
            self.min_height = min_height
            self.comp_coeff = comp_coeff
            self.radius = self.diameter/2
            self.current_volume = current_volume

        def height_dec(self, vol):
            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff
            if self.height - dh > self.min_height:
                self.height = self.height - dh
            else:
                self.height = self.min_height
            if self.current_volume - vol > 0:
                self.current_volume = self.current_volume - vol
            else:
                self.current_volume = 0
            return(self.well.bottom(self.height))

        def height_inc(self, vol):
            dh = (vol/(math.pi*(self.radius**2)))*self.comp_coeff
            if self.height + dh < self.depth:
                self.height = self.height + dh
            else:
                self.height = self.depth
            self.current_volume += vol
            return(self.well.bottom(self.height + 20))

    # labware
    tuberack50 = ctx.load_labware('opentrons_6_tuberack_falcon_50ml_conical',
                                  '1', 'media tuberack')
    tuberack15 = ctx.load_labware('opentrons_15_tuberack_falcon_15ml_conical',
                                  '4', 'factor tuberack')
    plate = ctx.load_labware('usascientific_96_wellplate_2.4ml_deep', '2')
    tiprack300 = [ctx.load_labware('opentrons_96_filtertiprack_200ul', '3')]
    tiprack1000 = [ctx.load_labware('opentrons_96_filtertiprack_1000ul', '6')]

    # pipettes
    p300 = ctx.load_instrument('p300_single_gen2', 'left',
                               tip_racks=tiprack300)
    p1000 = ctx.load_instrument('p1000_single_gen2', 'right',
                                tip_racks=tiprack1000)

    # reagents
    media1 = WellH(tuberack50.wells_by_name()['A1'], current_volume=50000,
                   height=tuberack50.wells_by_name()['A1'].depth*0.9)
    media2 = WellH(tuberack50.wells_by_name()['A2'], current_volume=50000,
                   height=tuberack50.wells_by_name()['A2'].depth*0.9)
    factors = tuberack15.wells()[:12]

    # parse data
    data = [
        [float(val) for val in line.split(',')]
        for line in data.splitlines()]

    def slow_withdraw(well, pip=p1000):
        ctx.max_speeds['A'] = 25
        ctx.max_speeds['Z'] = 25
        pip.move_to(well.top())
        del ctx.max_speeds['A']
        del ctx.max_speeds['Z']

    # transfer media
    p1000.pick_up_tip()
    for well, line in zip(plate.wells(), data):
        vol1, vol2 = line[1:3]
        for vol, media in zip([vol1, vol2], [media1, media2]):
            p1000.aspirate(vol, media.height_dec(vol))
            slow_withdraw(media, p1000)
            p1000.dispense(vol, well.bottom(2))
            slow_withdraw(well, p1000)

    # transfer factors
    for well, line in zip(plate.wells(), data):
        for tip, vol, factor in zip(tiprack300[0].wells()[:12],
                                    line[3:15],
                                    factors):
            if vol > 0:
                p300.pick_up_tip(tip)
                p300.aspirate(vol, factor.bottom(1.5))
                slow_withdraw(factor, p300)
                p300.dispense(vol, well.top(-2))
                p300.drop_tip()

    # mix
    for well in plate.wells():
        if not p1000.has_tip:
            p1000.pick_up_tip()
        p1000.mix(5, 800, well.bottom(2))
        slow_withdraw(well, p1000)
        p1000.drop_tip()
