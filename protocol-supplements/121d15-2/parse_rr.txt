import os
import csv
from datetime import date
import tkinter as tk
from tkinter import filedialog as fd
from tkinter import *

template_directory = '\\\\us17filp002\\production_data\\Production_System_Data\\REDO_Replaement_Templates'
output_directory = '\\\\us17filp002\\production_data\\DNA\\Application_Data\\Lab\\RedoReplacement\\RunFiles'
# template_directory = '/Users/nickdiehl/protocols/protocol-supplements/121d15-2'
# output_directory = '/Users/nickdiehl/protocols/protocol-supplements/121d15-2'
# template_directory = '/home/runner/121d15-2-gui/templates'
# output_directory = '/home/runner/121d15-2-gui/scripts'

enter_loop = True
root = tk.Tk()
root.geometry("800x400")

source1_file_prompt = tk.Label(root, text='source labware 1 file')
source1_scan_prompt = tk.Label(root, text='source labware 1 scan')
source1_scan = tk.Entry(root)
source1_scan.insert(0, '')
source1_status = tk.Label(root, text='')
destination1_scan_prompt = tk.Label(root, text='destination labware 1 scan')
destination1_scan = tk.Entry(root)
destination1_scan.insert(0, '')
source2_file_prompt = tk.Label(root, text='source labware 2 file')
source2_scan_prompt = tk.Label(root, text='source labware 2 scan')
source2_scan = tk.Entry(root, text='')
source2_scan.insert(0, '')
source2_status = tk.Label(root, text='')
destination2_scan_prompt = tk.Label(root, text='destination labware 2 scan')
destination2_scan = tk.Entry(root)
destination2_scan.insert(0, '')
volume_prompt = tk.Label(root, text='volume (in ul)')
volume = tk.Entry(root)
volume.insert(0, '200')
status = tk.Label(root, text='')
end_label = tk.Label(root, text='')
first_sample = None
last_sample = None

file_map = {
    'Redo Replacement 96 0.5ml plate': 'greiner_500_redoreplacementpicking.ot2.apiv2.py',
    'Redo Replacement 96 1.2ml plate': 'greiner_1000_redoreplacementpicking.ot2.apiv2.py',
    'Redo Replacement 96 2.2ml plate': 'irish_2200_redoreplacementpicking.ot2.apiv2.py',
    'Redo Replacement 384 0.24ml plate': 'greiner_384_redoreplacementpicking.ot2.apiv2.py',
    'Pooling 2ml tubes to 15ml tubes': 'pooling_2ml_15ml.ot2.apiv2.py',
    'Pooling 2ml tubes to 2ml tubes': 'pooling_2ml_2ml.ot2.apiv2.py',
    'Aliquoting 15ml tubes to 2ml tubes': 'aliquoting_15ml_2ml.ot2.apiv2.py',
    'Aliquoting 2ml tubes to 2ml tubes': 'aliquoting_2ml_2ml.ot2.apiv2.py',
}
options = file_map.keys()
dropdown_value = tk.StringVar(root)
dropdown_value.set('select protocol type')

# initial menu text
dropdown = tk.OptionMenu(root, dropdown_value, *options)

current_sample_barcode = ''


def select_file1():
    filename = fd.askopenfilename()
    return filename


def update_file1_status(text):
    source1_status['text'] = text


def select_file2():
    filename = fd.askopenfilename()
    return filename


def update_file2_status(text):
    source2_status['text'] = text


def button1_press():
    update_file1_status(select_file1())


def button2_press():
    update_file2_status(select_file2())


# open button
source1_file_button = tk.Button(
    root,
    text='open a file',
    command=button1_press
)
source2_file_button = tk.Button(
    root,
    text='open a file',
    command=button2_press
)


def parse_file_name(file_name):
    if '.txt' in file_name:
        return file_name.split('.txt')[0].split('/')[-1]
    elif '.csv' in file_name:
        return file_name.split('.csv')[0].split('/')[-1]
    else:
        return file_name.split('/')[-1]


def extract_csv_contents(file_path, var_name):
    content = []
    with open(file_path, 'r') as csv_file:
        all_lines = [line for line in csv_file.readlines()]
        for i, line in enumerate(all_lines):
            if i == 0:
                content.append(f'{var_name} = """{line}')
            elif i == len(all_lines) - 1:
                content.append(f'{line}"""')
            else:
                content.append(line)
    return content


def write_python_protocol(out_file_path, template_path, *args):
    template_contents = []
    with open(template_path, 'r') as template_file:
        for line in template_file.readlines():
            template_contents.append(line)
    with open(out_file_path, 'w') as out_file:
        for content in args:
            out_file.writelines(content)
            out_file.writelines(['\n\n'])
        out_file.writelines(template_contents)


def end():

    if source1_status['text'] != '':
        if source2_status['text'] != '':
            name_part_1 = parse_file_name(source1_status['text'])
            name_part_2 = parse_file_name(source2_status['text'])
            outfile_name = f"{name_part_1}-{name_part_2}.py"
            content1 = extract_csv_contents(source1_status['text'], 'input_file')
            content2 = extract_csv_contents(source2_status['text'], 'input_file2')

            if 'redo replacement' in dropdown_value.get().lower():
                destination1_info = [f"plate_scan = '{destination1_scan.get()}'"]
                destination2_info = [f"plate_scan2 = '{destination2_scan.get()}'"]
                source1_info = [f"tuberack_scan = '{source1_scan.get()}'"]
                source2_info = [f"tuberack_scan2 = '{source2_scan.get()}'"]
            else:
                source1_info = [f"tuberack1_scan = '{source1_scan.get()}'"]
                source2_info = []
                destination1_info = [f"tuberack2_scan = '{destination1_scan.get()}'"]
                destination2_info = []
        else:
            name_part_1 = parse_file_name(source1_status['text'])
            outfile_name = f"{name_part_1}.py"
            content1 = extract_csv_contents(source1_status['text'], 'input_file')
            content2 = ['input_file2 = ""']
            if 'redo replacement' in dropdown_value.get().lower():
                destination1_info = [f"plate_scan = '{destination1_scan.get()}'"]
                destination2_info = ["plate_scan2 = ''"]
                source1_info = [f"tuberack_scan = '{source1_scan.get()}'"]
                source2_info = ["tuberack_scan2 = ''"]
            else:
                source1_info = [f"tuberack1_scan = '{source1_scan.get()}'"]
                source2_info = []
                destination1_info = [f"tuberack2_scan = '{destination1_scan.get()}'"]
                destination2_info = []

        if dropdown_value.get() == 'select protocol type':
            status['text'] = 'Please select protocol type'
        template = file_map[dropdown_value.get()]
        template_path = f'{template_directory}\\{template}'
        out_file_path = f"{output_directory}\\{outfile_name}"
        volume_info = [f"default_disposal_vol = {volume.get()}\n", f"default_transfer_vol = {volume.get()}"]
        write_python_protocol(out_file_path, template_path,
                              content1,
                              content2,
                              source1_info,
                              source2_info,
                              destination1_info,
                              destination2_info,
                              volume_info)

        status['text'] = f'File successfully written to [{out_file_path}]'


def reset():
    source1_status['text'] = ''
    source2_status['text'] = ''
    source1_scan['text'] = ''
    destination1_scan['text'] = ''
    source2_scan['text'] = ''
    destination2_scan['text'] = ''


end_button = tk.Button(root, text='create protocol file', highlightbackground='blue', command=end)
reset_button = tk.Button(root, text='reset all fields', highlightbackground='blue', command=reset)
destroy_button = tk.Button(root, text="quit", highlightbackground='blue', command=root.destroy)

source1_file_prompt.grid(row=0, column=0)
source1_file_button.grid(row=0, column=1)
source1_scan_prompt.grid(row=1, column=0)
source1_scan.grid(row=1, column=1)
source1_status.grid(row=0, column=2, columnspan=5)
destination1_scan_prompt.grid(row=1, column=3)
destination1_scan.grid(row=1, column=4)
source2_file_prompt.grid(row=2, column=0)
source2_file_button.grid(row=2, column=1)
source2_scan_prompt.grid(row=3, column=0)
source2_scan.grid(row=3, column=1)
source2_status.grid(row=2, column=2, columnspan=5)
destination2_scan_prompt.grid(row=3, column=3)
destination2_scan.grid(row=3, column=4)
volume_prompt.grid(row=4, column=0)
volume.grid(row=4, column=1)
dropdown.grid(row=5, column=1)
end_label.grid(row=6, column=1)
status.grid(row=9, column=1, columnspan=4)
end_button.grid(row=6, column=3)
reset_button.grid(row=7, column=3)
destroy_button.grid(row=10, column=3)
end_label.grid(row=9, column=3)
root.mainloop()
